export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * Scalar type that represents date and time with a time zone, which, while
   * serialized as a string, promises to conform to ISO‐8601 format also supports the
   * now keyword which represents the current server time. Now also supports an
   * optional ISO‐8601 format period which is addedto the current time. Example:
   * now(P3Y6M4DT12H30M5S) or now(-P3Y6M4DT12H30M5S) 
   */
  MangoDateTime: any;
  /**
   * The `BigInt` scalar type represents non-fractional signed whole numeric values.
   * BigInt can represent values between -(2^53) + 1 and 2^53 - 1.
   */
  MangoBigInt: any;
  /** Scalar type that represents _only_ the day of a Date. */
  MangoDay: any;
  GUID: any;
  JSON: any;
  /**
   * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
   * `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
   * 8601 standard for representation of dates and times using the Gregorian calendar.
   */
  MetaDateTime: any;
  SophoraUUID: any;
  SophoraJSON: any;
  SophoraDatetime: any;
};

/** Extension of the field introspection type */
export type _ExtendedField = {
   __typename?: '_ExtendedField';
  /** The field name */
  name?: Maybe<Scalars['String']>;
  /** Additional metadata on this field */
  metadata?: Maybe<_FieldMetadata>;
};

/** Offers non-standard type information */
export type _ExtendedIntrospection = {
   __typename?: '_ExtendedIntrospection';
  /** A list of all types that have extended information */
  types: Array<_ExtendedType>;
};

/** Extension of the type introspection type */
export type _ExtendedType = {
   __typename?: '_ExtendedType';
  /** The type name */
  name?: Maybe<Scalars['String']>;
  /** A list of all fields of this type that have extended information */
  fields: Array<_ExtendedField>;
};

/** Configuration on how to join filters, ordering and limiting of a linked child field into this field */
export type _FieldJoin = {
   __typename?: '_FieldJoin';
  /** The name of the child field that has a link configured */
  linkField: Scalars['String'];
  /** Indicates that the join has already been processed. */
  ignore?: Maybe<Scalars['Boolean']>;
};

/**
 * Configuration of a link on a field. If this metadata is present, the consumer
 * should replace the type of the field with the type of the linked field and, for
 * the value of this field, fetch objects from the linked field according to this config
 */
export type _FieldLink = {
   __typename?: '_FieldLink';
  /** The field or a dot-separated list of fields starting from the query type that is used to resolve the link */
  field: Scalars['String'];
  /** If true, the field returns a list of objects instead of one object */
  batchMode: Scalars['Boolean'];
  /**
   * The argument name, optionally followed by a dot-separated path of input field
   * names, that is to be set to the id (or list of ids in case of batchMode)
   */
  argument: Scalars['String'];
  /**
   * The name of a field in the target type that contains the id. Only needed if
   * batchMode is true and the field may return the objects out of order
   */
  keyField?: Maybe<Scalars['String']>;
  /**
   * If specified, a new field with this name will be added with the target type.
   * If not specified, the annotated field will be replaced with the link field.
   */
  linkFieldName?: Maybe<Scalars['String']>;
  /** Indicates that the link has already been processed. */
  ignore?: Maybe<Scalars['Boolean']>;
};

/** Metadata on a GraphQL field */
export type _FieldMetadata = {
   __typename?: '_FieldMetadata';
  /** Specifies if this field should be resolved as a link to a different field */
  link?: Maybe<_FieldLink>;
  /** Specifies if and how filters, ordering and limiting of a linked child field should be joined into this field */
  join?: Maybe<_FieldJoin>;
};

export enum AspectRatio {
  Square = 'SQUARE',
  Aspect_16_9 = 'ASPECT_16_9'
}

export type AudioBroadcastService = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  branding?: Maybe<SophoraDocument>;
  brandingColor?: Maybe<Scalars['String']>;
  colors?: Maybe<Scalars['JSON']>;
  logoUrl?: Maybe<Scalars['String']>;
  audioLivestreams?: Maybe<MangoLivestreamConnection>;
  fallbackTeaserImage?: Maybe<MangoImageInterface>;
  epg?: Maybe<Array<Maybe<MangoEpgEntry>>>;
  items?: Maybe<Array<Maybe<AudioElement>>>;
  sophoraLivestreamDocuments?: Maybe<Array<Maybe<SophoraDocumentSummary>>>;
  sophoraChannelDocument?: Maybe<SophoraDocument>;
};


export type AudioBroadcastServiceColorsArgs = {
  product: SepProduct;
};


export type AudioBroadcastServiceLogoUrlArgs = {
  type?: Maybe<AspectRatio>;
  format?: Maybe<ImageFormat>;
};


export type AudioBroadcastServiceEpgArgs = {
  dayOffset?: Maybe<Scalars['Int']>;
  day?: Maybe<Scalars['MangoDay']>;
  slots?: Maybe<Array<Maybe<MangoEpgSlotKey>>>;
};


export type AudioBroadcastServiceItemsArgs = {
  types?: Maybe<Array<Maybe<AudioElementClass>>>;
  day?: Maybe<Scalars['MangoDay']>;
  hour?: Maybe<Scalars['Int']>;
  start?: Maybe<MangoDateFilter>;
  end?: Maybe<MangoDateFilter>;
};

export type AudioBroadcastServiceConnection = {
   __typename?: 'AudioBroadcastServiceConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<AudioBroadcastService>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export enum AudioBroadcastServiceId {
  Bayern_1 = 'Bayern_1',
  Bayern_2 = 'Bayern_2',
  Bayern_3 = 'Bayern_3',
  BrKlassik = 'BR_Klassik',
  B5Aktuell = 'B5_aktuell',
  Puls = 'puls',
  BayernPlus = 'Bayern_plus',
  BrHeimat = 'BR_Heimat'
}

export type AudioElement = {
  guid?: Maybe<Scalars['GUID']>;
  class: AudioElementClass;
  start: Scalars['MangoDateTime'];
  duration?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
};

export enum AudioElementClass {
  Music = 'Music',
  Cart = 'Cart',
  News = 'News',
  Live = 'Live',
  Promotion = 'Promotion',
  Audio = 'Audio',
  None = 'None',
  Commercial = 'Commercial',
  Control = 'Control',
  Command = 'Command',
  Info = 'Info',
  Project = 'Project',
  Magazine = 'Magazine'
}

export type AudioElementDefaultType = AudioElement & {
   __typename?: 'AudioElementDefaultType';
  guid?: Maybe<Scalars['GUID']>;
  class: AudioElementClass;
  start: Scalars['MangoDateTime'];
  duration?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
};

export enum AudioElementSlotKey {
  Previous = 'PREVIOUS',
  Current = 'CURRENT',
  Next = 'NEXT'
}


export enum ImageFormat {
  Svg = 'SVG',
  Png = 'PNG'
}


export type MangoAddToMyBookmarksInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the clip to bookmark. */
  id: Scalars['ID'];
};

/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgent = MangoNode & MangoAgentInterface & {
   __typename?: 'MangoAgent';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** This is a generated connection for Agent */
export type MangoAgentConnection = {
   __typename?: 'MangoAgentConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoAgentInterface>>>;
  edges?: Maybe<Array<Maybe<MangoAgentEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoAgentConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Agent */
export type MangoAgentEdge = {
   __typename?: 'MangoAgentEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoAgentInterface>;
};

export type MangoAgentFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property name */
  name?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
};

/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of conscious actor with a role or responsibility. (de: Agent, en: Agent) */
export type MangoAgentInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

export enum MangoAgentSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** Any kind of thing which has age restricted content. (not documented) */
export type MangoAgeRestrictedThing = MangoNode & MangoAgeRestrictedThingInterface & {
   __typename?: 'MangoAgeRestrictedThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Any kind of thing which has age restricted content. (not documented) */
export type MangoAgeRestrictedThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Lists a bunch of feature-toggles for Android apps */
export type MangoAndroidFeatureMap = {
   __typename?: 'MangoAndroidFeatureMap';
  /** Activate AGF Tracking */
  trackingAGF?: Maybe<Scalars['Boolean']>;
  /** Activate AT Internet Tracking */
  trackingATI?: Maybe<Scalars['Boolean']>;
  /** Activate Comscore Tracking */
  trackingComscore?: Maybe<Scalars['Boolean']>;
  /** Activate Google Analytics Tracking */
  trackingGA?: Maybe<Scalars['Boolean']>;
  /** Activate ivw Tracking */
  trackingIVW?: Maybe<Scalars['Boolean']>;
  /** Activate offline capabilities */
  offlineUse?: Maybe<Scalars['Boolean']>;
  /** Activate crashlytics */
  crashlytics?: Maybe<Scalars['Boolean']>;
};

/** Target audience (de: Zielgruppe, en: audience) */
export type MangoAudience = MangoNode & MangoAudienceInterface & MangoCategorizationInterface & {
   __typename?: 'MangoAudience';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Target audience (de: Zielgruppe, en: audience) */
export type MangoAudienceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Audience */
export type MangoAudienceConnection = {
   __typename?: 'MangoAudienceConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoAudienceInterface>>>;
  edges?: Maybe<Array<Maybe<MangoAudienceEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoAudienceConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Audience */
export type MangoAudienceEdge = {
   __typename?: 'MangoAudienceEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoAudienceInterface>;
};

export type MangoAudienceFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Target audience (de: Zielgruppe, en: audience) */
export type MangoAudienceInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Target audience (de: Zielgruppe, en: audience) */
export type MangoAudienceInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoAudienceSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** The audio file representing an audio clip. (de: Audiodatei, en: audio file) */
export type MangoAudioFile = MangoNode & MangoAudioFileInterface & MangoFileInterface & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoAudioFile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};


/** The audio file representing an audio clip. (de: Audiodatei, en: audio file) */
export type MangoAudioFileAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The audio file representing an audio clip. (de: Audiodatei, en: audio file) */
export type MangoAudioFileImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

export type MangoAudioFileAccessibleInListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessibleIn: Scalars['ID'];
  audioFile: Scalars['ID'];
};

/** This is a generated connection for AudioFile */
export type MangoAudioFileConnection = {
   __typename?: 'MangoAudioFileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoAudioFileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoAudioFileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoAudioFileConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of AudioFile */
export type MangoAudioFileCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to AudioFile */
  type?: Maybe<Scalars['String']>;
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<Scalars['ID']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize: Scalars['MangoBigInt'];
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation: Scalars['String'];
};

/** This is a generated edge for AudioFile */
export type MangoAudioFileEdge = {
   __typename?: 'MangoAudioFileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoAudioFileInterface>;
};

export type MangoAudioFileFilter = {
  /** Filter by values of property accessibleIn */
  accessibleIn?: Maybe<MangoGeoZoneConnectionFilter>;
  /** Filter by values of property audioProfile */
  audioProfile?: Maybe<MangoAudioProfileRelationFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property fileSize */
  fileSize?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property internalLocation */
  internalLocation?: Maybe<MangoStringFilter>;
  /** Filter by values of property mimetype */
  mimetype?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publicLocation */
  publicLocation?: Maybe<MangoStringFilter>;
};

/** The audio file representing an audio clip. (de: Audiodatei, en: audio file) */
export type MangoAudioFileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};


/** The audio file representing an audio clip. (de: Audiodatei, en: audio file) */
export type MangoAudioFileInterfaceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The audio file representing an audio clip. (de: Audiodatei, en: audio file) */
export type MangoAudioFileInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

/** The payload returned from mutations of AudioFile. */
export type MangoAudioFilePayload = {
   __typename?: 'MangoAudioFilePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedAudioFile?: Maybe<MangoAudioFile>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoAudioFileRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
};

export enum MangoAudioFileSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  FilesizeAsc = 'FILESIZE_ASC',
  FilesizeDesc = 'FILESIZE_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InternallocationAsc = 'INTERNALLOCATION_ASC',
  InternallocationDesc = 'INTERNALLOCATION_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  PubliclocationAsc = 'PUBLICLOCATION_ASC',
  PubliclocationDesc = 'PUBLICLOCATION_DESC'
}

/** Input parameter for the update mutation of AudioFile */
export type MangoAudioFileUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<Scalars['ID']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};

/** Describes an audio format. (de: Audioprofil, en: audio profile) */
export type MangoAudioProfile = MangoNode & MangoAudioProfileInterface & MangoProfileInterface & {
   __typename?: 'MangoAudioProfile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Bitrate in kbit/s. (de: Bitrate, en: bitrate) */
  bitrate?: Maybe<Scalars['Int']>;
  /**  (de: Encoding, en: encoding) */
  encoding?: Maybe<Scalars['String']>;
};

/** This is a generated connection for AudioProfile */
export type MangoAudioProfileConnection = {
   __typename?: 'MangoAudioProfileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoAudioProfileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoAudioProfileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for AudioProfile */
export type MangoAudioProfileEdge = {
   __typename?: 'MangoAudioProfileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoAudioProfileInterface>;
};

export type MangoAudioProfileFilter = {
  /** Filter by values of property bitrate */
  bitrate?: Maybe<MangoIntFilter>;
  /** Filter by values of property encoding */
  encoding?: Maybe<MangoStringFilter>;
};

/** Describes an audio format. (de: Audioprofil, en: audio profile) */
export type MangoAudioProfileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Bitrate in kbit/s. (de: Bitrate, en: bitrate) */
  bitrate?: Maybe<Scalars['Int']>;
  /**  (de: Encoding, en: encoding) */
  encoding?: Maybe<Scalars['String']>;
};

export type MangoAudioProfileRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoAudioProfileSortOrder {
  BitrateAsc = 'BITRATE_ASC',
  BitrateDesc = 'BITRATE_DESC',
  EncodingAsc = 'ENCODING_ASC',
  EncodingDesc = 'ENCODING_DESC'
}

/**
 * A category that specifies, how long (and why) a life:ShortlyAvailableThing will
 * be publicly available. There is a fixed set of availability categories defined
 * in the Rundfunkstaatsvertrag. (de: Verweildauer-Kategorie, en: Availability Category)
 */
export type MangoAvailabilityCategory = MangoNode & MangoAvailabilityCategoryInterface & {
   __typename?: 'MangoAvailabilityCategory';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes the intention of the availability category. (en: description) */
  description?: Maybe<Scalars['String']>;
  /** A descriptive label for availability category. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies the availability period - how long a content of this category will be available. (en: period (descriptive)) */
  periodDescription?: Maybe<Scalars['String']>;
};

/** This is a generated connection for AvailabilityCategory */
export type MangoAvailabilityCategoryConnection = {
   __typename?: 'MangoAvailabilityCategoryConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoAvailabilityCategoryInterface>>>;
  edges?: Maybe<Array<Maybe<MangoAvailabilityCategoryEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for AvailabilityCategory */
export type MangoAvailabilityCategoryEdge = {
   __typename?: 'MangoAvailabilityCategoryEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoAvailabilityCategoryInterface>;
};

export type MangoAvailabilityCategoryFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property periodDescription */
  periodDescription?: Maybe<MangoStringFilter>;
};

/**
 * A category that specifies, how long (and why) a life:ShortlyAvailableThing will
 * be publicly available. There is a fixed set of availability categories defined
 * in the Rundfunkstaatsvertrag. (de: Verweildauer-Kategorie, en: Availability Category)
 */
export type MangoAvailabilityCategoryInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes the intention of the availability category. (en: description) */
  description?: Maybe<Scalars['String']>;
  /** A descriptive label for availability category. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies the availability period - how long a content of this category will be available. (en: period (descriptive)) */
  periodDescription?: Maybe<Scalars['String']>;
};

export type MangoAvailabilityCategoryRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoAvailabilityCategorySortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  PerioddescriptionAsc = 'PERIODDESCRIPTION_ASC',
  PerioddescriptionDesc = 'PERIODDESCRIPTION_DESC'
}

/** The editor-created content to fill a banner element. (de: Bannerinhalt, en: Banner Content) */
export type MangoBannerContent = MangoNode & MangoBannerContentInterface & MangoElementContentInterface & MangoWritableThingInterface & {
   __typename?: 'MangoBannerContent';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**  () */
  backgroundImage?: Maybe<MangoImageInterface>;
  /**  () */
  caption?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  () */
  subcaption?: Maybe<Scalars['String']>;
};

/** This is a generated connection for BannerContent */
export type MangoBannerContentConnection = {
   __typename?: 'MangoBannerContentConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoBannerContentInterface>>>;
  edges?: Maybe<Array<Maybe<MangoBannerContentEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of BannerContent */
export type MangoBannerContentCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to BannerContent */
  type?: Maybe<Scalars['String']>;
  /**  () */
  backgroundImage: Scalars['ID'];
  /**  () */
  caption?: Maybe<Scalars['String']>;
  /**  () */
  subcaption?: Maybe<Scalars['String']>;
};

/** This is a generated edge for BannerContent */
export type MangoBannerContentEdge = {
   __typename?: 'MangoBannerContentEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoBannerContentInterface>;
};

export type MangoBannerContentFilter = {
  /** Filter by values of property backgroundImage */
  backgroundImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property caption */
  caption?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property subcaption */
  subcaption?: Maybe<MangoStringFilter>;
};

/** The editor-created content to fill a banner element. (de: Bannerinhalt, en: Banner Content) */
export type MangoBannerContentInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**  () */
  backgroundImage?: Maybe<MangoImageInterface>;
  /**  () */
  caption?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  () */
  subcaption?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of BannerContent. */
export type MangoBannerContentPayload = {
   __typename?: 'MangoBannerContentPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedBannerContent?: Maybe<MangoBannerContent>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoBannerContentSortOrder {
  CaptionAsc = 'CAPTION_ASC',
  CaptionDesc = 'CAPTION_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  SubcaptionAsc = 'SUBCAPTION_ASC',
  SubcaptionDesc = 'SUBCAPTION_DESC'
}

/** Input parameter for the update mutation of BannerContent */
export type MangoBannerContentUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /**  () */
  backgroundImage?: Maybe<Scalars['ID']>;
  /**  () */
  caption?: Maybe<Scalars['String']>;
  /**  () */
  subcaption?: Maybe<Scalars['String']>;
};

/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOf = MangoNode & MangoBestOfInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoClipInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoExtraInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoBestOf';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Best of von, en: best of of) */
  bestOfOf?: Maybe<MangoCreativeWorkConnection>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfBestOfOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

export type MangoBestOfAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfBestOfOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  bestOfOf: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  bestOf: Scalars['ID'];
};

/** This is a generated connection for BestOf */
export type MangoBestOfConnection = {
   __typename?: 'MangoBestOfConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoBestOfInterface>>>;
  edges?: Maybe<Array<Maybe<MangoBestOfEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of BestOf */
export type MangoBestOfCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to BestOf */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Best of von, en: best of of) */
  bestOfOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoBestOfCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  bestOf: Scalars['ID'];
};

/** This is a generated edge for BestOf */
export type MangoBestOfEdge = {
   __typename?: 'MangoBestOfEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoBestOfInterface>;
};

export type MangoBestOfEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfExtraOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  extraOf: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bestOfOf */
  bestOfOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property broadcasts */
  broadcasts?: Maybe<MangoBroadcastEventConnectionFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property extraOf */
  extraOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of BestOf */
  term?: Maybe<Scalars['String']>;
};

export type MangoBestOfFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  bestOf: Scalars['ID'];
};

/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Best of von, en: best of of) */
  bestOfOf?: Maybe<MangoCreativeWorkConnection>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceBestOfOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip with the best parts of another CreativeWork. (de: Best of, en: best of ) */
export type MangoBestOfInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

/** The payload returned from mutations of BestOf. */
export type MangoBestOfPayload = {
   __typename?: 'MangoBestOfPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedBestOf?: Maybe<MangoBestOf>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoBestOfProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  bestOf: Scalars['ID'];
};

export type MangoBestOfSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export enum MangoBestOfSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  BroadcastsCreatedatAsc = 'BROADCASTS_CREATEDAT_ASC',
  BroadcastsCreatedatDesc = 'BROADCASTS_CREATEDAT_DESC',
  BroadcastsEndAsc = 'BROADCASTS_END_ASC',
  BroadcastsEndDesc = 'BROADCASTS_END_DESC',
  BroadcastsImportedfromCreatedatAsc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_ASC',
  BroadcastsImportedfromCreatedatDesc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_DESC',
  BroadcastsImportedfromIdentifierAsc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_ASC',
  BroadcastsImportedfromIdentifierDesc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_DESC',
  BroadcastsImportedfromModifiedatAsc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_ASC',
  BroadcastsImportedfromModifiedatDesc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_DESC',
  BroadcastsIsrerunAsc = 'BROADCASTS_ISRERUN_ASC',
  BroadcastsIsrerunDesc = 'BROADCASTS_ISRERUN_DESC',
  BroadcastsModifiedatAsc = 'BROADCASTS_MODIFIEDAT_ASC',
  BroadcastsModifiedatDesc = 'BROADCASTS_MODIFIEDAT_DESC',
  BroadcastsStartAsc = 'BROADCASTS_START_ASC',
  BroadcastsStartDesc = 'BROADCASTS_START_DESC',
  BroadcastsTrackinginfosCreatedatAsc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_ASC',
  BroadcastsTrackinginfosCreatedatDesc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_DESC',
  BroadcastsTrackinginfosModifiedatAsc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_ASC',
  BroadcastsTrackinginfosModifiedatDesc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningCreatedatAsc = 'INITIALSCREENING_CREATEDAT_ASC',
  InitialscreeningCreatedatDesc = 'INITIALSCREENING_CREATEDAT_DESC',
  InitialscreeningEndAsc = 'INITIALSCREENING_END_ASC',
  InitialscreeningEndDesc = 'INITIALSCREENING_END_DESC',
  InitialscreeningImportedfromCreatedatAsc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_ASC',
  InitialscreeningImportedfromCreatedatDesc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_DESC',
  InitialscreeningImportedfromIdentifierAsc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_ASC',
  InitialscreeningImportedfromIdentifierDesc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_DESC',
  InitialscreeningImportedfromModifiedatAsc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_ASC',
  InitialscreeningImportedfromModifiedatDesc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningIsrerunAsc = 'INITIALSCREENING_ISRERUN_ASC',
  InitialscreeningIsrerunDesc = 'INITIALSCREENING_ISRERUN_DESC',
  InitialscreeningModifiedatAsc = 'INITIALSCREENING_MODIFIEDAT_ASC',
  InitialscreeningModifiedatDesc = 'INITIALSCREENING_MODIFIEDAT_DESC',
  InitialscreeningStartAsc = 'INITIALSCREENING_START_ASC',
  InitialscreeningStartDesc = 'INITIALSCREENING_START_DESC',
  InitialscreeningTrackinginfosCreatedatAsc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_ASC',
  InitialscreeningTrackinginfosCreatedatDesc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_DESC',
  InitialscreeningTrackinginfosModifiedatAsc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_ASC',
  InitialscreeningTrackinginfosModifiedatDesc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoBestOfTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  bestOf: Scalars['ID'];
};

export type MangoBestOfTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  bestOf: Scalars['ID'];
};

/** Input parameter for the update mutation of BestOf */
export type MangoBestOfUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Best of von, en: best of of) */
  bestOfOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoBestOfVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  bestOf: Scalars['ID'];
};


export type MangoBigIntFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['MangoBigInt']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['MangoBigInt']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['MangoBigInt']>>>;
  /** A filter that matches if the value of the property is greater than the specified value */
  gt?: Maybe<Scalars['MangoBigInt']>;
  /** A filter that matches if the value of the property is greater than or equal to the specified value */
  gte?: Maybe<Scalars['MangoBigInt']>;
  /** A filter that matches if the value of the property is less than the specified value */
  lt?: Maybe<Scalars['MangoBigInt']>;
  /** A filter that matches if the value of the property is less than or equal to the specified value */
  lte?: Maybe<Scalars['MangoBigInt']>;
};

/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoard = MangoNode & MangoBoardInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoImportableThingInterface & MangoPublishableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoTrackableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoBoard';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** Links a board to all sections it consists of. (de: Abschnitt, en: section) */
  sections?: Maybe<MangoSectionConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** The relative URI the board is reachable at. () */
  uri?: Maybe<Scalars['String']>;
  /** A list of all realtive URIs the board was ever reachable as. () */
  uriHistory?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardSectionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSectionFilter>;
  orderBy?: Maybe<MangoSectionSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoBoardAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  board: Scalars['ID'];
};

/** This is a generated connection for Board */
export type MangoBoardConnection = {
   __typename?: 'MangoBoardConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoBoardInterface>>>;
  edges?: Maybe<Array<Maybe<MangoBoardEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Board */
export type MangoBoardCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Board */
  type?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Links a board to all sections it consists of. (de: Abschnitt, en: section) */
  sections?: Maybe<Array<Maybe<MangoSectionCreateInput>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The relative URI the board is reachable at. () */
  uri: Scalars['String'];
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoBoardCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  board: Scalars['ID'];
};

/** This is a generated edge for Board */
export type MangoBoardEdge = {
   __typename?: 'MangoBoardEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoBoardInterface>;
};

export type MangoBoardEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property sections */
  sections?: Maybe<MangoSectionConnectionFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property uri */
  uri?: Maybe<MangoStringFilter>;
  /** Filter by values of property uriHistory */
  uriHistory?: Maybe<MangoStringFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of Board */
  term?: Maybe<Scalars['String']>;
};

export type MangoBoardFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  board: Scalars['ID'];
};

/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** Links a board to all sections it consists of. (de: Abschnitt, en: section) */
  sections?: Maybe<MangoSectionConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** The relative URI the board is reachable at. () */
  uri?: Maybe<Scalars['String']>;
  /** A list of all realtive URIs the board was ever reachable as. () */
  uriHistory?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceSectionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSectionFilter>;
  orderBy?: Maybe<MangoSectionSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A board with a unique URI in MANGO, consisting of sections. (de: Seite, en: Board) */
export type MangoBoardInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** The payload returned from mutations of Board. */
export type MangoBoardPayload = {
   __typename?: 'MangoBoardPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedBoard?: Maybe<MangoBoard>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoBoardProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoBoardRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  board: Scalars['ID'];
};

export enum MangoBoardSortOrder {
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  SectionsContentsCreatedatAsc = 'SECTIONS_CONTENTS_CREATEDAT_ASC',
  SectionsContentsCreatedatDesc = 'SECTIONS_CONTENTS_CREATEDAT_DESC',
  SectionsContentsCustomkickerAsc = 'SECTIONS_CONTENTS_CUSTOMKICKER_ASC',
  SectionsContentsCustomkickerDesc = 'SECTIONS_CONTENTS_CUSTOMKICKER_DESC',
  SectionsContentsCustomshortdescriptionAsc = 'SECTIONS_CONTENTS_CUSTOMSHORTDESCRIPTION_ASC',
  SectionsContentsCustomshortdescriptionDesc = 'SECTIONS_CONTENTS_CUSTOMSHORTDESCRIPTION_DESC',
  SectionsContentsCustomtitleAsc = 'SECTIONS_CONTENTS_CUSTOMTITLE_ASC',
  SectionsContentsCustomtitleDesc = 'SECTIONS_CONTENTS_CUSTOMTITLE_DESC',
  SectionsContentsModifiedatAsc = 'SECTIONS_CONTENTS_MODIFIEDAT_ASC',
  SectionsContentsModifiedatDesc = 'SECTIONS_CONTENTS_MODIFIEDAT_DESC',
  SectionsCreatedatAsc = 'SECTIONS_CREATEDAT_ASC',
  SectionsCreatedatDesc = 'SECTIONS_CREATEDAT_DESC',
  SectionsModifiedatAsc = 'SECTIONS_MODIFIEDAT_ASC',
  SectionsModifiedatDesc = 'SECTIONS_MODIFIEDAT_DESC',
  SectionsQueryAsc = 'SECTIONS_QUERY_ASC',
  SectionsQueryDesc = 'SECTIONS_QUERY_DESC',
  SectionsTitleAsc = 'SECTIONS_TITLE_ASC',
  SectionsTitleDesc = 'SECTIONS_TITLE_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  UriAsc = 'URI_ASC',
  UriDesc = 'URI_DESC',
  UrihistoryAsc = 'URIHISTORY_ASC',
  UrihistoryDesc = 'URIHISTORY_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoBoardTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  board: Scalars['ID'];
};

export type MangoBoardTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  board: Scalars['ID'];
};

/** Input parameter for the update mutation of Board */
export type MangoBoardUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Links a board to all sections it consists of. (de: Abschnitt, en: section) */
  sections?: Maybe<Array<Maybe<MangoSectionCreateInput>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The relative URI the board is reachable at. () */
  uri?: Maybe<Scalars['String']>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoBooleanFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['Boolean']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['Boolean']>;
};

/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEvent = MangoNode & MangoBroadcastEventInterface & MangoImportableThingInterface & MangoPublicationEventInterface & MangoTrackableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoBroadcastEvent';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Links a broadcast event with a livestream. (de: ausgestrahlt auf, en: broadcasted on) */
  broadcastedOn?: Maybe<MangoLivestreamConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Ende, en: end) */
  end?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist eine Wiederholung, en: is a rerun) */
  isRerun?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Veröffentlichung von, en: publication of) */
  publicationOf?: Maybe<MangoCreativeWorkInterface>;
  /** Associates a publication event with the service of publication. () */
  publishedBy?: Maybe<MangoPublicationServiceInterface>;
  /**  (de: Beginn, en: start) */
  start?: Maybe<Scalars['MangoDateTime']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  items?: Maybe<Array<Maybe<AudioElement>>>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventBroadcastedOnArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamFilter>;
  orderBy?: Maybe<MangoLivestreamSortOrder>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventItemsArgs = {
  types?: Maybe<Array<Maybe<AudioElementClass>>>;
};

export type MangoBroadcastEventBroadcastedOnListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  broadcastedOn: Scalars['ID'];
  broadcastEvent: Scalars['ID'];
};

/** This is a generated connection for BroadcastEvent */
export type MangoBroadcastEventConnection = {
   __typename?: 'MangoBroadcastEventConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoBroadcastEventInterface>>>;
  edges?: Maybe<Array<Maybe<MangoBroadcastEventEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoBroadcastEventConnectionFilter = {
  /** Filter by values of property broadcastedOn */
  broadcastedOn?: Maybe<MangoLivestreamConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property end */
  end?: Maybe<MangoDateFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property isRerun */
  isRerun?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publishedBy */
  publishedBy?: Maybe<MangoPublicationServiceRelationFilter>;
  /** Filter by values of property start */
  start?: Maybe<MangoDateFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** Input parameter for the create mutation of BroadcastEvent */
export type MangoBroadcastEventCreateInput = {
  /** The type of the created object. Defaults to BroadcastEvent */
  type?: Maybe<Scalars['String']>;
  /** Links a broadcast event with a livestream. (de: ausgestrahlt auf, en: broadcasted on) */
  broadcastedOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Ende, en: end) */
  end: Scalars['MangoDateTime'];
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**  (de: ist eine Wiederholung, en: is a rerun) */
  isRerun?: Maybe<Scalars['Boolean']>;
  /** Associates a publication event with the service of publication. () */
  publishedBy: Scalars['ID'];
  /**  (de: Beginn, en: start) */
  start: Scalars['MangoDateTime'];
};

/** This is a generated edge for BroadcastEvent */
export type MangoBroadcastEventEdge = {
   __typename?: 'MangoBroadcastEventEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoBroadcastEventInterface>;
};

export type MangoBroadcastEventFilter = {
  /** Filter by values of property broadcastedOn */
  broadcastedOn?: Maybe<MangoLivestreamConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property end */
  end?: Maybe<MangoDateFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property isRerun */
  isRerun?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publishedBy */
  publishedBy?: Maybe<MangoPublicationServiceRelationFilter>;
  /** Filter by values of property start */
  start?: Maybe<MangoDateFilter>;
};

/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Links a broadcast event with a livestream. (de: ausgestrahlt auf, en: broadcasted on) */
  broadcastedOn?: Maybe<MangoLivestreamConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Ende, en: end) */
  end?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist eine Wiederholung, en: is a rerun) */
  isRerun?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Veröffentlichung von, en: publication of) */
  publicationOf?: Maybe<MangoCreativeWorkInterface>;
  /** Associates a publication event with the service of publication. () */
  publishedBy?: Maybe<MangoPublicationServiceInterface>;
  /**  (de: Beginn, en: start) */
  start?: Maybe<Scalars['MangoDateTime']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  items?: Maybe<Array<Maybe<AudioElement>>>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventInterfaceBroadcastedOnArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamFilter>;
  orderBy?: Maybe<MangoLivestreamSortOrder>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** Describes one event of a programme being broadcasted. (de: Ausstrahlung, en: broadcast event) */
export type MangoBroadcastEventInterfaceItemsArgs = {
  types?: Maybe<Array<Maybe<AudioElementClass>>>;
};

/** The payload returned from mutations of BroadcastEvent. */
export type MangoBroadcastEventPayload = {
   __typename?: 'MangoBroadcastEventPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedBroadcastEvent?: Maybe<MangoBroadcastEvent>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoBroadcastEventRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  broadcastEvent: Scalars['ID'];
};

export enum MangoBroadcastEventSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  EndAsc = 'END_ASC',
  EndDesc = 'END_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  IsrerunAsc = 'ISRERUN_ASC',
  IsrerunDesc = 'ISRERUN_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  StartAsc = 'START_ASC',
  StartDesc = 'START_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of BroadcastEvent */
export type MangoBroadcastEventUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Links a broadcast event with a livestream. (de: ausgestrahlt auf, en: broadcasted on) */
  broadcastedOn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Ende, en: end) */
  end?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**  (de: ist eine Wiederholung, en: is a rerun) */
  isRerun?: Maybe<Scalars['Boolean']>;
  /** Associates a publication event with the service of publication. () */
  publishedBy?: Maybe<Scalars['ID']>;
  /**  (de: Beginn, en: start) */
  start?: Maybe<Scalars['MangoDateTime']>;
};

/** Describing a region which gets its own regional variation of programmes.  (de: Verbreitungsgebiet, en: Broadcast Region) */
export type MangoBroadcastRegion = MangoNode & MangoBroadcastRegionInterface & {
   __typename?: 'MangoBroadcastRegion';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (de: Bezeichnung, en: label) */
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** This is a generated connection for BroadcastRegion */
export type MangoBroadcastRegionConnection = {
   __typename?: 'MangoBroadcastRegionConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoBroadcastRegionInterface>>>;
  edges?: Maybe<Array<Maybe<MangoBroadcastRegionEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoBroadcastRegionConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for BroadcastRegion */
export type MangoBroadcastRegionEdge = {
   __typename?: 'MangoBroadcastRegionEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoBroadcastRegionInterface>;
};

export type MangoBroadcastRegionFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property labels */
  labels?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Describing a region which gets its own regional variation of programmes.  (de: Verbreitungsgebiet, en: Broadcast Region) */
export type MangoBroadcastRegionInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (de: Bezeichnung, en: label) */
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

export enum MangoBroadcastRegionSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelsAsc = 'LABELS_ASC',
  LabelsDesc = 'LABELS_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastService = MangoNode & MangoBroadcastServiceInterface & MangoAgentInterface & MangoOrganizationInterface & MangoPublicationServiceInterface & MangoWritableThingInterface & AudioBroadcastService & {
   __typename?: 'MangoBroadcastService';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /** The livestream on which the programme of the broadcast service is published. (de: sendet auf, en: broadcasts on) */
  broadcastsOns?: Maybe<MangoLivestreamConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * A fallback image that can be used to advertise creative works (published by
   * the PublicationService) which do not have any teaser image. (de: Fallback
   * Teaser Bild, en: fallback teaser image)
   */
  fallbackTeaserImage?: Maybe<MangoImageInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a publication service with the organization owning or operating it. (de: betrieben von, en: operated by) */
  operatedBy?: Maybe<MangoOrganizationInterface>;
  /** All programmes broadcasted by this broadcast service (calculated property) (de: Sendungen, en: Programmes) */
  programmes?: Maybe<MangoProgrammeConnection>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** ElectronicProgrammeGuide */
  epg?: Maybe<Array<Maybe<MangoEpgEntry>>>;
  branding?: Maybe<SophoraDocument>;
  brandingColor?: Maybe<Scalars['String']>;
  colors?: Maybe<Scalars['JSON']>;
  logoUrl?: Maybe<Scalars['String']>;
  audioLivestreams?: Maybe<MangoLivestreamConnection>;
  sophoraLivestreamDocuments?: Maybe<Array<Maybe<SophoraDocumentSummary>>>;
  sophoraChannelDocument?: Maybe<SophoraDocument>;
  items?: Maybe<Array<Maybe<AudioElement>>>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceBroadcastsOnsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamFilter>;
  orderBy?: Maybe<MangoLivestreamSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceProgrammesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceEpgArgs = {
  dayOffset?: Maybe<Scalars['Int']>;
  day?: Maybe<Scalars['MangoDay']>;
  slots?: Maybe<Array<Maybe<MangoEpgSlotKey>>>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceColorsArgs = {
  product: SepProduct;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceLogoUrlArgs = {
  type?: Maybe<AspectRatio>;
  format?: Maybe<ImageFormat>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceItemsArgs = {
  types?: Maybe<Array<Maybe<AudioElementClass>>>;
  day?: Maybe<Scalars['MangoDay']>;
  hour?: Maybe<Scalars['Int']>;
  start?: Maybe<MangoDateFilter>;
  end?: Maybe<MangoDateFilter>;
};

/** This is a generated connection for BroadcastService */
export type MangoBroadcastServiceConnection = {
   __typename?: 'MangoBroadcastServiceConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoBroadcastServiceInterface>>>;
  edges?: Maybe<Array<Maybe<MangoBroadcastServiceEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of BroadcastService */
export type MangoBroadcastServiceCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to BroadcastService */
  type?: Maybe<Scalars['String']>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A fallback image that can be used to advertise creative works (published by
   * the PublicationService) which do not have any teaser image. (de: Fallback
   * Teaser Bild, en: fallback teaser image)
   */
  fallbackTeaserImage?: Maybe<Scalars['ID']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name: Scalars['String'];
  /** Associates a publication service with the organization owning or operating it. (de: betrieben von, en: operated by) */
  operatedBy: Scalars['ID'];
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** This is a generated edge for BroadcastService */
export type MangoBroadcastServiceEdge = {
   __typename?: 'MangoBroadcastServiceEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoBroadcastServiceInterface>;
};

export type MangoBroadcastServiceExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  broadcastService: Scalars['ID'];
};

export type MangoBroadcastServiceFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  broadcastService: Scalars['ID'];
};

export type MangoBroadcastServiceFilter = {
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property fallbackTeaserImage */
  fallbackTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property name */
  name?: Maybe<MangoStringFilter>;
  /** Filter by values of property operatedBy */
  operatedBy?: Maybe<MangoOrganizationRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
};

/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /** The livestream on which the programme of the broadcast service is published. (de: sendet auf, en: broadcasts on) */
  broadcastsOns?: Maybe<MangoLivestreamConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * A fallback image that can be used to advertise creative works (published by
   * the PublicationService) which do not have any teaser image. (de: Fallback
   * Teaser Bild, en: fallback teaser image)
   */
  fallbackTeaserImage?: Maybe<MangoImageInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a publication service with the organization owning or operating it. (de: betrieben von, en: operated by) */
  operatedBy?: Maybe<MangoOrganizationInterface>;
  /** All programmes broadcasted by this broadcast service (calculated property) (de: Sendungen, en: Programmes) */
  programmes?: Maybe<MangoProgrammeConnection>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** ElectronicProgrammeGuide */
  epg?: Maybe<Array<Maybe<MangoEpgEntry>>>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterfaceBroadcastsOnsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamFilter>;
  orderBy?: Maybe<MangoLivestreamSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterfaceProgrammesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** One particular broadcast service, usually with a fixed frequency or digital channel. (de: Sender, en: broadcast service) */
export type MangoBroadcastServiceInterfaceEpgArgs = {
  dayOffset?: Maybe<Scalars['Int']>;
  day?: Maybe<Scalars['MangoDay']>;
  slots?: Maybe<Array<Maybe<MangoEpgSlotKey>>>;
};

/** The payload returned from mutations of BroadcastService. */
export type MangoBroadcastServicePayload = {
   __typename?: 'MangoBroadcastServicePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedBroadcastService?: Maybe<MangoBroadcastService>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoBroadcastServiceRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoBroadcastServiceRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  broadcastService: Scalars['ID'];
};

export enum MangoBroadcastServiceSortOrder {
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

export type MangoBroadcastServiceTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  broadcastService: Scalars['ID'];
};

/** Input parameter for the update mutation of BroadcastService */
export type MangoBroadcastServiceUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A fallback image that can be used to advertise creative works (published by
   * the PublicationService) which do not have any teaser image. (de: Fallback
   * Teaser Bild, en: fallback teaser image)
   */
  fallbackTeaserImage?: Maybe<Scalars['ID']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a publication service with the organization owning or operating it. (de: betrieben von, en: operated by) */
  operatedBy?: Maybe<Scalars['ID']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/**  (de: Untertitel für Hörgeschädigte, en: Caption) */
export type MangoCaption = MangoNode & MangoCaptionInterface & MangoSubtitleInterface & MangoWritableThingInterface & {
   __typename?: 'MangoCaption';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<MangoTimedTextFileConnection>;
};


/**  (de: Untertitel für Hörgeschädigte, en: Caption) */
export type MangoCaptionTimedTextFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};

/** This is a generated connection for Caption */
export type MangoCaptionConnection = {
   __typename?: 'MangoCaptionConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoCaptionInterface>>>;
  edges?: Maybe<Array<Maybe<MangoCaptionEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoCaptionConnectionFilter = {
  /** Filter by values of property closed */
  closed?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property embedded */
  embedded?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property language */
  language?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property timedTextFiles */
  timedTextFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** Input parameter for the create mutation of Caption */
export type MangoCaptionCreateInput = {
  /** The type of the created object. Defaults to Caption */
  type?: Maybe<Scalars['String']>;
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** This is a generated edge for Caption */
export type MangoCaptionEdge = {
   __typename?: 'MangoCaptionEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoCaptionInterface>;
};

export type MangoCaptionFilter = {
  /** Filter by values of property closed */
  closed?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property embedded */
  embedded?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property language */
  language?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property timedTextFiles */
  timedTextFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
};

/**  (de: Untertitel für Hörgeschädigte, en: Caption) */
export type MangoCaptionInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<MangoTimedTextFileConnection>;
};


/**  (de: Untertitel für Hörgeschädigte, en: Caption) */
export type MangoCaptionInterfaceTimedTextFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};

/** The payload returned from mutations of Caption. */
export type MangoCaptionPayload = {
   __typename?: 'MangoCaptionPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedCaption?: Maybe<MangoCaption>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoCaptionRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  caption: Scalars['ID'];
};

export enum MangoCaptionSortOrder {
  ClosedAsc = 'CLOSED_ASC',
  ClosedDesc = 'CLOSED_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  EmbeddedAsc = 'EMBEDDED_ASC',
  EmbeddedDesc = 'EMBEDDED_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

export type MangoCaptionTimedTextFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  timedTextFile: Scalars['ID'];
  caption: Scalars['ID'];
};

/** Input parameter for the update mutation of Caption */
export type MangoCaptionUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/**
 * Any kind of content categorization. A categorization provides a way of
 * classifying a set of creative works. Such classifications can be performed
 * according to multiple dimensions and taxonomies, e.g. genre, subjects... (de:
 * Kategorisierung, en: categorization)
 */
export type MangoCategorization = MangoNode & MangoCategorizationInterface & {
   __typename?: 'MangoCategorization';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/**
 * Any kind of content categorization. A categorization provides a way of
 * classifying a set of creative works. Such classifications can be performed
 * according to multiple dimensions and taxonomies, e.g. genre, subjects... (de:
 * Kategorisierung, en: categorization)
 */
export type MangoCategorizationWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Categorization */
export type MangoCategorizationConnection = {
   __typename?: 'MangoCategorizationConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoCategorizationInterface>>>;
  edges?: Maybe<Array<Maybe<MangoCategorizationEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoCategorizationConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Categorization */
export type MangoCategorizationEdge = {
   __typename?: 'MangoCategorizationEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoCategorizationInterface>;
};

export type MangoCategorizationFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/**
 * Any kind of content categorization. A categorization provides a way of
 * classifying a set of creative works. Such classifications can be performed
 * according to multiple dimensions and taxonomies, e.g. genre, subjects... (de:
 * Kategorisierung, en: categorization)
 */
export type MangoCategorizationInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/**
 * Any kind of content categorization. A categorization provides a way of
 * classifying a set of creative works. Such classifications can be performed
 * according to multiple dimensions and taxonomies, e.g. genre, subjects... (de:
 * Kategorisierung, en: categorization)
 */
export type MangoCategorizationInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoCategorizationSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Any kind of content category. Usually from a controlled vocabulary. (de: Kategorie, en: category ) */
export type MangoCategory = MangoNode & MangoCategoryInterface & MangoCategorizationInterface & {
   __typename?: 'MangoCategory';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of content category. Usually from a controlled vocabulary. (de: Kategorie, en: category ) */
export type MangoCategoryWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Category */
export type MangoCategoryConnection = {
   __typename?: 'MangoCategoryConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoCategoryInterface>>>;
  edges?: Maybe<Array<Maybe<MangoCategoryEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoCategoryConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Category */
export type MangoCategoryEdge = {
   __typename?: 'MangoCategoryEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoCategoryInterface>;
};

export type MangoCategoryFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Any kind of content category. Usually from a controlled vocabulary. (de: Kategorie, en: category ) */
export type MangoCategoryInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of content category. Usually from a controlled vocabulary. (de: Kategorie, en: category ) */
export type MangoCategoryInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoCategorySortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClip = MangoNode & MangoClipInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoClip';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

export type MangoClipAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  clip: Scalars['ID'];
};

/** This is a generated connection for Clip */
export type MangoClipConnection = {
   __typename?: 'MangoClipConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoClipInterface>>>;
  edges?: Maybe<Array<Maybe<MangoClipEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Clip */
export type MangoClipCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Clip */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoClipCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  clip: Scalars['ID'];
};

/** This is a generated edge for Clip */
export type MangoClipEdge = {
   __typename?: 'MangoClipEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoClipInterface>;
};

export type MangoClipEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of Clip */
  term?: Maybe<Scalars['String']>;
};

export type MangoClipFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  clip: Scalars['ID'];
};

/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** One individually playable clip. (de: Clip, en: clip) */
export type MangoClipInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

/** The payload returned from mutations of Clip. */
export type MangoClipPayload = {
   __typename?: 'MangoClipPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedClip?: Maybe<MangoClip>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoClipProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipReactions = {
   __typename?: 'MangoClipReactions';
  likes?: Maybe<Scalars['Int']>;
  dislikes?: Maybe<Scalars['Int']>;
  plays?: Maybe<Scalars['Int']>;
};

/** Selects the algorithm to use for clip recommendations */
export enum MangoClipRecommendationAlgorithm {
  DetailPage_0 = 'DETAIL_PAGE_0',
  DetailPage_1 = 'DETAIL_PAGE_1',
  Player_0 = 'PLAYER_0'
}

export type MangoClipRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  clip: Scalars['ID'];
};

/** This is a generated connection for Clip */
export type MangoClipRemoteConnection = {
   __typename?: 'MangoClipRemoteConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoClipInterface>>>;
  edges?: Maybe<Array<Maybe<MangoClipRemoteEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoClipRemoteConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Clip */
export type MangoClipRemoteEdge = {
   __typename?: 'MangoClipRemoteEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoClipInterface>;
};

export type MangoClipRemoteRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoRemoteIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoClipRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  clip: Scalars['ID'];
};

export type MangoClipSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  clip: Scalars['ID'];
};

export enum MangoClipSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoClipTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  clip: Scalars['ID'];
};

export type MangoClipTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  clip: Scalars['ID'];
};

/** Input parameter for the update mutation of Clip */
export type MangoClipUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoClipVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  clip: Scalars['ID'];
};

/** A type for text collation rules. (de: Textvergleichsregeln, en: Collation rules) */
export type MangoCollation = MangoNode & MangoCollationInterface & {
   __typename?: 'MangoCollation';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  () */
  ignorePunctuations?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  /** The ICU locale to use for collation. (de: Gebietsschema, en: Locale) */
  locale?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** A type for text collation rules. (de: Textvergleichsregeln, en: Collation rules) */
export type MangoCollationInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  () */
  ignorePunctuations?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  /** The ICU locale to use for collation. (de: Gebietsschema, en: Locale) */
  locale?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Describes interactions of a user with a single content element (de: Inhalte Interaktion, en: Content Interaction) */
export type MangoContentInteraction = MangoNode & MangoContentInteractionInterface & MangoDeletableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoContentInteraction';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Describes if the user consumed the entire content element () */
  completed?: Maybe<Scalars['Boolean']>;
  /** Content interacted with. (de: Inhalt, en: Content) */
  content?: Maybe<MangoClipInterface>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The progress of the user in the content in percent (de: Fortschritt, en: Progress) */
  progress?: Maybe<Scalars['Float']>;
  /** Reaction of a user on a content. (de: Reaktion, en: Reaction) */
  reaction?: Maybe<MangoReactionTypeInterface>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user?: Maybe<MangoEndUserInterface>;
};

/** This is a generated connection for ContentInteraction */
export type MangoContentInteractionConnection = {
   __typename?: 'MangoContentInteractionConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoContentInteractionInterface>>>;
  edges?: Maybe<Array<Maybe<MangoContentInteractionEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of ContentInteraction */
export type MangoContentInteractionCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to ContentInteraction */
  type?: Maybe<Scalars['String']>;
  /** Content interacted with. (de: Inhalt, en: Content) */
  content: Scalars['ID'];
  /** The progress of the user in the content in percent (de: Fortschritt, en: Progress) */
  progress?: Maybe<Scalars['Float']>;
  /** Reaction of a user on a content. (de: Reaktion, en: Reaction) */
  reaction?: Maybe<Scalars['ID']>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user: Scalars['ID'];
};

/** This is a generated edge for ContentInteraction */
export type MangoContentInteractionEdge = {
   __typename?: 'MangoContentInteractionEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoContentInteractionInterface>;
};

export type MangoContentInteractionFilter = {
  /** Filter by values of property content */
  content?: Maybe<MangoClipRemoteRelationFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property progress */
  progress?: Maybe<MangoFloatFilter>;
  /** Filter by values of property reaction */
  reaction?: Maybe<MangoReactionTypeRelationFilter>;
  /** Filter by values of property user */
  user?: Maybe<MangoEndUserRelationFilter>;
};

/** Describes interactions of a user with a single content element (de: Inhalte Interaktion, en: Content Interaction) */
export type MangoContentInteractionInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Describes if the user consumed the entire content element () */
  completed?: Maybe<Scalars['Boolean']>;
  /** Content interacted with. (de: Inhalt, en: Content) */
  content?: Maybe<MangoClipInterface>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The progress of the user in the content in percent (de: Fortschritt, en: Progress) */
  progress?: Maybe<Scalars['Float']>;
  /** Reaction of a user on a content. (de: Reaktion, en: Reaction) */
  reaction?: Maybe<MangoReactionTypeInterface>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user?: Maybe<MangoEndUserInterface>;
};

/** The payload returned from mutations of ContentInteraction. */
export type MangoContentInteractionPayload = {
   __typename?: 'MangoContentInteractionPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedContentInteraction?: Maybe<MangoContentInteraction>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoContentInteractionSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  ProgressAsc = 'PROGRESS_ASC',
  ProgressDesc = 'PROGRESS_DESC'
}

/** Input parameter for the update mutation of ContentInteraction */
export type MangoContentInteractionUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Content interacted with. (de: Inhalt, en: Content) */
  content?: Maybe<Scalars['ID']>;
  /** The progress of the user in the content in percent (de: Fortschritt, en: Progress) */
  progress?: Maybe<Scalars['Float']>;
  /** Reaction of a user on a content. (de: Reaktion, en: Reaction) */
  reaction?: Maybe<Scalars['ID']>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user?: Maybe<Scalars['ID']>;
};

/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWork = MangoNode & MangoCreativeWorkInterface & MangoCategorizationInterface & MangoSubjectInterface & {
   __typename?: 'MangoCreativeWork';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for CreativeWork */
export type MangoCreativeWorkConnection = {
   __typename?: 'MangoCreativeWorkConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoCreativeWorkInterface>>>;
  edges?: Maybe<Array<Maybe<MangoCreativeWorkEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoCreativeWorkConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for CreativeWork */
export type MangoCreativeWorkEdge = {
   __typename?: 'MangoCreativeWorkEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoCreativeWorkInterface>;
};

export type MangoCreativeWorkFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property slug */
  slug?: Maybe<MangoStringFilter>;
  /** Filter by values of property snippet */
  snippet?: Maybe<MangoStringFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of CreativeWork */
  term?: Maybe<Scalars['String']>;
};

/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** Any kind of invented, produced or curated output. (de: Schöpferisches Werk, en: creative work) */
export type MangoCreativeWorkInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoCreativeWorkRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoCreativeWorkRemoteRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoRemoteIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoCreativeWorkSortOrder {
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  SnippetAsc = 'SNIPPET_ASC',
  SnippetDesc = 'SNIPPET_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

/**
 * Filter by DateTime in ISO 8601 format. Also supports the `now` keyword which
 * represents the current server time. Now also supports an optional ISO‐8601
 * format period which is added to the current time. Example:
 * `now(P3Y6M4DT12H30M5S)` or `now(-P3Y6M4DT12H30M5S)`
 */
export type MangoDateFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['MangoDateTime']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['MangoDateTime']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['MangoDateTime']>>>;
  /** A filter that matches if the value of the property is greater than the specified value */
  gt?: Maybe<Scalars['MangoDateTime']>;
  /** A filter that matches if the value of the property is greater than or equal to the specified value */
  gte?: Maybe<Scalars['MangoDateTime']>;
  /** A filter that matches if the value of the property is less than the specified value */
  lt?: Maybe<Scalars['MangoDateTime']>;
  /** A filter that matches if the value of the property is less than or equal to the specified value */
  lte?: Maybe<Scalars['MangoDateTime']>;
};



/**  (not documented) */
export type MangoDeletableThing = MangoNode & MangoDeletableThingInterface & {
   __typename?: 'MangoDeletableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/**  (not documented) */
export type MangoDeletableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Input parameter for delete mutations */
export type MangoDeleteInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the object to be deleted. */
  id: Scalars['ID'];
};

export type MangoDeleteMyContentInteractionInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type MangoDeleteMyContentInteractionsPayload = {
   __typename?: 'MangoDeleteMyContentInteractionsPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoDeleteMyPersonalDataInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type MangoDeleteMyPersonalDataPayload = {
   __typename?: 'MangoDeleteMyPersonalDataPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoDeleteMySubscriptionsInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type MangoDeleteMySubscriptionsPayload = {
   __typename?: 'MangoDeleteMySubscriptionsPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** The payload returned from delete mutations. */
export type MangoDeletePayload = {
   __typename?: 'MangoDeletePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartment = MangoNode & MangoDepartmentInterface & MangoAgentInterface & MangoOrganizationInterface & MangoOrganizationalUnitInterface & {
   __typename?: 'MangoDepartment';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** Associates an organizational unit with the organization it is part of. (de: Einheit von, en: unit of) */
  unitOf?: Maybe<MangoOrganizationConnection>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentUnitOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoOrganizationFilter>;
  orderBy?: Maybe<MangoOrganizationSortOrder>;
};

/** This is a generated connection for Department */
export type MangoDepartmentConnection = {
   __typename?: 'MangoDepartmentConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoDepartmentInterface>>>;
  edges?: Maybe<Array<Maybe<MangoDepartmentEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoDepartmentConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Department */
export type MangoDepartmentEdge = {
   __typename?: 'MangoDepartmentEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoDepartmentInterface>;
};

export type MangoDepartmentFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property name */
  name?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property unitOf */
  unitOf?: Maybe<MangoOrganizationConnectionFilter>;
};

/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** Associates an organizational unit with the organization it is part of. (de: Einheit von, en: unit of) */
  unitOf?: Maybe<MangoOrganizationConnection>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An organizational unit, which bundles different editorial departments. (de: Ressort, en: department) */
export type MangoDepartmentInterfaceUnitOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoOrganizationFilter>;
  orderBy?: Maybe<MangoOrganizationSortOrder>;
};

export enum MangoDepartmentSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** One particular item of content to fill one layout element. (de: Inhalt, en: Content Item) */
export type MangoElementContent = MangoNode & MangoElementContentInterface & MangoWritableThingInterface & {
   __typename?: 'MangoElementContent';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** This is a generated connection for ElementContent */
export type MangoElementContentConnection = {
   __typename?: 'MangoElementContentConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoElementContentInterface>>>;
  edges?: Maybe<Array<Maybe<MangoElementContentEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of ElementContent */
export type MangoElementContentCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to ElementContent */
  type?: Maybe<Scalars['String']>;
};

/** This is a generated edge for ElementContent */
export type MangoElementContentEdge = {
   __typename?: 'MangoElementContentEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoElementContentInterface>;
};

export type MangoElementContentFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** One particular item of content to fill one layout element. (de: Inhalt, en: Content Item) */
export type MangoElementContentInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** The payload returned from mutations of ElementContent. */
export type MangoElementContentPayload = {
   __typename?: 'MangoElementContentPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedElementContent?: Maybe<MangoElementContent>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoElementContentSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of ElementContent */
export type MangoElementContentUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
};

/** A thing that can be embedded. (de: Embed-bares Etwas, en: Embeddable Thing) */
export type MangoEmbeddableThing = MangoNode & MangoEmbeddableThingInterface & {
   __typename?: 'MangoEmbeddableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** HTML embed code. (de: Embed Code, en: Embed code) */
  embedCode?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** This is a generated connection for EmbeddableThing */
export type MangoEmbeddableThingConnection = {
   __typename?: 'MangoEmbeddableThingConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoEmbeddableThingInterface>>>;
  edges?: Maybe<Array<Maybe<MangoEmbeddableThingEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for EmbeddableThing */
export type MangoEmbeddableThingEdge = {
   __typename?: 'MangoEmbeddableThingEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoEmbeddableThingInterface>;
};

export type MangoEmbeddableThingFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** A thing that can be embedded. (de: Embed-bares Etwas, en: Embeddable Thing) */
export type MangoEmbeddableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** HTML embed code. (de: Embed Code, en: Embed code) */
  embedCode?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

export enum MangoEmbeddableThingSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUser = MangoNode & MangoEndUserInterface & MangoAgentInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPersonInterface & MangoUserInterface & MangoWritableThingInterface & {
   __typename?: 'MangoEndUser';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Unique Identifier for anonymous users. (de: Anonymer Identifikator, en: Anonymous Identifier) */
  anonymousId?: Maybe<Scalars['String']>;
  /** A list of clips bookmarked by the user for later consumption. (de: Merkliste, en: Bookmarks) */
  bookmarks?: Maybe<MangoClipRemoteConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Deviceids used by user (Deprecated. Replaced by user:anonymousId) (de: Geräte IDs, en: Deviceids )
   * @deprecated Deprecated
   */
  devices?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** History of content consumption by single user in seconds (de: Verlauf, en: History) */
  histories?: Maybe<MangoContentInteractionConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) */
  loginId?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Subscriptions of single user (de: Abonniert, en: Subscribes) */
  subscriptions?: Maybe<MangoSubscriptionConnection>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserBookmarksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserHistoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoContentInteractionFilter>;
  orderBy?: Maybe<MangoContentInteractionSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserSubscriptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubscriptionFilter>;
  orderBy?: Maybe<MangoSubscriptionSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

export type MangoEndUserBookmarkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  bookmark: Scalars['ID'];
  endUser: Scalars['ID'];
};

/** This is a generated connection for EndUser */
export type MangoEndUserConnection = {
   __typename?: 'MangoEndUserConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoEndUserInterface>>>;
  edges?: Maybe<Array<Maybe<MangoEndUserEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of EndUser */
export type MangoEndUserCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to EndUser */
  type?: Maybe<Scalars['String']>;
  /** Unique Identifier for anonymous users. (de: Anonymer Identifikator, en: Anonymous Identifier) */
  anonymousId?: Maybe<Scalars['String']>;
  /** A list of clips bookmarked by the user for later consumption. (de: Merkliste, en: Bookmarks) */
  bookmarks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Deviceids used by user (Deprecated. Replaced by user:anonymousId) (de: Geräte IDs, en: Deviceids ) */
  devices?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /** ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) */
  loginId?: Maybe<Scalars['String']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name: Scalars['String'];
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoEndUserDeviceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  device: Scalars['String'];
  endUser: Scalars['ID'];
};

/** This is a generated edge for EndUser */
export type MangoEndUserEdge = {
   __typename?: 'MangoEndUserEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoEndUserInterface>;
};

export type MangoEndUserExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  endUser: Scalars['ID'];
};

export type MangoEndUserFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  endUser: Scalars['ID'];
};

export type MangoEndUserFilter = {
  /** Filter by values of property anonymousId */
  anonymousId?: Maybe<MangoStringFilter>;
  /** Filter by values of property bookmarks */
  bookmarks?: Maybe<MangoClipRemoteConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property devices */
  devices?: Maybe<MangoStringFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property loginId */
  loginId?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property name */
  name?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
};

/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Unique Identifier for anonymous users. (de: Anonymer Identifikator, en: Anonymous Identifier) */
  anonymousId?: Maybe<Scalars['String']>;
  /** A list of clips bookmarked by the user for later consumption. (de: Merkliste, en: Bookmarks) */
  bookmarks?: Maybe<MangoClipRemoteConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Deviceids used by user (Deprecated. Replaced by user:anonymousId) (de: Geräte IDs, en: Deviceids )
   * @deprecated Deprecated
   */
  devices?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** History of content consumption by single user in seconds (de: Verlauf, en: History) */
  histories?: Maybe<MangoContentInteractionConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) */
  loginId?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Subscriptions of single user (de: Abonniert, en: Subscribes) */
  subscriptions?: Maybe<MangoSubscriptionConnection>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceBookmarksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceHistoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoContentInteractionFilter>;
  orderBy?: Maybe<MangoContentInteractionSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceSubscriptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubscriptionFilter>;
  orderBy?: Maybe<MangoSubscriptionSortOrder>;
};


/** Describes an single end user (de: Endnutzer Event, en: Enduser Event) */
export type MangoEndUserInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** The payload returned from mutations of EndUser. */
export type MangoEndUserPayload = {
   __typename?: 'MangoEndUserPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedEndUser?: Maybe<MangoEndUser>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoEndUserRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoEndUserRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  endUser: Scalars['ID'];
};

export enum MangoEndUserSortOrder {
  AnonymousidAsc = 'ANONYMOUSID_ASC',
  AnonymousidDesc = 'ANONYMOUSID_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DevicesAsc = 'DEVICES_ASC',
  DevicesDesc = 'DEVICES_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  LoginidAsc = 'LOGINID_ASC',
  LoginidDesc = 'LOGINID_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

export type MangoEndUserTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  endUser: Scalars['ID'];
};

/** Input parameter for the update mutation of EndUser */
export type MangoEndUserUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Unique Identifier for anonymous users. (de: Anonymer Identifikator, en: Anonymous Identifier) */
  anonymousId?: Maybe<Scalars['String']>;
  /** A list of clips bookmarked by the user for later consumption. (de: Merkliste, en: Bookmarks) */
  bookmarks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Deviceids used by user (Deprecated. Replaced by user:anonymousId) (de: Geräte IDs, en: Deviceids ) */
  devices?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /** ID corresponding in the login service (de: Anmeldungskennung, en: Login identifier) */
  loginId?: Maybe<Scalars['String']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** Convenient wrapper around a BroadcastEvent and its Programme to simply provide all data needed for an EPG. */
export type MangoEpgEntry = {
   __typename?: 'MangoEPGEntry';
  /** Start time of the EPGEntry in UTC. */
  start: Scalars['MangoDateTime'];
  /** EPG day in the form `YYYY-MM-DD`. */
  day: Scalars['MangoDay'];
  /** Is the EPGItem currently live? */
  current: Scalars['Boolean'];
  /** The Slot of this EPGEntry. */
  slot: MangoEpgSlot;
  /** The associated BroadcastEvent containing event details of the EPGItem. */
  broadcastEvent?: Maybe<MangoBroadcastEventInterface>;
};

/** Describes a slot or range in an EPGDay. */
export type MangoEpgSlot = {
   __typename?: 'MangoEPGSlot';
  type: Scalars['String'];
  key: MangoEpgSlotKey;
  /** The hour (hh:mm) in which the slot begins. */
  start: Scalars['String'];
  /** The hour (hh:mm) in which the slot ends. */
  end: Scalars['String'];
  label: Scalars['String'];
};

/** Describes the slot an EPGEntry belongs to. */
export enum MangoEpgSlotKey {
  Morning = 'MORNING',
  Noon = 'NOON',
  Evening = 'EVENING',
  Night = 'NIGHT',
  Current = 'CURRENT'
}

/** A reference to a external Resource. (de: Externe URL, en: External URL) */
export type MangoExternalUrl = MangoNode & MangoExternalUrlInterface & MangoWritableThingInterface & {
   __typename?: 'MangoExternalURL';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
};

/** This is a generated connection for ExternalURL */
export type MangoExternalUrlConnection = {
   __typename?: 'MangoExternalURLConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoExternalUrlInterface>>>;
  edges?: Maybe<Array<Maybe<MangoExternalUrlEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoExternalUrlConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for ExternalURL */
export type MangoExternalUrlEdge = {
   __typename?: 'MangoExternalURLEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoExternalUrlInterface>;
};

export type MangoExternalUrlFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property url */
  url?: Maybe<MangoStringFilter>;
};

/** A reference to a external Resource. (de: Externe URL, en: External URL) */
export type MangoExternalUrlInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of ExternalURL. */
export type MangoExternalUrlPayload = {
   __typename?: 'MangoExternalURLPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedExternalURL?: Maybe<MangoExternalUrl>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoExternalUrlSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

/** Input parameter for the update mutation of ExternalURL */
export type MangoExternalUrlUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
};

/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtra = MangoNode & MangoExtraInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoClipInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoExtra';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

export type MangoExtraAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  extra: Scalars['ID'];
};

/** This is a generated connection for Extra */
export type MangoExtraConnection = {
   __typename?: 'MangoExtraConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoExtraInterface>>>;
  edges?: Maybe<Array<Maybe<MangoExtraEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Extra */
export type MangoExtraCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Extra */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoExtraCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  extra: Scalars['ID'];
};

/** This is a generated edge for Extra */
export type MangoExtraEdge = {
   __typename?: 'MangoExtraEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoExtraInterface>;
};

export type MangoExtraEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraExtraOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  extraOf: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property broadcasts */
  broadcasts?: Maybe<MangoBroadcastEventConnectionFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property extraOf */
  extraOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of Extra */
  term?: Maybe<Scalars['String']>;
};

export type MangoExtraFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  extra: Scalars['ID'];
};

/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is additional, accompanying material of another CreativeWork. (de: Begleitmaterial, en: Summary) */
export type MangoExtraInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

/** The payload returned from mutations of Extra. */
export type MangoExtraPayload = {
   __typename?: 'MangoExtraPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedExtra?: Maybe<MangoExtra>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoExtraProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  extra: Scalars['ID'];
};

export type MangoExtraSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  extra: Scalars['ID'];
};

export enum MangoExtraSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  BroadcastsCreatedatAsc = 'BROADCASTS_CREATEDAT_ASC',
  BroadcastsCreatedatDesc = 'BROADCASTS_CREATEDAT_DESC',
  BroadcastsEndAsc = 'BROADCASTS_END_ASC',
  BroadcastsEndDesc = 'BROADCASTS_END_DESC',
  BroadcastsImportedfromCreatedatAsc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_ASC',
  BroadcastsImportedfromCreatedatDesc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_DESC',
  BroadcastsImportedfromIdentifierAsc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_ASC',
  BroadcastsImportedfromIdentifierDesc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_DESC',
  BroadcastsImportedfromModifiedatAsc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_ASC',
  BroadcastsImportedfromModifiedatDesc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_DESC',
  BroadcastsIsrerunAsc = 'BROADCASTS_ISRERUN_ASC',
  BroadcastsIsrerunDesc = 'BROADCASTS_ISRERUN_DESC',
  BroadcastsModifiedatAsc = 'BROADCASTS_MODIFIEDAT_ASC',
  BroadcastsModifiedatDesc = 'BROADCASTS_MODIFIEDAT_DESC',
  BroadcastsStartAsc = 'BROADCASTS_START_ASC',
  BroadcastsStartDesc = 'BROADCASTS_START_DESC',
  BroadcastsTrackinginfosCreatedatAsc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_ASC',
  BroadcastsTrackinginfosCreatedatDesc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_DESC',
  BroadcastsTrackinginfosModifiedatAsc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_ASC',
  BroadcastsTrackinginfosModifiedatDesc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningCreatedatAsc = 'INITIALSCREENING_CREATEDAT_ASC',
  InitialscreeningCreatedatDesc = 'INITIALSCREENING_CREATEDAT_DESC',
  InitialscreeningEndAsc = 'INITIALSCREENING_END_ASC',
  InitialscreeningEndDesc = 'INITIALSCREENING_END_DESC',
  InitialscreeningImportedfromCreatedatAsc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_ASC',
  InitialscreeningImportedfromCreatedatDesc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_DESC',
  InitialscreeningImportedfromIdentifierAsc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_ASC',
  InitialscreeningImportedfromIdentifierDesc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_DESC',
  InitialscreeningImportedfromModifiedatAsc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_ASC',
  InitialscreeningImportedfromModifiedatDesc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningIsrerunAsc = 'INITIALSCREENING_ISRERUN_ASC',
  InitialscreeningIsrerunDesc = 'INITIALSCREENING_ISRERUN_DESC',
  InitialscreeningModifiedatAsc = 'INITIALSCREENING_MODIFIEDAT_ASC',
  InitialscreeningModifiedatDesc = 'INITIALSCREENING_MODIFIEDAT_DESC',
  InitialscreeningStartAsc = 'INITIALSCREENING_START_ASC',
  InitialscreeningStartDesc = 'INITIALSCREENING_START_DESC',
  InitialscreeningTrackinginfosCreatedatAsc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_ASC',
  InitialscreeningTrackinginfosCreatedatDesc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_DESC',
  InitialscreeningTrackinginfosModifiedatAsc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_ASC',
  InitialscreeningTrackinginfosModifiedatDesc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoExtraTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  extra: Scalars['ID'];
};

export type MangoExtraTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  extra: Scalars['ID'];
};

/** Input parameter for the update mutation of Extra */
export type MangoExtraUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoExtraVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  extra: Scalars['ID'];
};

/** A reference to a Facebook account. (de: Facebook Account, en: Facebook account) */
export type MangoFacebookAccount = MangoNode & MangoFacebookAccountInterface & MangoExternalUrlInterface & MangoSocialMediaAccountInterface & MangoWritableThingInterface & {
   __typename?: 'MangoFacebookAccount';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** This is a generated connection for FacebookAccount */
export type MangoFacebookAccountConnection = {
   __typename?: 'MangoFacebookAccountConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoFacebookAccountInterface>>>;
  edges?: Maybe<Array<Maybe<MangoFacebookAccountEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoFacebookAccountConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for FacebookAccount */
export type MangoFacebookAccountEdge = {
   __typename?: 'MangoFacebookAccountEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoFacebookAccountInterface>;
};

export type MangoFacebookAccountFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property url */
  url?: Maybe<MangoStringFilter>;
  /** Filter by values of property userName */
  userName?: Maybe<MangoStringFilter>;
};

/** A reference to a Facebook account. (de: Facebook Account, en: Facebook account) */
export type MangoFacebookAccountInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of FacebookAccount. */
export type MangoFacebookAccountPayload = {
   __typename?: 'MangoFacebookAccountPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedFacebookAccount?: Maybe<MangoFacebookAccount>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoFacebookAccountSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC'
}

/** Input parameter for the update mutation of FacebookAccount */
export type MangoFacebookAccountUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** Lists feature-toggles for specific apps. */
export type MangoFeatureMap = {
   __typename?: 'MangoFeatureMap';
  android?: Maybe<MangoAndroidFeatureMap>;
};

/**  (de: Datei, en: file) */
export type MangoFile = MangoNode & MangoFileInterface & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoFile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};


/**  (de: Datei, en: file) */
export type MangoFileAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/**  (de: Datei, en: file) */
export type MangoFileImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

export type MangoFileAccessibleInListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessibleIn: Scalars['ID'];
  file: Scalars['ID'];
};

/** This is a generated connection for File */
export type MangoFileConnection = {
   __typename?: 'MangoFileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoFileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoFileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoFileConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for File */
export type MangoFileEdge = {
   __typename?: 'MangoFileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoFileInterface>;
};

export type MangoFileFilter = {
  /** Filter by values of property accessibleIn */
  accessibleIn?: Maybe<MangoGeoZoneConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property fileSize */
  fileSize?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property internalLocation */
  internalLocation?: Maybe<MangoStringFilter>;
  /** Filter by values of property mimetype */
  mimetype?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publicLocation */
  publicLocation?: Maybe<MangoStringFilter>;
};

/**  (de: Datei, en: file) */
export type MangoFileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};


/**  (de: Datei, en: file) */
export type MangoFileInterfaceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/**  (de: Datei, en: file) */
export type MangoFileInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

/** The payload returned from mutations of File. */
export type MangoFilePayload = {
   __typename?: 'MangoFilePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedFile?: Maybe<MangoFile>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoFileRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  file: Scalars['ID'];
};

export enum MangoFileSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  FilesizeAsc = 'FILESIZE_ASC',
  FilesizeDesc = 'FILESIZE_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InternallocationAsc = 'INTERNALLOCATION_ASC',
  InternallocationDesc = 'INTERNALLOCATION_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  PubliclocationAsc = 'PUBLICLOCATION_ASC',
  PubliclocationDesc = 'PUBLICLOCATION_DESC'
}

/** Input parameter for the update mutation of File */
export type MangoFileUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};

export type MangoFloatFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['Float']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['Float']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  /** A filter that matches if the value of the property is greater than the specified value */
  gt?: Maybe<Scalars['Float']>;
  /** A filter that matches if the value of the property is greater than or equal to the specified value */
  gte?: Maybe<Scalars['Float']>;
  /** A filter that matches if the value of the property is less than the specified value */
  lt?: Maybe<Scalars['Float']>;
  /** A filter that matches if the value of the property is less than or equal to the specified value */
  lte?: Maybe<Scalars['Float']>;
};

/** Content format (not technical format). For example "short film". (de: Präsentationsform, en: Format) */
export type MangoFormat = MangoNode & MangoFormatInterface & MangoCategorizationInterface & {
   __typename?: 'MangoFormat';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Content format (not technical format). For example "short film". (de: Präsentationsform, en: Format) */
export type MangoFormatWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Format */
export type MangoFormatConnection = {
   __typename?: 'MangoFormatConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoFormatInterface>>>;
  edges?: Maybe<Array<Maybe<MangoFormatEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoFormatConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Format */
export type MangoFormatEdge = {
   __typename?: 'MangoFormatEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoFormatInterface>;
};

export type MangoFormatFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Content format (not technical format). For example "short film". (de: Präsentationsform, en: Format) */
export type MangoFormatInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Content format (not technical format). For example "short film". (de: Präsentationsform, en: Format) */
export type MangoFormatInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoFormatSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Any kind of content genre. Usually from a controlled vocabulary. (de: Genre, en: Genre) */
export type MangoGenre = MangoNode & MangoGenreInterface & MangoCategorizationInterface & {
   __typename?: 'MangoGenre';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of content genre. Usually from a controlled vocabulary. (de: Genre, en: Genre) */
export type MangoGenreWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Genre */
export type MangoGenreConnection = {
   __typename?: 'MangoGenreConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoGenreInterface>>>;
  edges?: Maybe<Array<Maybe<MangoGenreEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoGenreConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Genre */
export type MangoGenreEdge = {
   __typename?: 'MangoGenreEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoGenreInterface>;
};

export type MangoGenreFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Any kind of content genre. Usually from a controlled vocabulary. (de: Genre, en: Genre) */
export type MangoGenreInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of content genre. Usually from a controlled vocabulary. (de: Genre, en: Genre) */
export type MangoGenreInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoGenreSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Geographic area used to manage geoblocking of content. (de: Geo Zone, en: geo zone ) */
export type MangoGeoZone = MangoNode & MangoGeoZoneInterface & {
   __typename?: 'MangoGeoZone';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Unterregion von, en: subregion of) */
  subRegionOf?: Maybe<MangoGeoZoneInterface>;
};

/** This is a generated connection for GeoZone */
export type MangoGeoZoneConnection = {
   __typename?: 'MangoGeoZoneConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoGeoZoneInterface>>>;
  edges?: Maybe<Array<Maybe<MangoGeoZoneEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoGeoZoneConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for GeoZone */
export type MangoGeoZoneEdge = {
   __typename?: 'MangoGeoZoneEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoGeoZoneInterface>;
};

export type MangoGeoZoneFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property subRegionOf */
  subRegionOf?: Maybe<MangoGeoZoneRelationFilter>;
};

/** Geographic area used to manage geoblocking of content. (de: Geo Zone, en: geo zone ) */
export type MangoGeoZoneInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Unterregion von, en: subregion of) */
  subRegionOf?: Maybe<MangoGeoZoneInterface>;
};

export type MangoGeoZoneRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoGeoZoneSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGrouping = MangoNode & MangoGroupingInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoSubjectInterface & {
   __typename?: 'MangoGrouping';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Grouping */
export type MangoGroupingConnection = {
   __typename?: 'MangoGroupingConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoGroupingInterface>>>;
  edges?: Maybe<Array<Maybe<MangoGroupingEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoGroupingConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Grouping */
export type MangoGroupingEdge = {
   __typename?: 'MangoGroupingEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoGroupingInterface>;
};

export type MangoGroupingFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property slug */
  slug?: Maybe<MangoStringFilter>;
  /** Filter by values of property snippet */
  snippet?: Maybe<MangoStringFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of Grouping */
  term?: Maybe<Scalars['String']>;
};

/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** Any kind of grouping of creative works. (de: Gruppierung, en: grouping) */
export type MangoGroupingInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoGroupingSortOrder {
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  SnippetAsc = 'SNIPPET_ASC',
  SnippetDesc = 'SNIPPET_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGsea = MangoNode & MangoGseaInterface & MangoAgentInterface & MangoOrganizationInterface & {
   __typename?: 'MangoGSEA';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** common programmes, institutions and tasks (of ARD) (de: GSEA, en: GSEA) */
export type MangoGseaInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

export type MangoHookedImageFileCropConnectionFilter = {
  /** The format of an ImageFileCrop. */
  format?: Maybe<MangoImageFileCropFormat>;
};

export type MangoIdFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['ID']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['ID']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImage = MangoNode & MangoImageInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoSubjectInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoImage';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**  (en: Image File) */
  imageFiles?: Maybe<MangoImageFileConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  url?: Maybe<Scalars['String']>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageImageFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFileFilter>;
  orderBy?: Maybe<MangoImageFileSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImagePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImagePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoImageAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  image: Scalars['ID'];
};

/** This is a generated connection for Image */
export type MangoImageConnection = {
   __typename?: 'MangoImageConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoImageInterface>>>;
  edges?: Maybe<Array<Maybe<MangoImageEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoImageConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of Image */
export type MangoImageCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Image */
  type?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Image File) */
  imageFiles: Array<Maybe<Scalars['ID']>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoImageCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  image: Scalars['ID'];
};

/** This is a generated edge for Image */
export type MangoImageEdge = {
   __typename?: 'MangoImageEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoImageInterface>;
};

export type MangoImageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  image: Scalars['ID'];
};

/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFile = MangoNode & MangoImageFileInterface & MangoFileInterface & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoImageFile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** The aspect Ratio of an ImageFile or an ImageFileCrop. (de: Seitenverhältnis, en: aspect ratio) */
  aspectRatio?: Maybe<Scalars['Float']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Get all image crops for this ImageFile. */
  crops?: Maybe<MangoImageFileCropConnection>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (en: height) */
  height?: Maybe<Scalars['Int']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /**  (en: width) */
  width?: Maybe<Scalars['Int']>;
};


/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileCropsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoHookedImageFileCropConnectionFilter>;
  orderBy?: Maybe<MangoImageFileCropSortOrder>;
};


/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

export type MangoImageFileAccessibleInListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessibleIn: Scalars['ID'];
  imageFile: Scalars['ID'];
};

/** This is a generated connection for ImageFile */
export type MangoImageFileConnection = {
   __typename?: 'MangoImageFileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoImageFileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoImageFileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoImageFileConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of ImageFile */
export type MangoImageFileCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to ImageFile */
  type?: Maybe<Scalars['String']>;
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Bildzuschnitt, en: crop) */
  crops?: Maybe<Array<Maybe<MangoImageFileCropCreateInput>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (en: height) */
  height: Scalars['Int'];
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation: Scalars['String'];
  /**  (en: width) */
  width: Scalars['Int'];
};

/** Describes the crop of a image file. (de: Bildzuschnitt, en: cropped image file) */
export type MangoImageFileCrop = MangoNode & MangoImageFileCropInterface & MangoWritableThingInterface & {
   __typename?: 'MangoImageFileCrop';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** The aspect Ratio of an ImageFile or an ImageFileCrop. (de: Seitenverhältnis, en: aspect ratio) */
  aspectRatio?: Maybe<Scalars['Float']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates the cropped image with the original image file beeing cropped. (de: Bildzuschnitt von, en: crop of ) */
  cropOf?: Maybe<MangoImageFileInterface>;
  /**  (de: X Koordinate für den Bildzuschnitt, en: x coordinate for image crop) */
  cropX?: Maybe<Scalars['Int']>;
  /**  (de: Y Koordinate für den Bildzuschnitt, en: y coordinate for image crop) */
  cropY?: Maybe<Scalars['Int']>;
  /**  (en: height) */
  height?: Maybe<Scalars['Int']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /**  (en: width) */
  width?: Maybe<Scalars['Int']>;
};

/** This is a generated connection for ImageFileCrop */
export type MangoImageFileCropConnection = {
   __typename?: 'MangoImageFileCropConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoImageFileCropInterface>>>;
  edges?: Maybe<Array<Maybe<MangoImageFileCropEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of ImageFileCrop */
export type MangoImageFileCropCreateInput = {
  /** The type of the created object. Defaults to ImageFileCrop */
  type?: Maybe<Scalars['String']>;
  /**  (de: X Koordinate für den Bildzuschnitt, en: x coordinate for image crop) */
  cropX: Scalars['Int'];
  /**  (de: Y Koordinate für den Bildzuschnitt, en: y coordinate for image crop) */
  cropY: Scalars['Int'];
  /**  (en: height) */
  height: Scalars['Int'];
  /**  (en: width) */
  width: Scalars['Int'];
};

/** This is a generated edge for ImageFileCrop */
export type MangoImageFileCropEdge = {
   __typename?: 'MangoImageFileCropEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoImageFileCropInterface>;
};

/** The format of an ImageFileCrop. */
export enum MangoImageFileCropFormat {
  AspectRatio_16_9 = 'ASPECT_RATIO_16_9',
  AspectRatio_1_1 = 'ASPECT_RATIO_1_1'
}

/** Describes the crop of a image file. (de: Bildzuschnitt, en: cropped image file) */
export type MangoImageFileCropInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** The aspect Ratio of an ImageFile or an ImageFileCrop. (de: Seitenverhältnis, en: aspect ratio) */
  aspectRatio?: Maybe<Scalars['Float']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates the cropped image with the original image file beeing cropped. (de: Bildzuschnitt von, en: crop of ) */
  cropOf?: Maybe<MangoImageFileInterface>;
  /**  (de: X Koordinate für den Bildzuschnitt, en: x coordinate for image crop) */
  cropX?: Maybe<Scalars['Int']>;
  /**  (de: Y Koordinate für den Bildzuschnitt, en: y coordinate for image crop) */
  cropY?: Maybe<Scalars['Int']>;
  /**  (en: height) */
  height?: Maybe<Scalars['Int']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /**  (en: width) */
  width?: Maybe<Scalars['Int']>;
};

/** The payload returned from mutations of ImageFileCrop. */
export type MangoImageFileCropPayload = {
   __typename?: 'MangoImageFileCropPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedImageFileCrop?: Maybe<MangoImageFileCrop>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoImageFileCropSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  CropxAsc = 'CROPX_ASC',
  CropxDesc = 'CROPX_DESC',
  CropyAsc = 'CROPY_ASC',
  CropyDesc = 'CROPY_DESC',
  HeightAsc = 'HEIGHT_ASC',
  HeightDesc = 'HEIGHT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  WidthAsc = 'WIDTH_ASC',
  WidthDesc = 'WIDTH_DESC'
}

/** Input parameter for the update mutation of ImageFileCrop */
export type MangoImageFileCropUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /**  (de: X Koordinate für den Bildzuschnitt, en: x coordinate for image crop) */
  cropX?: Maybe<Scalars['Int']>;
  /**  (de: Y Koordinate für den Bildzuschnitt, en: y coordinate for image crop) */
  cropY?: Maybe<Scalars['Int']>;
  /**  (en: height) */
  height?: Maybe<Scalars['Int']>;
  /**  (en: width) */
  width?: Maybe<Scalars['Int']>;
};

/** This is a generated edge for ImageFile */
export type MangoImageFileEdge = {
   __typename?: 'MangoImageFileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoImageFileInterface>;
};

export type MangoImageFileFilter = {
  /** Filter by values of property accessibleIn */
  accessibleIn?: Maybe<MangoGeoZoneConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property fileSize */
  fileSize?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property height */
  height?: Maybe<MangoIntFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property internalLocation */
  internalLocation?: Maybe<MangoStringFilter>;
  /** Filter by values of property mimetype */
  mimetype?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publicLocation */
  publicLocation?: Maybe<MangoStringFilter>;
  /** Filter by values of property width */
  width?: Maybe<MangoIntFilter>;
};

/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** The aspect Ratio of an ImageFile or an ImageFileCrop. (de: Seitenverhältnis, en: aspect ratio) */
  aspectRatio?: Maybe<Scalars['Float']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Get all image crops for this ImageFile. */
  crops?: Maybe<MangoImageFileCropConnection>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (en: height) */
  height?: Maybe<Scalars['Int']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /**  (en: width) */
  width?: Maybe<Scalars['Int']>;
};


/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileInterfaceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileInterfaceCropsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoHookedImageFileCropConnectionFilter>;
  orderBy?: Maybe<MangoImageFileCropSortOrder>;
};


/** The file representing an image. (de: Bilddatei, en: image file) */
export type MangoImageFileInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

/** The payload returned from mutations of ImageFile. */
export type MangoImageFilePayload = {
   __typename?: 'MangoImageFilePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedImageFile?: Maybe<MangoImageFile>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoImageFileRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageFile: Scalars['ID'];
};

export enum MangoImageFileSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  CropsCreatedatAsc = 'CROPS_CREATEDAT_ASC',
  CropsCreatedatDesc = 'CROPS_CREATEDAT_DESC',
  CropsCropxAsc = 'CROPS_CROPX_ASC',
  CropsCropxDesc = 'CROPS_CROPX_DESC',
  CropsCropyAsc = 'CROPS_CROPY_ASC',
  CropsCropyDesc = 'CROPS_CROPY_DESC',
  CropsHeightAsc = 'CROPS_HEIGHT_ASC',
  CropsHeightDesc = 'CROPS_HEIGHT_DESC',
  CropsModifiedatAsc = 'CROPS_MODIFIEDAT_ASC',
  CropsModifiedatDesc = 'CROPS_MODIFIEDAT_DESC',
  CropsWidthAsc = 'CROPS_WIDTH_ASC',
  CropsWidthDesc = 'CROPS_WIDTH_DESC',
  FilesizeAsc = 'FILESIZE_ASC',
  FilesizeDesc = 'FILESIZE_DESC',
  HeightAsc = 'HEIGHT_ASC',
  HeightDesc = 'HEIGHT_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InternallocationAsc = 'INTERNALLOCATION_ASC',
  InternallocationDesc = 'INTERNALLOCATION_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  PubliclocationAsc = 'PUBLICLOCATION_ASC',
  PubliclocationDesc = 'PUBLICLOCATION_DESC',
  WidthAsc = 'WIDTH_ASC',
  WidthDesc = 'WIDTH_DESC'
}

/** Input parameter for the update mutation of ImageFile */
export type MangoImageFileUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Bildzuschnitt, en: crop) */
  crops?: Maybe<Array<Maybe<MangoImageFileCropCreateInput>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (en: height) */
  height?: Maybe<Scalars['Int']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /**  (en: width) */
  width?: Maybe<Scalars['Int']>;
};

export type MangoImageFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property imageFiles */
  imageFiles?: Maybe<MangoImageFileConnectionFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property slug */
  slug?: Maybe<MangoStringFilter>;
  /** Filter by values of property snippet */
  snippet?: Maybe<MangoStringFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of Image */
  term?: Maybe<Scalars['String']>;
};

export type MangoImageFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageImageFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  imageFile: Scalars['ID'];
  image: Scalars['ID'];
};

/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**  (en: Image File) */
  imageFiles?: Maybe<MangoImageFileConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  url?: Maybe<Scalars['String']>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceImageFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFileFilter>;
  orderBy?: Maybe<MangoImageFileSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** Metadata container describing an image . (de: Bild, en: image) */
export type MangoImageInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** The payload returned from mutations of Image. */
export type MangoImagePayload = {
   __typename?: 'MangoImagePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedImage?: Maybe<MangoImage>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoImageProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoImageRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  image: Scalars['ID'];
};

export enum MangoImageSortOrder {
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  SnippetAsc = 'SNIPPET_ASC',
  SnippetDesc = 'SNIPPET_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoImageTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  image: Scalars['ID'];
};

export type MangoImageTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  image: Scalars['ID'];
};

/** Input parameter for the update mutation of Image */
export type MangoImageUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Image File) */
  imageFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

/**  (not documented) */
export type MangoImportableThing = MangoNode & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoImportableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};


/**  (not documented) */
export type MangoImportableThingImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

/** This is a generated connection for ImportableThing */
export type MangoImportableThingConnection = {
   __typename?: 'MangoImportableThingConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoImportableThingInterface>>>;
  edges?: Maybe<Array<Maybe<MangoImportableThingEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of ImportableThing */
export type MangoImportableThingCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to ImportableThing */
  type?: Maybe<Scalars['String']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
};

/** This is a generated edge for ImportableThing */
export type MangoImportableThingEdge = {
   __typename?: 'MangoImportableThingEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoImportableThingInterface>;
};

export type MangoImportableThingFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/**  (not documented) */
export type MangoImportableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};


/**  (not documented) */
export type MangoImportableThingInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

/** The payload returned from mutations of ImportableThing. */
export type MangoImportableThingPayload = {
   __typename?: 'MangoImportableThingPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedImportableThing?: Maybe<MangoImportableThing>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoImportableThingSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of ImportableThing */
export type MangoImportableThingUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
};

/**  (not documented) */
export type MangoImportLocator = MangoNode & MangoImportLocatorInterface & MangoLocatorInterface & MangoWritableThingInterface & {
   __typename?: 'MangoImportLocator';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system?: Maybe<MangoSystemInterface>;
};

/** This is a generated connection for ImportLocator */
export type MangoImportLocatorConnection = {
   __typename?: 'MangoImportLocatorConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoImportLocatorInterface>>>;
  edges?: Maybe<Array<Maybe<MangoImportLocatorEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoImportLocatorConnectionFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property identifier */
  identifier?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property system */
  system?: Maybe<MangoSystemRelationFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** Input parameter for the create mutation of ImportLocator */
export type MangoImportLocatorCreateInput = {
  /** The type of the created object. Defaults to ImportLocator */
  type?: Maybe<Scalars['String']>;
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier: Scalars['String'];
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system: Scalars['ID'];
};

/** This is a generated edge for ImportLocator */
export type MangoImportLocatorEdge = {
   __typename?: 'MangoImportLocatorEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoImportLocatorInterface>;
};

export type MangoImportLocatorFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property identifier */
  identifier?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property system */
  system?: Maybe<MangoSystemRelationFilter>;
};

/**  (not documented) */
export type MangoImportLocatorInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system?: Maybe<MangoSystemInterface>;
};

/** The payload returned from mutations of ImportLocator. */
export type MangoImportLocatorPayload = {
   __typename?: 'MangoImportLocatorPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedImportLocator?: Maybe<MangoImportLocator>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoImportLocatorSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  IdentifierAsc = 'IDENTIFIER_ASC',
  IdentifierDesc = 'IDENTIFIER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of ImportLocator */
export type MangoImportLocatorUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier?: Maybe<Scalars['String']>;
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system?: Maybe<Scalars['ID']>;
};

export type MangoIntFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['Int']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['Int']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** A filter that matches if the value of the property is greater than the specified value */
  gt?: Maybe<Scalars['Int']>;
  /** A filter that matches if the value of the property is greater than or equal to the specified value */
  gte?: Maybe<Scalars['Int']>;
  /** A filter that matches if the value of the property is less than the specified value */
  lt?: Maybe<Scalars['Int']>;
  /** A filter that matches if the value of the property is less than or equal to the specified value */
  lte?: Maybe<Scalars['Int']>;
};

/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItem = MangoNode & MangoItemInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoClipInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoItem';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Associates an Item with its Programmes. (de: Beitrag von, en: item of) */
  itemOf?: Maybe<MangoProgrammeConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  /** Get this and other Items of the same Programme, sorted by their creation date. */
  siblings: Array<Maybe<MangoSiblingItemEntry>>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemItemOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemSiblingsArgs = {
  next?: Maybe<Scalars['Int']>;
  previous?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoItemFilter>;
};

export type MangoItemAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  item: Scalars['ID'];
};

/** This is a generated connection for Item */
export type MangoItemConnection = {
   __typename?: 'MangoItemConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoItemInterface>>>;
  edges?: Maybe<Array<Maybe<MangoItemEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Item */
export type MangoItemCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Item */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Associates an Item with its Programmes. (de: Beitrag von, en: item of) */
  itemOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoItemCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  item: Scalars['ID'];
};

/** This is a generated edge for Item */
export type MangoItemEdge = {
   __typename?: 'MangoItemEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoItemInterface>;
};

export type MangoItemEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property itemOf */
  itemOf?: Maybe<MangoProgrammeConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of Item */
  term?: Maybe<Scalars['String']>;
};

export type MangoItemFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  item: Scalars['ID'];
};

/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Associates an Item with its Programmes. (de: Beitrag von, en: item of) */
  itemOf?: Maybe<MangoProgrammeConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  /** Get this and other Items of the same Programme, sorted by their creation date. */
  siblings: Array<Maybe<MangoSiblingItemEntry>>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceItemOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};


/** An item of a programme, usually about one topic. (de: Beitrag, en: item) */
export type MangoItemInterfaceSiblingsArgs = {
  next?: Maybe<Scalars['Int']>;
  previous?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoItemFilter>;
};

export type MangoItemItemOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  itemOf: Scalars['ID'];
  item: Scalars['ID'];
};

/** The payload returned from mutations of Item. */
export type MangoItemPayload = {
   __typename?: 'MangoItemPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedItem?: Maybe<MangoItem>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoItemProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  item: Scalars['ID'];
};

export type MangoItemSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  item: Scalars['ID'];
};

export enum MangoItemSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoItemTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoItemTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  item: Scalars['ID'];
};

/** Input parameter for the update mutation of Item */
export type MangoItemUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Associates an Item with its Programmes. (de: Beitrag von, en: item of) */
  itemOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoItemVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  item: Scalars['ID'];
};

export type MangoLikeInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** ID of a Likable Thing - at the moment only Clips are supported. */
  likable: Scalars['ID'];
};

export type MangoLikePayload = {
   __typename?: 'MangoLikePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** A thing that links to another arbitrary linkable thing.  (en: Linkable Thing) */
export type MangoLinkableThing = MangoNode & MangoLinkableThingInterface & {
   __typename?: 'MangoLinkableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};


/** A thing that links to another arbitrary linkable thing.  (en: Linkable Thing) */
export type MangoLinkableThingLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};

/** This is a generated connection for LinkableThing */
export type MangoLinkableThingConnection = {
   __typename?: 'MangoLinkableThingConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoLinkableThingInterface>>>;
  edges?: Maybe<Array<Maybe<MangoLinkableThingEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for LinkableThing */
export type MangoLinkableThingEdge = {
   __typename?: 'MangoLinkableThingEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoLinkableThingInterface>;
};

export type MangoLinkableThingFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** A thing that links to another arbitrary linkable thing.  (en: Linkable Thing) */
export type MangoLinkableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};


/** A thing that links to another arbitrary linkable thing.  (en: Linkable Thing) */
export type MangoLinkableThingInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};

export type MangoLinkableThingRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoLinkableThingSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestream = MangoNode & MangoLivestreamInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoThingWithCanonicalUrlInterface & MangoWritableThingInterface & {
   __typename?: 'MangoLivestream';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /** Describes which broadcast service publishes its programme on the livestream. (de: gesendet von, en: broadcasted by) */
  broadcastedBy?: Maybe<MangoBroadcastServiceInterface>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** A descriptive label for the domain it is used on. (de: Bezeichnung, en: label) */
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** All programmes broadcasted by this broadcast service (calculated property) (de: Sendungen, en: Programmes) */
  programmes?: Maybe<MangoProgrammeConnection>;
  /**
   * The region where this livestream is available. When empty the livestream has
   * no regional restrictions (de: Verbreitungsgebiet, en: region)
   */
  regions?: Maybe<MangoBroadcastRegionConnection>;
  /** Associates a livestream with a consumable streaming URL/file. (de: Streaming URL, en: streaming URL) */
  streamingUrls?: Maybe<MangoLivestreamResourceConnection>;
  /** ElectronicProgrammeGuide */
  epg?: Maybe<Array<Maybe<MangoEpgEntry>>>;
  url?: Maybe<Scalars['String']>;
  hlsUrl?: Maybe<Scalars['String']>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamProgrammesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamRegionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastRegionFilter>;
  orderBy?: Maybe<MangoBroadcastRegionSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamStreamingUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamResourceFilter>;
  orderBy?: Maybe<MangoLivestreamResourceSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamEpgArgs = {
  dayOffset?: Maybe<Scalars['Int']>;
  day?: Maybe<Scalars['MangoDay']>;
  slots?: Maybe<Array<Maybe<MangoEpgSlotKey>>>;
};

/** This is a generated connection for Livestream */
export type MangoLivestreamConnection = {
   __typename?: 'MangoLivestreamConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoLivestreamInterface>>>;
  edges?: Maybe<Array<Maybe<MangoLivestreamEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoLivestreamConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of Livestream */
export type MangoLivestreamCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Livestream */
  type?: Maybe<Scalars['String']>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /** Describes which broadcast service publishes its programme on the livestream. (de: gesendet von, en: broadcasted by) */
  broadcastedBy?: Maybe<Scalars['ID']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** A descriptive label for the domain it is used on. (de: Bezeichnung, en: label) */
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * The region where this livestream is available. When empty the livestream has
   * no regional restrictions (de: Verbreitungsgebiet, en: region)
   */
  regions?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a livestream with a consumable streaming URL/file. (de: Streaming URL, en: streaming URL) */
  streamingUrls?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** This is a generated edge for Livestream */
export type MangoLivestreamEdge = {
   __typename?: 'MangoLivestreamEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoLivestreamInterface>;
};

export type MangoLivestreamFilter = {
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property broadcastedBy */
  broadcastedBy?: Maybe<MangoBroadcastServiceRelationFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property labels */
  labels?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property regions */
  regions?: Maybe<MangoBroadcastRegionConnectionFilter>;
  /** Filter by values of property streamingUrls */
  streamingUrls?: Maybe<MangoLivestreamResourceConnectionFilter>;
};

/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /** Describes which broadcast service publishes its programme on the livestream. (de: gesendet von, en: broadcasted by) */
  broadcastedBy?: Maybe<MangoBroadcastServiceInterface>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** A descriptive label for the domain it is used on. (de: Bezeichnung, en: label) */
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** All programmes broadcasted by this broadcast service (calculated property) (de: Sendungen, en: Programmes) */
  programmes?: Maybe<MangoProgrammeConnection>;
  /**
   * The region where this livestream is available. When empty the livestream has
   * no regional restrictions (de: Verbreitungsgebiet, en: region)
   */
  regions?: Maybe<MangoBroadcastRegionConnection>;
  /** Associates a livestream with a consumable streaming URL/file. (de: Streaming URL, en: streaming URL) */
  streamingUrls?: Maybe<MangoLivestreamResourceConnection>;
  /** ElectronicProgrammeGuide */
  epg?: Maybe<Array<Maybe<MangoEpgEntry>>>;
  url?: Maybe<Scalars['String']>;
  hlsUrl?: Maybe<Scalars['String']>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterfaceProgrammesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterfaceRegionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastRegionFilter>;
  orderBy?: Maybe<MangoBroadcastRegionSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterfaceStreamingUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamResourceFilter>;
  orderBy?: Maybe<MangoLivestreamResourceSortOrder>;
};


/** A Livestream. (de: Livestream, en: Livestream ) */
export type MangoLivestreamInterfaceEpgArgs = {
  dayOffset?: Maybe<Scalars['Int']>;
  day?: Maybe<Scalars['MangoDay']>;
  slots?: Maybe<Array<Maybe<MangoEpgSlotKey>>>;
};

export type MangoLivestreamLabelListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  label: Scalars['String'];
  livestream: Scalars['ID'];
};

/** The payload returned from mutations of Livestream. */
export type MangoLivestreamPayload = {
   __typename?: 'MangoLivestreamPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedLivestream?: Maybe<MangoLivestream>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoLivestreamRegionListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  region: Scalars['ID'];
  livestream: Scalars['ID'];
};

export type MangoLivestreamRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  livestream: Scalars['ID'];
};

/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResource = MangoNode & MangoLivestreamResourceInterface & MangoFileInterface & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoLivestreamResource';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<MangoCaptionConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: mit eingestanzten Untertiteln, en: has embedded subtitles ) */
  hasEmbeddedSubtitles?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<MangoSubtitleConnection>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<MangoVideoProfileInterface>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceCaptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCaptionFilter>;
  orderBy?: Maybe<MangoCaptionSortOrder>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceSubtitlesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubtitleFilter>;
  orderBy?: Maybe<MangoSubtitleSortOrder>;
};

export type MangoLivestreamResourceAccessibleInListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessibleIn: Scalars['ID'];
  livestreamResource: Scalars['ID'];
};

/** This is a generated connection for LivestreamResource */
export type MangoLivestreamResourceConnection = {
   __typename?: 'MangoLivestreamResourceConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoLivestreamResourceInterface>>>;
  edges?: Maybe<Array<Maybe<MangoLivestreamResourceEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoLivestreamResourceConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of LivestreamResource */
export type MangoLivestreamResourceCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to LivestreamResource */
  type?: Maybe<Scalars['String']>;
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<Scalars['ID']>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<Array<Maybe<MangoCaptionCreateInput>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: mit eingestanzten Untertiteln, en: has embedded subtitles ) */
  hasEmbeddedSubtitles?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation: Scalars['String'];
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<Array<Maybe<MangoSubtitleCreateInput>>>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for LivestreamResource */
export type MangoLivestreamResourceEdge = {
   __typename?: 'MangoLivestreamResourceEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoLivestreamResourceInterface>;
};

export type MangoLivestreamResourceFilter = {
  /** Filter by values of property accessibleIn */
  accessibleIn?: Maybe<MangoGeoZoneConnectionFilter>;
  /** Filter by values of property audioProfile */
  audioProfile?: Maybe<MangoAudioProfileRelationFilter>;
  /** Filter by values of property captions */
  captions?: Maybe<MangoCaptionConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property fileSize */
  fileSize?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property hasEmbeddedSubtitles */
  hasEmbeddedSubtitles?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property internalLocation */
  internalLocation?: Maybe<MangoStringFilter>;
  /** Filter by values of property mimetype */
  mimetype?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property subtitles */
  subtitles?: Maybe<MangoSubtitleConnectionFilter>;
  /** Filter by values of property videoProfile */
  videoProfile?: Maybe<MangoVideoProfileRelationFilter>;
};

/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<MangoCaptionConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: mit eingestanzten Untertiteln, en: has embedded subtitles ) */
  hasEmbeddedSubtitles?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<MangoSubtitleConnection>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<MangoVideoProfileInterface>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceInterfaceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceInterfaceCaptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCaptionFilter>;
  orderBy?: Maybe<MangoCaptionSortOrder>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** The resource representing a Livestream. (de: Livestream Resource, en: Livestream Resource) */
export type MangoLivestreamResourceInterfaceSubtitlesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubtitleFilter>;
  orderBy?: Maybe<MangoSubtitleSortOrder>;
};

/** The payload returned from mutations of LivestreamResource. */
export type MangoLivestreamResourcePayload = {
   __typename?: 'MangoLivestreamResourcePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedLivestreamResource?: Maybe<MangoLivestreamResource>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoLivestreamResourceRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  livestreamResource: Scalars['ID'];
};

export enum MangoLivestreamResourceSortOrder {
  CaptionsClosedAsc = 'CAPTIONS_CLOSED_ASC',
  CaptionsClosedDesc = 'CAPTIONS_CLOSED_DESC',
  CaptionsCreatedatAsc = 'CAPTIONS_CREATEDAT_ASC',
  CaptionsCreatedatDesc = 'CAPTIONS_CREATEDAT_DESC',
  CaptionsEmbeddedAsc = 'CAPTIONS_EMBEDDED_ASC',
  CaptionsEmbeddedDesc = 'CAPTIONS_EMBEDDED_DESC',
  CaptionsLanguageAsc = 'CAPTIONS_LANGUAGE_ASC',
  CaptionsLanguageDesc = 'CAPTIONS_LANGUAGE_DESC',
  CaptionsModifiedatAsc = 'CAPTIONS_MODIFIEDAT_ASC',
  CaptionsModifiedatDesc = 'CAPTIONS_MODIFIEDAT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  FilesizeAsc = 'FILESIZE_ASC',
  FilesizeDesc = 'FILESIZE_DESC',
  HasembeddedsubtitlesAsc = 'HASEMBEDDEDSUBTITLES_ASC',
  HasembeddedsubtitlesDesc = 'HASEMBEDDEDSUBTITLES_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InternallocationAsc = 'INTERNALLOCATION_ASC',
  InternallocationDesc = 'INTERNALLOCATION_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  SubtitlesClosedAsc = 'SUBTITLES_CLOSED_ASC',
  SubtitlesClosedDesc = 'SUBTITLES_CLOSED_DESC',
  SubtitlesCreatedatAsc = 'SUBTITLES_CREATEDAT_ASC',
  SubtitlesCreatedatDesc = 'SUBTITLES_CREATEDAT_DESC',
  SubtitlesEmbeddedAsc = 'SUBTITLES_EMBEDDED_ASC',
  SubtitlesEmbeddedDesc = 'SUBTITLES_EMBEDDED_DESC',
  SubtitlesLanguageAsc = 'SUBTITLES_LANGUAGE_ASC',
  SubtitlesLanguageDesc = 'SUBTITLES_LANGUAGE_DESC',
  SubtitlesModifiedatAsc = 'SUBTITLES_MODIFIEDAT_ASC',
  SubtitlesModifiedatDesc = 'SUBTITLES_MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of LivestreamResource */
export type MangoLivestreamResourceUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<Scalars['ID']>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<Array<Maybe<MangoCaptionCreateInput>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: mit eingestanzten Untertiteln, en: has embedded subtitles ) */
  hasEmbeddedSubtitles?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<Array<Maybe<MangoSubtitleCreateInput>>>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<Scalars['ID']>;
};

export enum MangoLivestreamSortOrder {
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  LabelsAsc = 'LABELS_ASC',
  LabelsDesc = 'LABELS_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

export type MangoLivestreamStreamingUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  streamingUrl: Scalars['ID'];
  livestream: Scalars['ID'];
};

/** Input parameter for the update mutation of Livestream */
export type MangoLivestreamUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /** Describes which broadcast service publishes its programme on the livestream. (de: gesendet von, en: broadcasted by) */
  broadcastedBy?: Maybe<Scalars['ID']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** A descriptive label for the domain it is used on. (de: Bezeichnung, en: label) */
  labels?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * The region where this livestream is available. When empty the livestream has
   * no regional restrictions (de: Verbreitungsgebiet, en: region)
   */
  regions?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a livestream with a consumable streaming URL/file. (de: Streaming URL, en: streaming URL) */
  streamingUrls?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/**  (not documented) */
export type MangoLocator = MangoNode & MangoLocatorInterface & MangoWritableThingInterface & {
   __typename?: 'MangoLocator';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system?: Maybe<MangoSystemInterface>;
};

/**  (not documented) */
export type MangoLocatorInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system?: Maybe<MangoSystemInterface>;
};

/** The payload returned from mutations of Locator. */
export type MangoLocatorPayload = {
   __typename?: 'MangoLocatorPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedLocator?: Maybe<MangoLocator>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** Input parameter for the update mutation of Locator */
export type MangoLocatorUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Uniquely identifies a resource in a system, for example an ID or a path. (de: Identifizierung, en: identifier) */
  identifier?: Maybe<Scalars['String']>;
  /** Specifies the system that contains a resource. (de: System, en: system) */
  system?: Maybe<Scalars['ID']>;
};

/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLra = MangoNode & MangoLraInterface & MangoAgentInterface & MangoOrganizationInterface & {
   __typename?: 'MangoLRA';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Public broadcasting service of a German federal state (de: LRA, en: LRA) */
export type MangoLraInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOf = MangoNode & MangoMakingOfInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoClipInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoExtraInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoMakingOf';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies which CreativeWork a Making Of documents. (de: Making Of von, en: Making Of of) */
  makingOfOf?: Maybe<MangoCreativeWorkConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfMakingOfOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

export type MangoMakingOfAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  makingOf: Scalars['ID'];
};

/** This is a generated connection for MakingOf */
export type MangoMakingOfConnection = {
   __typename?: 'MangoMakingOfConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoMakingOfInterface>>>;
  edges?: Maybe<Array<Maybe<MangoMakingOfEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of MakingOf */
export type MangoMakingOfCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to MakingOf */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /** Specifies which CreativeWork a Making Of documents. (de: Making Of von, en: Making Of of) */
  makingOfOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoMakingOfCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  makingOf: Scalars['ID'];
};

/** This is a generated edge for MakingOf */
export type MangoMakingOfEdge = {
   __typename?: 'MangoMakingOfEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoMakingOfInterface>;
};

export type MangoMakingOfEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfExtraOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  extraOf: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property broadcasts */
  broadcasts?: Maybe<MangoBroadcastEventConnectionFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property extraOf */
  extraOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property makingOfOf */
  makingOfOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of MakingOf */
  term?: Maybe<Scalars['String']>;
};

export type MangoMakingOfFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  makingOf: Scalars['ID'];
};

/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies which CreativeWork a Making Of documents. (de: Making Of von, en: Making Of of) */
  makingOfOf?: Maybe<MangoCreativeWorkConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceMakingOfOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip about how another CreativeWork was created. (de: Making Of, en: making of) */
export type MangoMakingOfInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

export type MangoMakingOfMakingOfOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  makingOfOf: Scalars['ID'];
  makingOf: Scalars['ID'];
};

/** The payload returned from mutations of MakingOf. */
export type MangoMakingOfPayload = {
   __typename?: 'MangoMakingOfPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedMakingOf?: Maybe<MangoMakingOf>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoMakingOfProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  makingOf: Scalars['ID'];
};

export type MangoMakingOfSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export enum MangoMakingOfSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  BroadcastsCreatedatAsc = 'BROADCASTS_CREATEDAT_ASC',
  BroadcastsCreatedatDesc = 'BROADCASTS_CREATEDAT_DESC',
  BroadcastsEndAsc = 'BROADCASTS_END_ASC',
  BroadcastsEndDesc = 'BROADCASTS_END_DESC',
  BroadcastsImportedfromCreatedatAsc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_ASC',
  BroadcastsImportedfromCreatedatDesc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_DESC',
  BroadcastsImportedfromIdentifierAsc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_ASC',
  BroadcastsImportedfromIdentifierDesc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_DESC',
  BroadcastsImportedfromModifiedatAsc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_ASC',
  BroadcastsImportedfromModifiedatDesc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_DESC',
  BroadcastsIsrerunAsc = 'BROADCASTS_ISRERUN_ASC',
  BroadcastsIsrerunDesc = 'BROADCASTS_ISRERUN_DESC',
  BroadcastsModifiedatAsc = 'BROADCASTS_MODIFIEDAT_ASC',
  BroadcastsModifiedatDesc = 'BROADCASTS_MODIFIEDAT_DESC',
  BroadcastsStartAsc = 'BROADCASTS_START_ASC',
  BroadcastsStartDesc = 'BROADCASTS_START_DESC',
  BroadcastsTrackinginfosCreatedatAsc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_ASC',
  BroadcastsTrackinginfosCreatedatDesc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_DESC',
  BroadcastsTrackinginfosModifiedatAsc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_ASC',
  BroadcastsTrackinginfosModifiedatDesc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningCreatedatAsc = 'INITIALSCREENING_CREATEDAT_ASC',
  InitialscreeningCreatedatDesc = 'INITIALSCREENING_CREATEDAT_DESC',
  InitialscreeningEndAsc = 'INITIALSCREENING_END_ASC',
  InitialscreeningEndDesc = 'INITIALSCREENING_END_DESC',
  InitialscreeningImportedfromCreatedatAsc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_ASC',
  InitialscreeningImportedfromCreatedatDesc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_DESC',
  InitialscreeningImportedfromIdentifierAsc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_ASC',
  InitialscreeningImportedfromIdentifierDesc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_DESC',
  InitialscreeningImportedfromModifiedatAsc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_ASC',
  InitialscreeningImportedfromModifiedatDesc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningIsrerunAsc = 'INITIALSCREENING_ISRERUN_ASC',
  InitialscreeningIsrerunDesc = 'INITIALSCREENING_ISRERUN_DESC',
  InitialscreeningModifiedatAsc = 'INITIALSCREENING_MODIFIEDAT_ASC',
  InitialscreeningModifiedatDesc = 'INITIALSCREENING_MODIFIEDAT_DESC',
  InitialscreeningStartAsc = 'INITIALSCREENING_START_ASC',
  InitialscreeningStartDesc = 'INITIALSCREENING_START_DESC',
  InitialscreeningTrackinginfosCreatedatAsc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_ASC',
  InitialscreeningTrackinginfosCreatedatDesc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_DESC',
  InitialscreeningTrackinginfosModifiedatAsc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_ASC',
  InitialscreeningTrackinginfosModifiedatDesc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoMakingOfTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMakingOfTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  makingOf: Scalars['ID'];
};

/** Input parameter for the update mutation of MakingOf */
export type MangoMakingOfUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /** Specifies which CreativeWork a Making Of documents. (de: Making Of von, en: Making Of of) */
  makingOfOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoMakingOfVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  makingOf: Scalars['ID'];
};

export type MangoMyContentInteractionCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Content interacted with. (de: Inhalt, en: Content) */
  content: Scalars['ID'];
  /** The progress of the user in the content in percent (de: Fortschritt, en: Progress) */
  progress?: Maybe<Scalars['Float']>;
  /** Reaction of a user on a content. (de: Reaktion, en: Reaction) */
  reaction?: Maybe<Scalars['ID']>;
};

/** An object with an ID */
export type MangoNode = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
};

/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganization = MangoNode & MangoOrganizationInterface & MangoAgentInterface & {
   __typename?: 'MangoOrganization';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnit = MangoNode & MangoOrganizationalUnitInterface & MangoAgentInterface & MangoOrganizationInterface & {
   __typename?: 'MangoOrganizationalUnit';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** Associates an organizational unit with the organization it is part of. (de: Einheit von, en: unit of) */
  unitOf?: Maybe<MangoOrganizationConnection>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitUnitOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoOrganizationFilter>;
  orderBy?: Maybe<MangoOrganizationSortOrder>;
};

/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /** Associates an organizational unit with the organization it is part of. (de: Einheit von, en: unit of) */
  unitOf?: Maybe<MangoOrganizationConnection>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/**
 * An Organization such as a department or support unit which is part of some
 * larger Organization and only has full recognition within the context of that
 * Organization. In particular the unit would not be regarded as a legal entity in
 * its own right. (de: Organisationseinheit, en: organizational unit)
 */
export type MangoOrganizationalUnitInterfaceUnitOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoOrganizationFilter>;
  orderBy?: Maybe<MangoOrganizationSortOrder>;
};

/** This is a generated connection for Organization */
export type MangoOrganizationConnection = {
   __typename?: 'MangoOrganizationConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoOrganizationInterface>>>;
  edges?: Maybe<Array<Maybe<MangoOrganizationEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoOrganizationConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Organization */
export type MangoOrganizationEdge = {
   __typename?: 'MangoOrganizationEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoOrganizationInterface>;
};

export type MangoOrganizationFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property name */
  name?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
};

/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of organization. (de: Organisation, en: organization) */
export type MangoOrganizationInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

export type MangoOrganizationRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoOrganizationSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

export type MangoPageInfo = {
   __typename?: 'MangoPageInfo';
  /** When paginating forwards, are there more items? This value is always false during backwards pagination. */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? This value is always false during forwards pagination. */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
};

/** Any kind of person. (de: Person, en: person) */
export type MangoPerson = MangoNode & MangoPersonInterface & MangoAgentInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoPerson';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** Selects the algorithm to use for personal recommendations */
export enum MangoPersonalRecommendationAlgorithm {
  StartPage_0 = 'START_PAGE_0',
  StartPage_1 = 'START_PAGE_1',
  ProfilePage_0 = 'PROFILE_PAGE_0',
  ProfilePage_1 = 'PROFILE_PAGE_1',
  ProfilePage_2 = 'PROFILE_PAGE_2',
  NotFound = 'NOT_FOUND'
}

export type MangoPersonExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  person: Scalars['ID'];
};

export type MangoPersonFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  person: Scalars['ID'];
};

/** Any kind of person. (de: Person, en: person) */
export type MangoPersonInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Any kind of person. (de: Person, en: person) */
export type MangoPersonInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** The payload returned from mutations of Person. */
export type MangoPersonPayload = {
   __typename?: 'MangoPersonPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedPerson?: Maybe<MangoPerson>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoPersonRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  person: Scalars['ID'];
};

export type MangoPersonTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  person: Scalars['ID'];
};

/** Input parameter for the update mutation of Person */
export type MangoPersonUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylist = MangoNode & MangoPlaylistInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoGroupingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoSubjectInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoPlaylist';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoPlaylistAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  playlist: Scalars['ID'];
};

/** This is a generated connection for Playlist */
export type MangoPlaylistConnection = {
   __typename?: 'MangoPlaylistConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoPlaylistInterface>>>;
  edges?: Maybe<Array<Maybe<MangoPlaylistEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Playlist */
export type MangoPlaylistCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Playlist */
  type?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoPlaylistCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  playlist: Scalars['ID'];
};

/** This is a generated edge for Playlist */
export type MangoPlaylistEdge = {
   __typename?: 'MangoPlaylistEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoPlaylistInterface>;
};

export type MangoPlaylistEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property slug */
  slug?: Maybe<MangoStringFilter>;
  /** Filter by values of property snippet */
  snippet?: Maybe<MangoStringFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of Playlist */
  term?: Maybe<Scalars['String']>;
};

export type MangoPlaylistFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  playlist: Scalars['ID'];
};

/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An ordered collection of content, often meant to be played in sequence. (de: Playliste, en: playlist) */
export type MangoPlaylistInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** The payload returned from mutations of Playlist. */
export type MangoPlaylistPayload = {
   __typename?: 'MangoPlaylistPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedPlaylist?: Maybe<MangoPlaylist>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoPlaylistProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  playlist: Scalars['ID'];
};

export enum MangoPlaylistSortOrder {
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  SnippetAsc = 'SNIPPET_ASC',
  SnippetDesc = 'SNIPPET_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoPlaylistTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  playlist: Scalars['ID'];
};

export type MangoPlaylistTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  playlist: Scalars['ID'];
};

/** Input parameter for the update mutation of Playlist */
export type MangoPlaylistUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

/** Describes a standardized audio/video format. (de: Profil, en: profile) */
export type MangoProfile = MangoNode & MangoProfileInterface & {
   __typename?: 'MangoProfile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Bitrate in kbit/s. (de: Bitrate, en: bitrate) */
  bitrate?: Maybe<Scalars['Int']>;
  /**  (de: Encoding, en: encoding) */
  encoding?: Maybe<Scalars['String']>;
};

/** This is a generated connection for Profile */
export type MangoProfileConnection = {
   __typename?: 'MangoProfileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoProfileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoProfileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for Profile */
export type MangoProfileEdge = {
   __typename?: 'MangoProfileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoProfileInterface>;
};

export type MangoProfileFilter = {
  /** Filter by values of property bitrate */
  bitrate?: Maybe<MangoIntFilter>;
  /** Filter by values of property encoding */
  encoding?: Maybe<MangoStringFilter>;
};

/** Describes a standardized audio/video format. (de: Profil, en: profile) */
export type MangoProfileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Bitrate in kbit/s. (de: Bitrate, en: bitrate) */
  bitrate?: Maybe<Scalars['Int']>;
  /**  (de: Encoding, en: encoding) */
  encoding?: Maybe<Scalars['String']>;
};

export enum MangoProfileSortOrder {
  BitrateAsc = 'BITRATE_ASC',
  BitrateDesc = 'BITRATE_DESC',
  EncodingAsc = 'ENCODING_ASC',
  EncodingDesc = 'ENCODING_DESC'
}

/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgramme = MangoNode & MangoProgrammeInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoClipInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoGroupingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoProgramme';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /**  (de: Folgennummer, en: episode number) */
  episodeNumber?: Maybe<Scalars['Int']>;
  /** Associates a programme with a series. (de: Episode von, en: episode of) */
  episodeOf?: Maybe<MangoSeriesInterface>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**  (de: hat Rechte zur onDemand Nutzung, en: has onDemand rights ) */
  hasOnDemandRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Associates a programme with its season. (de: in Staffel, en: in season) */
  inSeason?: Maybe<MangoSeasonInterface>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**  (de: Beitrag, en: item) */
  items?: Maybe<MangoItemConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  /** Get this and other Programmes in the same Series, sorted by their episodeNumber or versionFrom date. */
  siblings: Array<Maybe<MangoSiblingProgrammeEntry>>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
  externalIds?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeItemsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoItemFilter>;
  orderBy?: Maybe<MangoItemSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeSiblingsArgs = {
  next?: Maybe<Scalars['Int']>;
  previous?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
};

export type MangoProgrammeAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  programme: Scalars['ID'];
};

/** This is a generated connection for Programme */
export type MangoProgrammeConnection = {
   __typename?: 'MangoProgrammeConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoProgrammeInterface>>>;
  edges?: Maybe<Array<Maybe<MangoProgrammeEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoProgrammeConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of Programme */
export type MangoProgrammeCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Programme */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /**  (de: Folgennummer, en: episode number) */
  episodeNumber?: Maybe<Scalars['Int']>;
  /** Associates a programme with a series. (de: Episode von, en: episode of) */
  episodeOf?: Maybe<Scalars['ID']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**  (de: hat Rechte zur onDemand Nutzung, en: has onDemand rights ) */
  hasOnDemandRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Associates a programme with its season. (de: in Staffel, en: in season) */
  inSeason?: Maybe<Scalars['ID']>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoProgrammeCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  programme: Scalars['ID'];
};

/** This is a generated edge for Programme */
export type MangoProgrammeEdge = {
   __typename?: 'MangoProgrammeEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoProgrammeInterface>;
};

export type MangoProgrammeEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property broadcasts */
  broadcasts?: Maybe<MangoBroadcastEventConnectionFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property episodeNumber */
  episodeNumber?: Maybe<MangoIntFilter>;
  /** Filter by values of property episodeOf */
  episodeOf?: Maybe<MangoSeriesRelationFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property hasOnDemandRights */
  hasOnDemandRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property inSeason */
  inSeason?: Maybe<MangoSeasonRelationFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of Programme */
  term?: Maybe<Scalars['String']>;
};

export type MangoProgrammeFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  programme: Scalars['ID'];
};

/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /**  (de: Folgennummer, en: episode number) */
  episodeNumber?: Maybe<Scalars['Int']>;
  /** Associates a programme with a series. (de: Episode von, en: episode of) */
  episodeOf?: Maybe<MangoSeriesInterface>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**  (de: hat Rechte zur onDemand Nutzung, en: has onDemand rights ) */
  hasOnDemandRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Associates a programme with its season. (de: in Staffel, en: in season) */
  inSeason?: Maybe<MangoSeasonInterface>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**  (de: Beitrag, en: item) */
  items?: Maybe<MangoItemConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  /** Get this and other Programmes in the same Series, sorted by their episodeNumber or versionFrom date. */
  siblings: Array<Maybe<MangoSiblingProgrammeEntry>>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceItemsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoItemFilter>;
  orderBy?: Maybe<MangoItemSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};


/** A clip that is part of a series and is usually composed of n smaller items. (de: Sendung, en: programme) */
export type MangoProgrammeInterfaceSiblingsArgs = {
  next?: Maybe<Scalars['Int']>;
  previous?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
};

/** The payload returned from mutations of Programme. */
export type MangoProgrammePayload = {
   __typename?: 'MangoProgrammePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedProgramme?: Maybe<MangoProgramme>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoProgrammeProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  programme: Scalars['ID'];
};

export type MangoProgrammeSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  programme: Scalars['ID'];
};

export enum MangoProgrammeSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  BroadcastsCreatedatAsc = 'BROADCASTS_CREATEDAT_ASC',
  BroadcastsCreatedatDesc = 'BROADCASTS_CREATEDAT_DESC',
  BroadcastsEndAsc = 'BROADCASTS_END_ASC',
  BroadcastsEndDesc = 'BROADCASTS_END_DESC',
  BroadcastsImportedfromCreatedatAsc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_ASC',
  BroadcastsImportedfromCreatedatDesc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_DESC',
  BroadcastsImportedfromIdentifierAsc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_ASC',
  BroadcastsImportedfromIdentifierDesc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_DESC',
  BroadcastsImportedfromModifiedatAsc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_ASC',
  BroadcastsImportedfromModifiedatDesc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_DESC',
  BroadcastsIsrerunAsc = 'BROADCASTS_ISRERUN_ASC',
  BroadcastsIsrerunDesc = 'BROADCASTS_ISRERUN_DESC',
  BroadcastsModifiedatAsc = 'BROADCASTS_MODIFIEDAT_ASC',
  BroadcastsModifiedatDesc = 'BROADCASTS_MODIFIEDAT_DESC',
  BroadcastsStartAsc = 'BROADCASTS_START_ASC',
  BroadcastsStartDesc = 'BROADCASTS_START_DESC',
  BroadcastsTrackinginfosCreatedatAsc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_ASC',
  BroadcastsTrackinginfosCreatedatDesc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_DESC',
  BroadcastsTrackinginfosModifiedatAsc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_ASC',
  BroadcastsTrackinginfosModifiedatDesc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  EpisodenumberAsc = 'EPISODENUMBER_ASC',
  EpisodenumberDesc = 'EPISODENUMBER_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  HasondemandrightsAsc = 'HASONDEMANDRIGHTS_ASC',
  HasondemandrightsDesc = 'HASONDEMANDRIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningCreatedatAsc = 'INITIALSCREENING_CREATEDAT_ASC',
  InitialscreeningCreatedatDesc = 'INITIALSCREENING_CREATEDAT_DESC',
  InitialscreeningEndAsc = 'INITIALSCREENING_END_ASC',
  InitialscreeningEndDesc = 'INITIALSCREENING_END_DESC',
  InitialscreeningImportedfromCreatedatAsc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_ASC',
  InitialscreeningImportedfromCreatedatDesc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_DESC',
  InitialscreeningImportedfromIdentifierAsc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_ASC',
  InitialscreeningImportedfromIdentifierDesc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_DESC',
  InitialscreeningImportedfromModifiedatAsc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_ASC',
  InitialscreeningImportedfromModifiedatDesc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningIsrerunAsc = 'INITIALSCREENING_ISRERUN_ASC',
  InitialscreeningIsrerunDesc = 'INITIALSCREENING_ISRERUN_DESC',
  InitialscreeningModifiedatAsc = 'INITIALSCREENING_MODIFIEDAT_ASC',
  InitialscreeningModifiedatDesc = 'INITIALSCREENING_MODIFIEDAT_DESC',
  InitialscreeningStartAsc = 'INITIALSCREENING_START_ASC',
  InitialscreeningStartDesc = 'INITIALSCREENING_START_DESC',
  InitialscreeningTrackinginfosCreatedatAsc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_ASC',
  InitialscreeningTrackinginfosCreatedatDesc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_DESC',
  InitialscreeningTrackinginfosModifiedatAsc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_ASC',
  InitialscreeningTrackinginfosModifiedatDesc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoProgrammeTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  programme: Scalars['ID'];
};

export type MangoProgrammeTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  programme: Scalars['ID'];
};

/** Input parameter for the update mutation of Programme */
export type MangoProgrammeUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /**  (de: Folgennummer, en: episode number) */
  episodeNumber?: Maybe<Scalars['Int']>;
  /** Associates a programme with a series. (de: Episode von, en: episode of) */
  episodeOf?: Maybe<Scalars['ID']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**  (de: hat Rechte zur onDemand Nutzung, en: has onDemand rights ) */
  hasOnDemandRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Associates a programme with its season. (de: in Staffel, en: in season) */
  inSeason?: Maybe<Scalars['ID']>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoProgrammeVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  programme: Scalars['ID'];
};

/** Any kind of publication event in any medium. (de: Veröffentlichungsereignis, en: publication event) */
export type MangoPublicationEvent = MangoNode & MangoPublicationEventInterface & MangoWritableThingInterface & {
   __typename?: 'MangoPublicationEvent';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Veröffentlichung von, en: publication of) */
  publicationOf?: Maybe<MangoCreativeWorkInterface>;
  /** Associates a publication event with the service of publication. () */
  publishedBy?: Maybe<MangoPublicationServiceInterface>;
};

/** This is a generated connection for PublicationEvent */
export type MangoPublicationEventConnection = {
   __typename?: 'MangoPublicationEventConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoPublicationEventInterface>>>;
  edges?: Maybe<Array<Maybe<MangoPublicationEventEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoPublicationEventConnectionFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publishedBy */
  publishedBy?: Maybe<MangoPublicationServiceRelationFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** This is a generated edge for PublicationEvent */
export type MangoPublicationEventEdge = {
   __typename?: 'MangoPublicationEventEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoPublicationEventInterface>;
};

export type MangoPublicationEventFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property publishedBy */
  publishedBy?: Maybe<MangoPublicationServiceRelationFilter>;
};

/** Any kind of publication event in any medium. (de: Veröffentlichungsereignis, en: publication event) */
export type MangoPublicationEventInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Veröffentlichung von, en: publication of) */
  publicationOf?: Maybe<MangoCreativeWorkInterface>;
  /** Associates a publication event with the service of publication. () */
  publishedBy?: Maybe<MangoPublicationServiceInterface>;
};

/** The payload returned from mutations of PublicationEvent. */
export type MangoPublicationEventPayload = {
   __typename?: 'MangoPublicationEventPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedPublicationEvent?: Maybe<MangoPublicationEvent>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoPublicationEventSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of PublicationEvent */
export type MangoPublicationEventUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a publication event with the service of publication. () */
  publishedBy?: Maybe<Scalars['ID']>;
};

/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationService = MangoNode & MangoPublicationServiceInterface & MangoAgentInterface & MangoOrganizationInterface & {
   __typename?: 'MangoPublicationService';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * A fallback image that can be used to advertise creative works (published by
   * the PublicationService) which do not have any teaser image. (de: Fallback
   * Teaser Bild, en: fallback teaser image)
   */
  fallbackTeaserImage?: Maybe<MangoImageInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a publication service with the organization owning or operating it. (de: betrieben von, en: operated by) */
  operatedBy?: Maybe<MangoOrganizationInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * A fallback image that can be used to advertise creative works (published by
   * the PublicationService) which do not have any teaser image. (de: Fallback
   * Teaser Bild, en: fallback teaser image)
   */
  fallbackTeaserImage?: Maybe<MangoImageInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a publication service with the organization owning or operating it. (de: betrieben von, en: operated by) */
  operatedBy?: Maybe<MangoOrganizationInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind of publication service in any medium. (de: Veröffentlichungsdienst, en: publication service) */
export type MangoPublicationServiceInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

export type MangoPublicationServiceRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

/**  (not documented) */
export type MangoPublishableThing = MangoNode & MangoPublishableThingInterface & {
   __typename?: 'MangoPublishableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
};

/**  (not documented) */
export type MangoPublishableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
};

/** Type of emotional Reaction. (de: Art der Reaktion, en: Type of Reaction) */
export type MangoReactionType = MangoNode & MangoReactionTypeInterface & {
   __typename?: 'MangoReactionType';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** This is a generated connection for ReactionType */
export type MangoReactionTypeConnection = {
   __typename?: 'MangoReactionTypeConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoReactionTypeInterface>>>;
  edges?: Maybe<Array<Maybe<MangoReactionTypeEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for ReactionType */
export type MangoReactionTypeEdge = {
   __typename?: 'MangoReactionTypeEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoReactionTypeInterface>;
};

export type MangoReactionTypeFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Type of emotional Reaction. (de: Art der Reaktion, en: Type of Reaction) */
export type MangoReactionTypeInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoReactionTypeRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoReactionTypeSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

export type MangoRecSysResultConnection = {
   __typename?: 'MangoRecSysResultConnection';
  count?: Maybe<Scalars['Int']>;
  /** To be used in the PEACH feedback loop when tracking to pipe. */
  recommendationId?: Maybe<Scalars['String']>;
  /** Algorithm used to calculate the returned items. */
  algorithm?: Maybe<Scalars['String']>;
  /** To be used as the title under which the recommended items are presented to the end user. */
  presentationTitle?: Maybe<Scalars['String']>;
  /**
   * Is the used algorithm just a fallback for the requested algorithm? A fallbacks
   * is used, when the requested algorithm throws an error or simply doesn't return any items.
   */
  fallbackUsed?: Maybe<Scalars['Boolean']>;
  pageInfo?: Maybe<MangoPageInfo>;
  nodes?: Maybe<Array<Maybe<MangoClipInterface>>>;
  edges?: Maybe<Array<Maybe<MangoRecSysResultEdge>>>;
};

export type MangoRecSysResultEdge = {
   __typename?: 'MangoRecSysResultEdge';
  cursor: Scalars['String'];
  score: Scalars['Float'];
  node?: Maybe<MangoClipInterface>;
};

export type MangoRecSysResultFilter = {
  audioOnly?: Maybe<MangoBooleanFilter>;
  withEssences?: Maybe<MangoBooleanFilter>;
};

export type MangoRemoteIdFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['ID']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['ID']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoRemoveAllMyBookmarksInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type MangoRemoveFromMyBookmarksInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the clip to remove from the bookmarks. */
  id: Scalars['ID'];
};

export type MangoRootMutation = {
   __typename?: 'MangoRootMutation';
  /** Create a new AudioFile object. */
  createAudioFile?: Maybe<MangoAudioFilePayload>;
  /** Update a AudioFile object. */
  updateAudioFile?: Maybe<MangoAudioFilePayload>;
  addAccessibleInToAudioFile?: Maybe<MangoAudioFilePayload>;
  removeAccessibleInFromAudioFile?: Maybe<MangoAudioFilePayload>;
  removeAllAccessibleInFromAudioFile?: Maybe<MangoAudioFilePayload>;
  /** Create a new BannerContent object. */
  createBannerContent?: Maybe<MangoBannerContentPayload>;
  /** Upsert a BannerContent object. */
  upsertBannerContent?: Maybe<MangoBannerContentPayload>;
  /** Update a BannerContent object. */
  updateBannerContent?: Maybe<MangoBannerContentPayload>;
  /** Create a new BestOf object. */
  createBestOf?: Maybe<MangoBestOfPayload>;
  /** Update a BestOf object. */
  updateBestOf?: Maybe<MangoBestOfPayload>;
  addAudienceToBestOf?: Maybe<MangoBestOfPayload>;
  removeAudienceFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllAudiencesFromBestOf?: Maybe<MangoBestOfPayload>;
  addAudioFileToBestOf?: Maybe<MangoBestOfPayload>;
  removeAudioFileFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllAudioFilesFromBestOf?: Maybe<MangoBestOfPayload>;
  addAuthorToBestOf?: Maybe<MangoBestOfPayload>;
  removeAuthorFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllAuthorsFromBestOf?: Maybe<MangoBestOfPayload>;
  addBestOfOfToBestOf?: Maybe<MangoBestOfPayload>;
  removeBestOfOfFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllBestOfOfFromBestOf?: Maybe<MangoBestOfPayload>;
  /** @deprecated Deprecated */
  addCaptionFileToBestOf?: Maybe<MangoBestOfPayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromBestOf?: Maybe<MangoBestOfPayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromBestOf?: Maybe<MangoBestOfPayload>;
  addCategoryToBestOf?: Maybe<MangoBestOfPayload>;
  removeCategoryFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllCategoriesFromBestOf?: Maybe<MangoBestOfPayload>;
  addCreditToBestOf?: Maybe<MangoBestOfPayload>;
  removeCreditFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllCreditsFromBestOf?: Maybe<MangoBestOfPayload>;
  addEssenceToBestOf?: Maybe<MangoBestOfPayload>;
  removeEssenceFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllEssencesFromBestOf?: Maybe<MangoBestOfPayload>;
  addExecutiveProducerToBestOf?: Maybe<MangoBestOfPayload>;
  removeExecutiveProducerFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllExecutiveProducersFromBestOf?: Maybe<MangoBestOfPayload>;
  addExternalURLToBestOf?: Maybe<MangoBestOfPayload>;
  removeExternalURLFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllExternalURLSFromBestOf?: Maybe<MangoBestOfPayload>;
  addExtraOfToBestOf?: Maybe<MangoBestOfPayload>;
  removeExtraOfFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllExtraOfFromBestOf?: Maybe<MangoBestOfPayload>;
  addFacebookAccountToBestOf?: Maybe<MangoBestOfPayload>;
  removeFacebookAccountFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllFacebookAccountsFromBestOf?: Maybe<MangoBestOfPayload>;
  addFormatToBestOf?: Maybe<MangoBestOfPayload>;
  removeFormatFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllFormatsFromBestOf?: Maybe<MangoBestOfPayload>;
  addGenreToBestOf?: Maybe<MangoBestOfPayload>;
  removeGenreFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllGenresFromBestOf?: Maybe<MangoBestOfPayload>;
  addProducingDepartmentToBestOf?: Maybe<MangoBestOfPayload>;
  removeProducingDepartmentFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllProducingDepartmentsFromBestOf?: Maybe<MangoBestOfPayload>;
  addRelatedLinkToBestOf?: Maybe<MangoBestOfPayload>;
  removeRelatedLinkFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllRelatedLinksFromBestOf?: Maybe<MangoBestOfPayload>;
  addSignLanguageEssenceToBestOf?: Maybe<MangoBestOfPayload>;
  removeSignLanguageEssenceFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllSignLanguageEssencesFromBestOf?: Maybe<MangoBestOfPayload>;
  addTagToBestOf?: Maybe<MangoBestOfPayload>;
  removeTagFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllTagsFromBestOf?: Maybe<MangoBestOfPayload>;
  addTeaserImageToBestOf?: Maybe<MangoBestOfPayload>;
  removeTeaserImageFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllTeaserImagesFromBestOf?: Maybe<MangoBestOfPayload>;
  addTwitterAccountToBestOf?: Maybe<MangoBestOfPayload>;
  removeTwitterAccountFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllTwitterAccountsFromBestOf?: Maybe<MangoBestOfPayload>;
  addVideoFileToBestOf?: Maybe<MangoBestOfPayload>;
  removeVideoFileFromBestOf?: Maybe<MangoBestOfPayload>;
  removeAllVideoFilesFromBestOf?: Maybe<MangoBestOfPayload>;
  /** Create a new Board object. */
  createBoard?: Maybe<MangoBoardPayload>;
  /** Update a Board object. */
  updateBoard?: Maybe<MangoBoardPayload>;
  addAudienceToBoard?: Maybe<MangoBoardPayload>;
  removeAudienceFromBoard?: Maybe<MangoBoardPayload>;
  removeAllAudiencesFromBoard?: Maybe<MangoBoardPayload>;
  addAuthorToBoard?: Maybe<MangoBoardPayload>;
  removeAuthorFromBoard?: Maybe<MangoBoardPayload>;
  removeAllAuthorsFromBoard?: Maybe<MangoBoardPayload>;
  addCategoryToBoard?: Maybe<MangoBoardPayload>;
  removeCategoryFromBoard?: Maybe<MangoBoardPayload>;
  removeAllCategoriesFromBoard?: Maybe<MangoBoardPayload>;
  addCreditToBoard?: Maybe<MangoBoardPayload>;
  removeCreditFromBoard?: Maybe<MangoBoardPayload>;
  removeAllCreditsFromBoard?: Maybe<MangoBoardPayload>;
  addEssenceToBoard?: Maybe<MangoBoardPayload>;
  removeEssenceFromBoard?: Maybe<MangoBoardPayload>;
  removeAllEssencesFromBoard?: Maybe<MangoBoardPayload>;
  addExecutiveProducerToBoard?: Maybe<MangoBoardPayload>;
  removeExecutiveProducerFromBoard?: Maybe<MangoBoardPayload>;
  removeAllExecutiveProducersFromBoard?: Maybe<MangoBoardPayload>;
  addExternalURLToBoard?: Maybe<MangoBoardPayload>;
  removeExternalURLFromBoard?: Maybe<MangoBoardPayload>;
  removeAllExternalURLSFromBoard?: Maybe<MangoBoardPayload>;
  addFacebookAccountToBoard?: Maybe<MangoBoardPayload>;
  removeFacebookAccountFromBoard?: Maybe<MangoBoardPayload>;
  removeAllFacebookAccountsFromBoard?: Maybe<MangoBoardPayload>;
  addFormatToBoard?: Maybe<MangoBoardPayload>;
  removeFormatFromBoard?: Maybe<MangoBoardPayload>;
  removeAllFormatsFromBoard?: Maybe<MangoBoardPayload>;
  addGenreToBoard?: Maybe<MangoBoardPayload>;
  removeGenreFromBoard?: Maybe<MangoBoardPayload>;
  removeAllGenresFromBoard?: Maybe<MangoBoardPayload>;
  addProducingDepartmentToBoard?: Maybe<MangoBoardPayload>;
  removeProducingDepartmentFromBoard?: Maybe<MangoBoardPayload>;
  removeAllProducingDepartmentsFromBoard?: Maybe<MangoBoardPayload>;
  addRelatedLinkToBoard?: Maybe<MangoBoardPayload>;
  removeRelatedLinkFromBoard?: Maybe<MangoBoardPayload>;
  removeAllRelatedLinksFromBoard?: Maybe<MangoBoardPayload>;
  addTagToBoard?: Maybe<MangoBoardPayload>;
  removeTagFromBoard?: Maybe<MangoBoardPayload>;
  removeAllTagsFromBoard?: Maybe<MangoBoardPayload>;
  addTeaserImageToBoard?: Maybe<MangoBoardPayload>;
  removeTeaserImageFromBoard?: Maybe<MangoBoardPayload>;
  removeAllTeaserImagesFromBoard?: Maybe<MangoBoardPayload>;
  addTwitterAccountToBoard?: Maybe<MangoBoardPayload>;
  removeTwitterAccountFromBoard?: Maybe<MangoBoardPayload>;
  removeAllTwitterAccountsFromBoard?: Maybe<MangoBoardPayload>;
  /** Update a BroadcastEvent object. */
  updateBroadcastEvent?: Maybe<MangoBroadcastEventPayload>;
  addBroadcastedOnToBroadcastEvent?: Maybe<MangoBroadcastEventPayload>;
  removeBroadcastedOnFromBroadcastEvent?: Maybe<MangoBroadcastEventPayload>;
  removeAllBroadcastedOnFromBroadcastEvent?: Maybe<MangoBroadcastEventPayload>;
  /** Create a new BroadcastService object. */
  createBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  /** Upsert a BroadcastService object. */
  upsertBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  /** Update a BroadcastService object. */
  updateBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  addExternalURLToBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  removeExternalURLFromBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  removeAllExternalURLSFromBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  addFacebookAccountToBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  removeFacebookAccountFromBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  removeAllFacebookAccountsFromBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  addTwitterAccountToBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  removeTwitterAccountFromBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  removeAllTwitterAccountsFromBroadcastService?: Maybe<MangoBroadcastServicePayload>;
  /** Update a Caption object. */
  updateCaption?: Maybe<MangoCaptionPayload>;
  addTimedTextFileToCaption?: Maybe<MangoCaptionPayload>;
  removeTimedTextFileFromCaption?: Maybe<MangoCaptionPayload>;
  removeAllTimedTextFilesFromCaption?: Maybe<MangoCaptionPayload>;
  /** Create a new Clip object. */
  createClip?: Maybe<MangoClipPayload>;
  /** Update a Clip object. */
  updateClip?: Maybe<MangoClipPayload>;
  addAudienceToClip?: Maybe<MangoClipPayload>;
  removeAudienceFromClip?: Maybe<MangoClipPayload>;
  removeAllAudiencesFromClip?: Maybe<MangoClipPayload>;
  addAudioFileToClip?: Maybe<MangoClipPayload>;
  removeAudioFileFromClip?: Maybe<MangoClipPayload>;
  removeAllAudioFilesFromClip?: Maybe<MangoClipPayload>;
  addAuthorToClip?: Maybe<MangoClipPayload>;
  removeAuthorFromClip?: Maybe<MangoClipPayload>;
  removeAllAuthorsFromClip?: Maybe<MangoClipPayload>;
  /** @deprecated Deprecated */
  addCaptionFileToClip?: Maybe<MangoClipPayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromClip?: Maybe<MangoClipPayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromClip?: Maybe<MangoClipPayload>;
  addCategoryToClip?: Maybe<MangoClipPayload>;
  removeCategoryFromClip?: Maybe<MangoClipPayload>;
  removeAllCategoriesFromClip?: Maybe<MangoClipPayload>;
  addCreditToClip?: Maybe<MangoClipPayload>;
  removeCreditFromClip?: Maybe<MangoClipPayload>;
  removeAllCreditsFromClip?: Maybe<MangoClipPayload>;
  addEssenceToClip?: Maybe<MangoClipPayload>;
  removeEssenceFromClip?: Maybe<MangoClipPayload>;
  removeAllEssencesFromClip?: Maybe<MangoClipPayload>;
  addExecutiveProducerToClip?: Maybe<MangoClipPayload>;
  removeExecutiveProducerFromClip?: Maybe<MangoClipPayload>;
  removeAllExecutiveProducersFromClip?: Maybe<MangoClipPayload>;
  addExternalURLToClip?: Maybe<MangoClipPayload>;
  removeExternalURLFromClip?: Maybe<MangoClipPayload>;
  removeAllExternalURLSFromClip?: Maybe<MangoClipPayload>;
  addFacebookAccountToClip?: Maybe<MangoClipPayload>;
  removeFacebookAccountFromClip?: Maybe<MangoClipPayload>;
  removeAllFacebookAccountsFromClip?: Maybe<MangoClipPayload>;
  addFormatToClip?: Maybe<MangoClipPayload>;
  removeFormatFromClip?: Maybe<MangoClipPayload>;
  removeAllFormatsFromClip?: Maybe<MangoClipPayload>;
  addGenreToClip?: Maybe<MangoClipPayload>;
  removeGenreFromClip?: Maybe<MangoClipPayload>;
  removeAllGenresFromClip?: Maybe<MangoClipPayload>;
  addProducingDepartmentToClip?: Maybe<MangoClipPayload>;
  removeProducingDepartmentFromClip?: Maybe<MangoClipPayload>;
  removeAllProducingDepartmentsFromClip?: Maybe<MangoClipPayload>;
  addRelatedLinkToClip?: Maybe<MangoClipPayload>;
  removeRelatedLinkFromClip?: Maybe<MangoClipPayload>;
  removeAllRelatedLinksFromClip?: Maybe<MangoClipPayload>;
  addSignLanguageEssenceToClip?: Maybe<MangoClipPayload>;
  removeSignLanguageEssenceFromClip?: Maybe<MangoClipPayload>;
  removeAllSignLanguageEssencesFromClip?: Maybe<MangoClipPayload>;
  addTagToClip?: Maybe<MangoClipPayload>;
  removeTagFromClip?: Maybe<MangoClipPayload>;
  removeAllTagsFromClip?: Maybe<MangoClipPayload>;
  addTeaserImageToClip?: Maybe<MangoClipPayload>;
  removeTeaserImageFromClip?: Maybe<MangoClipPayload>;
  removeAllTeaserImagesFromClip?: Maybe<MangoClipPayload>;
  addTwitterAccountToClip?: Maybe<MangoClipPayload>;
  removeTwitterAccountFromClip?: Maybe<MangoClipPayload>;
  removeAllTwitterAccountsFromClip?: Maybe<MangoClipPayload>;
  addVideoFileToClip?: Maybe<MangoClipPayload>;
  removeVideoFileFromClip?: Maybe<MangoClipPayload>;
  removeAllVideoFilesFromClip?: Maybe<MangoClipPayload>;
  /** Create a new ContentInteraction object. */
  createContentInteraction?: Maybe<MangoContentInteractionPayload>;
  /** Upsert a ContentInteraction object. */
  upsertContentInteraction?: Maybe<MangoContentInteractionPayload>;
  /** Update a ContentInteraction object. */
  updateContentInteraction?: Maybe<MangoContentInteractionPayload>;
  /** Create a new ElementContent object. */
  createElementContent?: Maybe<MangoElementContentPayload>;
  /** Upsert a ElementContent object. */
  upsertElementContent?: Maybe<MangoElementContentPayload>;
  /** Update a ElementContent object. */
  updateElementContent?: Maybe<MangoElementContentPayload>;
  /** Create a new EndUser object. */
  createEndUser?: Maybe<MangoEndUserPayload>;
  /** Update a EndUser object. */
  updateEndUser?: Maybe<MangoEndUserPayload>;
  addBookmarkToEndUser?: Maybe<MangoEndUserPayload>;
  removeBookmarkFromEndUser?: Maybe<MangoEndUserPayload>;
  removeAllBookmarksFromEndUser?: Maybe<MangoEndUserPayload>;
  /** @deprecated Deprecated */
  addDeviceToEndUser?: Maybe<MangoEndUserPayload>;
  /** @deprecated Deprecated */
  removeDeviceFromEndUser?: Maybe<MangoEndUserPayload>;
  /** @deprecated Deprecated */
  removeAllDevicesFromEndUser?: Maybe<MangoEndUserPayload>;
  addExternalURLToEndUser?: Maybe<MangoEndUserPayload>;
  removeExternalURLFromEndUser?: Maybe<MangoEndUserPayload>;
  removeAllExternalURLSFromEndUser?: Maybe<MangoEndUserPayload>;
  addFacebookAccountToEndUser?: Maybe<MangoEndUserPayload>;
  removeFacebookAccountFromEndUser?: Maybe<MangoEndUserPayload>;
  removeAllFacebookAccountsFromEndUser?: Maybe<MangoEndUserPayload>;
  addTwitterAccountToEndUser?: Maybe<MangoEndUserPayload>;
  removeTwitterAccountFromEndUser?: Maybe<MangoEndUserPayload>;
  removeAllTwitterAccountsFromEndUser?: Maybe<MangoEndUserPayload>;
  /** Update a ExternalURL object. */
  updateExternalURL?: Maybe<MangoExternalUrlPayload>;
  /** Create a new Extra object. */
  createExtra?: Maybe<MangoExtraPayload>;
  /** Update a Extra object. */
  updateExtra?: Maybe<MangoExtraPayload>;
  addAudienceToExtra?: Maybe<MangoExtraPayload>;
  removeAudienceFromExtra?: Maybe<MangoExtraPayload>;
  removeAllAudiencesFromExtra?: Maybe<MangoExtraPayload>;
  addAudioFileToExtra?: Maybe<MangoExtraPayload>;
  removeAudioFileFromExtra?: Maybe<MangoExtraPayload>;
  removeAllAudioFilesFromExtra?: Maybe<MangoExtraPayload>;
  addAuthorToExtra?: Maybe<MangoExtraPayload>;
  removeAuthorFromExtra?: Maybe<MangoExtraPayload>;
  removeAllAuthorsFromExtra?: Maybe<MangoExtraPayload>;
  /** @deprecated Deprecated */
  addCaptionFileToExtra?: Maybe<MangoExtraPayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromExtra?: Maybe<MangoExtraPayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromExtra?: Maybe<MangoExtraPayload>;
  addCategoryToExtra?: Maybe<MangoExtraPayload>;
  removeCategoryFromExtra?: Maybe<MangoExtraPayload>;
  removeAllCategoriesFromExtra?: Maybe<MangoExtraPayload>;
  addCreditToExtra?: Maybe<MangoExtraPayload>;
  removeCreditFromExtra?: Maybe<MangoExtraPayload>;
  removeAllCreditsFromExtra?: Maybe<MangoExtraPayload>;
  addEssenceToExtra?: Maybe<MangoExtraPayload>;
  removeEssenceFromExtra?: Maybe<MangoExtraPayload>;
  removeAllEssencesFromExtra?: Maybe<MangoExtraPayload>;
  addExecutiveProducerToExtra?: Maybe<MangoExtraPayload>;
  removeExecutiveProducerFromExtra?: Maybe<MangoExtraPayload>;
  removeAllExecutiveProducersFromExtra?: Maybe<MangoExtraPayload>;
  addExternalURLToExtra?: Maybe<MangoExtraPayload>;
  removeExternalURLFromExtra?: Maybe<MangoExtraPayload>;
  removeAllExternalURLSFromExtra?: Maybe<MangoExtraPayload>;
  addExtraOfToExtra?: Maybe<MangoExtraPayload>;
  removeExtraOfFromExtra?: Maybe<MangoExtraPayload>;
  removeAllExtraOfFromExtra?: Maybe<MangoExtraPayload>;
  addFacebookAccountToExtra?: Maybe<MangoExtraPayload>;
  removeFacebookAccountFromExtra?: Maybe<MangoExtraPayload>;
  removeAllFacebookAccountsFromExtra?: Maybe<MangoExtraPayload>;
  addFormatToExtra?: Maybe<MangoExtraPayload>;
  removeFormatFromExtra?: Maybe<MangoExtraPayload>;
  removeAllFormatsFromExtra?: Maybe<MangoExtraPayload>;
  addGenreToExtra?: Maybe<MangoExtraPayload>;
  removeGenreFromExtra?: Maybe<MangoExtraPayload>;
  removeAllGenresFromExtra?: Maybe<MangoExtraPayload>;
  addProducingDepartmentToExtra?: Maybe<MangoExtraPayload>;
  removeProducingDepartmentFromExtra?: Maybe<MangoExtraPayload>;
  removeAllProducingDepartmentsFromExtra?: Maybe<MangoExtraPayload>;
  addRelatedLinkToExtra?: Maybe<MangoExtraPayload>;
  removeRelatedLinkFromExtra?: Maybe<MangoExtraPayload>;
  removeAllRelatedLinksFromExtra?: Maybe<MangoExtraPayload>;
  addSignLanguageEssenceToExtra?: Maybe<MangoExtraPayload>;
  removeSignLanguageEssenceFromExtra?: Maybe<MangoExtraPayload>;
  removeAllSignLanguageEssencesFromExtra?: Maybe<MangoExtraPayload>;
  addTagToExtra?: Maybe<MangoExtraPayload>;
  removeTagFromExtra?: Maybe<MangoExtraPayload>;
  removeAllTagsFromExtra?: Maybe<MangoExtraPayload>;
  addTeaserImageToExtra?: Maybe<MangoExtraPayload>;
  removeTeaserImageFromExtra?: Maybe<MangoExtraPayload>;
  removeAllTeaserImagesFromExtra?: Maybe<MangoExtraPayload>;
  addTwitterAccountToExtra?: Maybe<MangoExtraPayload>;
  removeTwitterAccountFromExtra?: Maybe<MangoExtraPayload>;
  removeAllTwitterAccountsFromExtra?: Maybe<MangoExtraPayload>;
  addVideoFileToExtra?: Maybe<MangoExtraPayload>;
  removeVideoFileFromExtra?: Maybe<MangoExtraPayload>;
  removeAllVideoFilesFromExtra?: Maybe<MangoExtraPayload>;
  /** Update a FacebookAccount object. */
  updateFacebookAccount?: Maybe<MangoFacebookAccountPayload>;
  /** Update a File object. */
  updateFile?: Maybe<MangoFilePayload>;
  addAccessibleInToFile?: Maybe<MangoFilePayload>;
  removeAccessibleInFromFile?: Maybe<MangoFilePayload>;
  removeAllAccessibleInFromFile?: Maybe<MangoFilePayload>;
  /** Create a new Image object. */
  createImage?: Maybe<MangoImagePayload>;
  /** Update a Image object. */
  updateImage?: Maybe<MangoImagePayload>;
  addAudienceToImage?: Maybe<MangoImagePayload>;
  removeAudienceFromImage?: Maybe<MangoImagePayload>;
  removeAllAudiencesFromImage?: Maybe<MangoImagePayload>;
  addAuthorToImage?: Maybe<MangoImagePayload>;
  removeAuthorFromImage?: Maybe<MangoImagePayload>;
  removeAllAuthorsFromImage?: Maybe<MangoImagePayload>;
  addCategoryToImage?: Maybe<MangoImagePayload>;
  removeCategoryFromImage?: Maybe<MangoImagePayload>;
  removeAllCategoriesFromImage?: Maybe<MangoImagePayload>;
  addCreditToImage?: Maybe<MangoImagePayload>;
  removeCreditFromImage?: Maybe<MangoImagePayload>;
  removeAllCreditsFromImage?: Maybe<MangoImagePayload>;
  addEssenceToImage?: Maybe<MangoImagePayload>;
  removeEssenceFromImage?: Maybe<MangoImagePayload>;
  removeAllEssencesFromImage?: Maybe<MangoImagePayload>;
  addExecutiveProducerToImage?: Maybe<MangoImagePayload>;
  removeExecutiveProducerFromImage?: Maybe<MangoImagePayload>;
  removeAllExecutiveProducersFromImage?: Maybe<MangoImagePayload>;
  addExternalURLToImage?: Maybe<MangoImagePayload>;
  removeExternalURLFromImage?: Maybe<MangoImagePayload>;
  removeAllExternalURLSFromImage?: Maybe<MangoImagePayload>;
  addFacebookAccountToImage?: Maybe<MangoImagePayload>;
  removeFacebookAccountFromImage?: Maybe<MangoImagePayload>;
  removeAllFacebookAccountsFromImage?: Maybe<MangoImagePayload>;
  addFormatToImage?: Maybe<MangoImagePayload>;
  removeFormatFromImage?: Maybe<MangoImagePayload>;
  removeAllFormatsFromImage?: Maybe<MangoImagePayload>;
  addGenreToImage?: Maybe<MangoImagePayload>;
  removeGenreFromImage?: Maybe<MangoImagePayload>;
  removeAllGenresFromImage?: Maybe<MangoImagePayload>;
  addImageFileToImage?: Maybe<MangoImagePayload>;
  removeImageFileFromImage?: Maybe<MangoImagePayload>;
  removeAllImageFilesFromImage?: Maybe<MangoImagePayload>;
  addProducingDepartmentToImage?: Maybe<MangoImagePayload>;
  removeProducingDepartmentFromImage?: Maybe<MangoImagePayload>;
  removeAllProducingDepartmentsFromImage?: Maybe<MangoImagePayload>;
  addRelatedLinkToImage?: Maybe<MangoImagePayload>;
  removeRelatedLinkFromImage?: Maybe<MangoImagePayload>;
  removeAllRelatedLinksFromImage?: Maybe<MangoImagePayload>;
  addTagToImage?: Maybe<MangoImagePayload>;
  removeTagFromImage?: Maybe<MangoImagePayload>;
  removeAllTagsFromImage?: Maybe<MangoImagePayload>;
  addTeaserImageToImage?: Maybe<MangoImagePayload>;
  removeTeaserImageFromImage?: Maybe<MangoImagePayload>;
  removeAllTeaserImagesFromImage?: Maybe<MangoImagePayload>;
  addTwitterAccountToImage?: Maybe<MangoImagePayload>;
  removeTwitterAccountFromImage?: Maybe<MangoImagePayload>;
  removeAllTwitterAccountsFromImage?: Maybe<MangoImagePayload>;
  /** Create a new ImageFile object. */
  createImageFile?: Maybe<MangoImageFilePayload>;
  /** Update a ImageFile object. */
  updateImageFile?: Maybe<MangoImageFilePayload>;
  addAccessibleInToImageFile?: Maybe<MangoImageFilePayload>;
  removeAccessibleInFromImageFile?: Maybe<MangoImageFilePayload>;
  removeAllAccessibleInFromImageFile?: Maybe<MangoImageFilePayload>;
  /** Update a ImageFileCrop object. */
  updateImageFileCrop?: Maybe<MangoImageFileCropPayload>;
  /** Update a ImportLocator object. */
  updateImportLocator?: Maybe<MangoImportLocatorPayload>;
  /** Create a new ImportableThing object. */
  createImportableThing?: Maybe<MangoImportableThingPayload>;
  /** Update a ImportableThing object. */
  updateImportableThing?: Maybe<MangoImportableThingPayload>;
  /** Create a new Item object. */
  createItem?: Maybe<MangoItemPayload>;
  /** Update a Item object. */
  updateItem?: Maybe<MangoItemPayload>;
  addAudienceToItem?: Maybe<MangoItemPayload>;
  removeAudienceFromItem?: Maybe<MangoItemPayload>;
  removeAllAudiencesFromItem?: Maybe<MangoItemPayload>;
  addAudioFileToItem?: Maybe<MangoItemPayload>;
  removeAudioFileFromItem?: Maybe<MangoItemPayload>;
  removeAllAudioFilesFromItem?: Maybe<MangoItemPayload>;
  addAuthorToItem?: Maybe<MangoItemPayload>;
  removeAuthorFromItem?: Maybe<MangoItemPayload>;
  removeAllAuthorsFromItem?: Maybe<MangoItemPayload>;
  /** @deprecated Deprecated */
  addCaptionFileToItem?: Maybe<MangoItemPayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromItem?: Maybe<MangoItemPayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromItem?: Maybe<MangoItemPayload>;
  addCategoryToItem?: Maybe<MangoItemPayload>;
  removeCategoryFromItem?: Maybe<MangoItemPayload>;
  removeAllCategoriesFromItem?: Maybe<MangoItemPayload>;
  addCreditToItem?: Maybe<MangoItemPayload>;
  removeCreditFromItem?: Maybe<MangoItemPayload>;
  removeAllCreditsFromItem?: Maybe<MangoItemPayload>;
  addEssenceToItem?: Maybe<MangoItemPayload>;
  removeEssenceFromItem?: Maybe<MangoItemPayload>;
  removeAllEssencesFromItem?: Maybe<MangoItemPayload>;
  addExecutiveProducerToItem?: Maybe<MangoItemPayload>;
  removeExecutiveProducerFromItem?: Maybe<MangoItemPayload>;
  removeAllExecutiveProducersFromItem?: Maybe<MangoItemPayload>;
  addExternalURLToItem?: Maybe<MangoItemPayload>;
  removeExternalURLFromItem?: Maybe<MangoItemPayload>;
  removeAllExternalURLSFromItem?: Maybe<MangoItemPayload>;
  addFacebookAccountToItem?: Maybe<MangoItemPayload>;
  removeFacebookAccountFromItem?: Maybe<MangoItemPayload>;
  removeAllFacebookAccountsFromItem?: Maybe<MangoItemPayload>;
  addFormatToItem?: Maybe<MangoItemPayload>;
  removeFormatFromItem?: Maybe<MangoItemPayload>;
  removeAllFormatsFromItem?: Maybe<MangoItemPayload>;
  addGenreToItem?: Maybe<MangoItemPayload>;
  removeGenreFromItem?: Maybe<MangoItemPayload>;
  removeAllGenresFromItem?: Maybe<MangoItemPayload>;
  addItemOfToItem?: Maybe<MangoItemPayload>;
  removeItemOfFromItem?: Maybe<MangoItemPayload>;
  removeAllItemOfFromItem?: Maybe<MangoItemPayload>;
  addProducingDepartmentToItem?: Maybe<MangoItemPayload>;
  removeProducingDepartmentFromItem?: Maybe<MangoItemPayload>;
  removeAllProducingDepartmentsFromItem?: Maybe<MangoItemPayload>;
  addRelatedLinkToItem?: Maybe<MangoItemPayload>;
  removeRelatedLinkFromItem?: Maybe<MangoItemPayload>;
  removeAllRelatedLinksFromItem?: Maybe<MangoItemPayload>;
  addSignLanguageEssenceToItem?: Maybe<MangoItemPayload>;
  removeSignLanguageEssenceFromItem?: Maybe<MangoItemPayload>;
  removeAllSignLanguageEssencesFromItem?: Maybe<MangoItemPayload>;
  addTagToItem?: Maybe<MangoItemPayload>;
  removeTagFromItem?: Maybe<MangoItemPayload>;
  removeAllTagsFromItem?: Maybe<MangoItemPayload>;
  addTeaserImageToItem?: Maybe<MangoItemPayload>;
  removeTeaserImageFromItem?: Maybe<MangoItemPayload>;
  removeAllTeaserImagesFromItem?: Maybe<MangoItemPayload>;
  addTwitterAccountToItem?: Maybe<MangoItemPayload>;
  removeTwitterAccountFromItem?: Maybe<MangoItemPayload>;
  removeAllTwitterAccountsFromItem?: Maybe<MangoItemPayload>;
  addVideoFileToItem?: Maybe<MangoItemPayload>;
  removeVideoFileFromItem?: Maybe<MangoItemPayload>;
  removeAllVideoFilesFromItem?: Maybe<MangoItemPayload>;
  /** Create a new Livestream object. */
  createLivestream?: Maybe<MangoLivestreamPayload>;
  /** Update a Livestream object. */
  updateLivestream?: Maybe<MangoLivestreamPayload>;
  addLabelToLivestream?: Maybe<MangoLivestreamPayload>;
  removeLabelFromLivestream?: Maybe<MangoLivestreamPayload>;
  removeAllLabelsFromLivestream?: Maybe<MangoLivestreamPayload>;
  addRegionToLivestream?: Maybe<MangoLivestreamPayload>;
  removeRegionFromLivestream?: Maybe<MangoLivestreamPayload>;
  removeAllRegionsFromLivestream?: Maybe<MangoLivestreamPayload>;
  addStreamingUrlToLivestream?: Maybe<MangoLivestreamPayload>;
  removeStreamingUrlFromLivestream?: Maybe<MangoLivestreamPayload>;
  removeAllStreamingUrlsFromLivestream?: Maybe<MangoLivestreamPayload>;
  /** Create a new LivestreamResource object. */
  createLivestreamResource?: Maybe<MangoLivestreamResourcePayload>;
  /** Update a LivestreamResource object. */
  updateLivestreamResource?: Maybe<MangoLivestreamResourcePayload>;
  addAccessibleInToLivestreamResource?: Maybe<MangoLivestreamResourcePayload>;
  removeAccessibleInFromLivestreamResource?: Maybe<MangoLivestreamResourcePayload>;
  removeAllAccessibleInFromLivestreamResource?: Maybe<MangoLivestreamResourcePayload>;
  /** Update a Locator object. */
  updateLocator?: Maybe<MangoLocatorPayload>;
  /** Create a new MakingOf object. */
  createMakingOf?: Maybe<MangoMakingOfPayload>;
  /** Update a MakingOf object. */
  updateMakingOf?: Maybe<MangoMakingOfPayload>;
  addAudienceToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAudienceFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllAudiencesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addAudioFileToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAudioFileFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllAudioFilesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addAuthorToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAuthorFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllAuthorsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  /** @deprecated Deprecated */
  addCaptionFileToMakingOf?: Maybe<MangoMakingOfPayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromMakingOf?: Maybe<MangoMakingOfPayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addCategoryToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeCategoryFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllCategoriesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addCreditToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeCreditFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllCreditsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addEssenceToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeEssenceFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllEssencesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addExecutiveProducerToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeExecutiveProducerFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllExecutiveProducersFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addExternalURLToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeExternalURLFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllExternalURLSFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addExtraOfToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeExtraOfFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllExtraOfFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addFacebookAccountToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeFacebookAccountFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllFacebookAccountsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addFormatToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeFormatFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllFormatsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addGenreToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeGenreFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllGenresFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addMakingOfOfToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeMakingOfOfFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllMakingOfOfFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addProducingDepartmentToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeProducingDepartmentFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllProducingDepartmentsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addRelatedLinkToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeRelatedLinkFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllRelatedLinksFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addSignLanguageEssenceToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeSignLanguageEssenceFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllSignLanguageEssencesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addTagToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeTagFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllTagsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addTeaserImageToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeTeaserImageFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllTeaserImagesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addTwitterAccountToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeTwitterAccountFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllTwitterAccountsFromMakingOf?: Maybe<MangoMakingOfPayload>;
  addVideoFileToMakingOf?: Maybe<MangoMakingOfPayload>;
  removeVideoFileFromMakingOf?: Maybe<MangoMakingOfPayload>;
  removeAllVideoFilesFromMakingOf?: Maybe<MangoMakingOfPayload>;
  /** Update a Person object. */
  updatePerson?: Maybe<MangoPersonPayload>;
  addExternalURLToPerson?: Maybe<MangoPersonPayload>;
  removeExternalURLFromPerson?: Maybe<MangoPersonPayload>;
  removeAllExternalURLSFromPerson?: Maybe<MangoPersonPayload>;
  addFacebookAccountToPerson?: Maybe<MangoPersonPayload>;
  removeFacebookAccountFromPerson?: Maybe<MangoPersonPayload>;
  removeAllFacebookAccountsFromPerson?: Maybe<MangoPersonPayload>;
  addTwitterAccountToPerson?: Maybe<MangoPersonPayload>;
  removeTwitterAccountFromPerson?: Maybe<MangoPersonPayload>;
  removeAllTwitterAccountsFromPerson?: Maybe<MangoPersonPayload>;
  /** Create a new Playlist object. */
  createPlaylist?: Maybe<MangoPlaylistPayload>;
  /** Update a Playlist object. */
  updatePlaylist?: Maybe<MangoPlaylistPayload>;
  addAudienceToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAudienceFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllAudiencesFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addAuthorToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAuthorFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllAuthorsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addCategoryToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeCategoryFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllCategoriesFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addCreditToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeCreditFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllCreditsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addEssenceToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeEssenceFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllEssencesFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addExecutiveProducerToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeExecutiveProducerFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllExecutiveProducersFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addExternalURLToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeExternalURLFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllExternalURLSFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addFacebookAccountToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeFacebookAccountFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllFacebookAccountsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addFormatToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeFormatFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllFormatsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addGenreToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeGenreFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllGenresFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addProducingDepartmentToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeProducingDepartmentFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllProducingDepartmentsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addRelatedLinkToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeRelatedLinkFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllRelatedLinksFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addTagToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeTagFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllTagsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addTeaserImageToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeTeaserImageFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllTeaserImagesFromPlaylist?: Maybe<MangoPlaylistPayload>;
  addTwitterAccountToPlaylist?: Maybe<MangoPlaylistPayload>;
  removeTwitterAccountFromPlaylist?: Maybe<MangoPlaylistPayload>;
  removeAllTwitterAccountsFromPlaylist?: Maybe<MangoPlaylistPayload>;
  /** Create a new Programme object. */
  createProgramme?: Maybe<MangoProgrammePayload>;
  /** Update a Programme object. */
  updateProgramme?: Maybe<MangoProgrammePayload>;
  addAudienceToProgramme?: Maybe<MangoProgrammePayload>;
  removeAudienceFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllAudiencesFromProgramme?: Maybe<MangoProgrammePayload>;
  addAudioFileToProgramme?: Maybe<MangoProgrammePayload>;
  removeAudioFileFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllAudioFilesFromProgramme?: Maybe<MangoProgrammePayload>;
  addAuthorToProgramme?: Maybe<MangoProgrammePayload>;
  removeAuthorFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllAuthorsFromProgramme?: Maybe<MangoProgrammePayload>;
  /** @deprecated Deprecated */
  addCaptionFileToProgramme?: Maybe<MangoProgrammePayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromProgramme?: Maybe<MangoProgrammePayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromProgramme?: Maybe<MangoProgrammePayload>;
  addCategoryToProgramme?: Maybe<MangoProgrammePayload>;
  removeCategoryFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllCategoriesFromProgramme?: Maybe<MangoProgrammePayload>;
  addCreditToProgramme?: Maybe<MangoProgrammePayload>;
  removeCreditFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllCreditsFromProgramme?: Maybe<MangoProgrammePayload>;
  addEssenceToProgramme?: Maybe<MangoProgrammePayload>;
  removeEssenceFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllEssencesFromProgramme?: Maybe<MangoProgrammePayload>;
  addExecutiveProducerToProgramme?: Maybe<MangoProgrammePayload>;
  removeExecutiveProducerFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllExecutiveProducersFromProgramme?: Maybe<MangoProgrammePayload>;
  addExternalURLToProgramme?: Maybe<MangoProgrammePayload>;
  removeExternalURLFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllExternalURLSFromProgramme?: Maybe<MangoProgrammePayload>;
  addFacebookAccountToProgramme?: Maybe<MangoProgrammePayload>;
  removeFacebookAccountFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllFacebookAccountsFromProgramme?: Maybe<MangoProgrammePayload>;
  addFormatToProgramme?: Maybe<MangoProgrammePayload>;
  removeFormatFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllFormatsFromProgramme?: Maybe<MangoProgrammePayload>;
  addGenreToProgramme?: Maybe<MangoProgrammePayload>;
  removeGenreFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllGenresFromProgramme?: Maybe<MangoProgrammePayload>;
  addProducingDepartmentToProgramme?: Maybe<MangoProgrammePayload>;
  removeProducingDepartmentFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllProducingDepartmentsFromProgramme?: Maybe<MangoProgrammePayload>;
  addRelatedLinkToProgramme?: Maybe<MangoProgrammePayload>;
  removeRelatedLinkFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllRelatedLinksFromProgramme?: Maybe<MangoProgrammePayload>;
  addSignLanguageEssenceToProgramme?: Maybe<MangoProgrammePayload>;
  removeSignLanguageEssenceFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllSignLanguageEssencesFromProgramme?: Maybe<MangoProgrammePayload>;
  addTagToProgramme?: Maybe<MangoProgrammePayload>;
  removeTagFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllTagsFromProgramme?: Maybe<MangoProgrammePayload>;
  addTeaserImageToProgramme?: Maybe<MangoProgrammePayload>;
  removeTeaserImageFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllTeaserImagesFromProgramme?: Maybe<MangoProgrammePayload>;
  addTwitterAccountToProgramme?: Maybe<MangoProgrammePayload>;
  removeTwitterAccountFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllTwitterAccountsFromProgramme?: Maybe<MangoProgrammePayload>;
  addVideoFileToProgramme?: Maybe<MangoProgrammePayload>;
  removeVideoFileFromProgramme?: Maybe<MangoProgrammePayload>;
  removeAllVideoFilesFromProgramme?: Maybe<MangoProgrammePayload>;
  /** Update a PublicationEvent object. */
  updatePublicationEvent?: Maybe<MangoPublicationEventPayload>;
  /** Create a new Season object. */
  createSeason?: Maybe<MangoSeasonPayload>;
  /** Update a Season object. */
  updateSeason?: Maybe<MangoSeasonPayload>;
  addAudienceToSeason?: Maybe<MangoSeasonPayload>;
  removeAudienceFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllAudiencesFromSeason?: Maybe<MangoSeasonPayload>;
  addAuthorToSeason?: Maybe<MangoSeasonPayload>;
  removeAuthorFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllAuthorsFromSeason?: Maybe<MangoSeasonPayload>;
  addCategoryToSeason?: Maybe<MangoSeasonPayload>;
  removeCategoryFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllCategoriesFromSeason?: Maybe<MangoSeasonPayload>;
  addCreditToSeason?: Maybe<MangoSeasonPayload>;
  removeCreditFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllCreditsFromSeason?: Maybe<MangoSeasonPayload>;
  addEssenceToSeason?: Maybe<MangoSeasonPayload>;
  removeEssenceFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllEssencesFromSeason?: Maybe<MangoSeasonPayload>;
  addExecutiveProducerToSeason?: Maybe<MangoSeasonPayload>;
  removeExecutiveProducerFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllExecutiveProducersFromSeason?: Maybe<MangoSeasonPayload>;
  addExternalURLToSeason?: Maybe<MangoSeasonPayload>;
  removeExternalURLFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllExternalURLSFromSeason?: Maybe<MangoSeasonPayload>;
  addFacebookAccountToSeason?: Maybe<MangoSeasonPayload>;
  removeFacebookAccountFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllFacebookAccountsFromSeason?: Maybe<MangoSeasonPayload>;
  addFormatToSeason?: Maybe<MangoSeasonPayload>;
  removeFormatFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllFormatsFromSeason?: Maybe<MangoSeasonPayload>;
  addGenreToSeason?: Maybe<MangoSeasonPayload>;
  removeGenreFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllGenresFromSeason?: Maybe<MangoSeasonPayload>;
  addProducingDepartmentToSeason?: Maybe<MangoSeasonPayload>;
  removeProducingDepartmentFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllProducingDepartmentsFromSeason?: Maybe<MangoSeasonPayload>;
  addRelatedLinkToSeason?: Maybe<MangoSeasonPayload>;
  removeRelatedLinkFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllRelatedLinksFromSeason?: Maybe<MangoSeasonPayload>;
  addTagToSeason?: Maybe<MangoSeasonPayload>;
  removeTagFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllTagsFromSeason?: Maybe<MangoSeasonPayload>;
  addTeaserImageToSeason?: Maybe<MangoSeasonPayload>;
  removeTeaserImageFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllTeaserImagesFromSeason?: Maybe<MangoSeasonPayload>;
  addTwitterAccountToSeason?: Maybe<MangoSeasonPayload>;
  removeTwitterAccountFromSeason?: Maybe<MangoSeasonPayload>;
  removeAllTwitterAccountsFromSeason?: Maybe<MangoSeasonPayload>;
  /** Update a Section object. */
  updateSection?: Maybe<MangoSectionPayload>;
  /** Create a new SectionTemplate object. */
  createSectionTemplate?: Maybe<MangoSectionTemplatePayload>;
  /** Upsert a SectionTemplate object. */
  upsertSectionTemplate?: Maybe<MangoSectionTemplatePayload>;
  /** Update a SectionTemplate object. */
  updateSectionTemplate?: Maybe<MangoSectionTemplatePayload>;
  /** Create a new Series object. */
  createSeries?: Maybe<MangoSeriesPayload>;
  /** Update a Series object. */
  updateSeries?: Maybe<MangoSeriesPayload>;
  addAudienceToSeries?: Maybe<MangoSeriesPayload>;
  removeAudienceFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllAudiencesFromSeries?: Maybe<MangoSeriesPayload>;
  addAuthorToSeries?: Maybe<MangoSeriesPayload>;
  removeAuthorFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllAuthorsFromSeries?: Maybe<MangoSeriesPayload>;
  addBrandingImageToSeries?: Maybe<MangoSeriesPayload>;
  removeBrandingImageFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllBrandingImagesFromSeries?: Maybe<MangoSeriesPayload>;
  addCategoryToSeries?: Maybe<MangoSeriesPayload>;
  removeCategoryFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllCategoriesFromSeries?: Maybe<MangoSeriesPayload>;
  addCreditToSeries?: Maybe<MangoSeriesPayload>;
  removeCreditFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllCreditsFromSeries?: Maybe<MangoSeriesPayload>;
  addEssenceToSeries?: Maybe<MangoSeriesPayload>;
  removeEssenceFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllEssencesFromSeries?: Maybe<MangoSeriesPayload>;
  addExecutiveProducerToSeries?: Maybe<MangoSeriesPayload>;
  removeExecutiveProducerFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllExecutiveProducersFromSeries?: Maybe<MangoSeriesPayload>;
  addExternalURLToSeries?: Maybe<MangoSeriesPayload>;
  removeExternalURLFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllExternalURLSFromSeries?: Maybe<MangoSeriesPayload>;
  addFacebookAccountToSeries?: Maybe<MangoSeriesPayload>;
  removeFacebookAccountFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllFacebookAccountsFromSeries?: Maybe<MangoSeriesPayload>;
  addFormatToSeries?: Maybe<MangoSeriesPayload>;
  removeFormatFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllFormatsFromSeries?: Maybe<MangoSeriesPayload>;
  addGenreToSeries?: Maybe<MangoSeriesPayload>;
  removeGenreFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllGenresFromSeries?: Maybe<MangoSeriesPayload>;
  addHomePageToSeries?: Maybe<MangoSeriesPayload>;
  removeHomePageFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllHomePagesFromSeries?: Maybe<MangoSeriesPayload>;
  addProducingDepartmentToSeries?: Maybe<MangoSeriesPayload>;
  removeProducingDepartmentFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllProducingDepartmentsFromSeries?: Maybe<MangoSeriesPayload>;
  addRelatedLinkToSeries?: Maybe<MangoSeriesPayload>;
  removeRelatedLinkFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllRelatedLinksFromSeries?: Maybe<MangoSeriesPayload>;
  addTagToSeries?: Maybe<MangoSeriesPayload>;
  removeTagFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllTagsFromSeries?: Maybe<MangoSeriesPayload>;
  addTeaserImageToSeries?: Maybe<MangoSeriesPayload>;
  removeTeaserImageFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllTeaserImagesFromSeries?: Maybe<MangoSeriesPayload>;
  addTwitterAccountToSeries?: Maybe<MangoSeriesPayload>;
  removeTwitterAccountFromSeries?: Maybe<MangoSeriesPayload>;
  removeAllTwitterAccountsFromSeries?: Maybe<MangoSeriesPayload>;
  /** Update a SocialMediaAccount object. */
  updateSocialMediaAccount?: Maybe<MangoSocialMediaAccountPayload>;
  /** Create a new Subscription object. */
  createSubscription?: Maybe<MangoSubscriptionPayload>;
  /** Upsert a Subscription object. */
  upsertSubscription?: Maybe<MangoSubscriptionPayload>;
  /** Update a Subscription object. */
  updateSubscription?: Maybe<MangoSubscriptionPayload>;
  /** Update a Subtitle object. */
  updateSubtitle?: Maybe<MangoSubtitlePayload>;
  addTimedTextFileToSubtitle?: Maybe<MangoSubtitlePayload>;
  removeTimedTextFileFromSubtitle?: Maybe<MangoSubtitlePayload>;
  removeAllTimedTextFilesFromSubtitle?: Maybe<MangoSubtitlePayload>;
  /** Update a TeaserContent object. */
  updateTeaserContent?: Maybe<MangoTeaserContentPayload>;
  /** Create a new TimedTextFile object. */
  createTimedTextFile?: Maybe<MangoTimedTextFilePayload>;
  /** Update a TimedTextFile object. */
  updateTimedTextFile?: Maybe<MangoTimedTextFilePayload>;
  addAccessibleInToTimedTextFile?: Maybe<MangoTimedTextFilePayload>;
  removeAccessibleInFromTimedTextFile?: Maybe<MangoTimedTextFilePayload>;
  removeAllAccessibleInFromTimedTextFile?: Maybe<MangoTimedTextFilePayload>;
  /** Update a TrackingInfo object. */
  updateTrackingInfo?: Maybe<MangoTrackingInfoPayload>;
  /** Create a new Trailer object. */
  createTrailer?: Maybe<MangoTrailerPayload>;
  /** Update a Trailer object. */
  updateTrailer?: Maybe<MangoTrailerPayload>;
  addAudienceToTrailer?: Maybe<MangoTrailerPayload>;
  removeAudienceFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllAudiencesFromTrailer?: Maybe<MangoTrailerPayload>;
  addAudioFileToTrailer?: Maybe<MangoTrailerPayload>;
  removeAudioFileFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllAudioFilesFromTrailer?: Maybe<MangoTrailerPayload>;
  addAuthorToTrailer?: Maybe<MangoTrailerPayload>;
  removeAuthorFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllAuthorsFromTrailer?: Maybe<MangoTrailerPayload>;
  /** @deprecated Deprecated */
  addCaptionFileToTrailer?: Maybe<MangoTrailerPayload>;
  /** @deprecated Deprecated */
  removeCaptionFileFromTrailer?: Maybe<MangoTrailerPayload>;
  /** @deprecated Deprecated */
  removeAllCaptionFilesFromTrailer?: Maybe<MangoTrailerPayload>;
  addCategoryToTrailer?: Maybe<MangoTrailerPayload>;
  removeCategoryFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllCategoriesFromTrailer?: Maybe<MangoTrailerPayload>;
  addCreditToTrailer?: Maybe<MangoTrailerPayload>;
  removeCreditFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllCreditsFromTrailer?: Maybe<MangoTrailerPayload>;
  addEssenceToTrailer?: Maybe<MangoTrailerPayload>;
  removeEssenceFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllEssencesFromTrailer?: Maybe<MangoTrailerPayload>;
  addExecutiveProducerToTrailer?: Maybe<MangoTrailerPayload>;
  removeExecutiveProducerFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllExecutiveProducersFromTrailer?: Maybe<MangoTrailerPayload>;
  addExternalURLToTrailer?: Maybe<MangoTrailerPayload>;
  removeExternalURLFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllExternalURLSFromTrailer?: Maybe<MangoTrailerPayload>;
  addExtraOfToTrailer?: Maybe<MangoTrailerPayload>;
  removeExtraOfFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllExtraOfFromTrailer?: Maybe<MangoTrailerPayload>;
  addFacebookAccountToTrailer?: Maybe<MangoTrailerPayload>;
  removeFacebookAccountFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllFacebookAccountsFromTrailer?: Maybe<MangoTrailerPayload>;
  addFormatToTrailer?: Maybe<MangoTrailerPayload>;
  removeFormatFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllFormatsFromTrailer?: Maybe<MangoTrailerPayload>;
  addGenreToTrailer?: Maybe<MangoTrailerPayload>;
  removeGenreFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllGenresFromTrailer?: Maybe<MangoTrailerPayload>;
  addProducingDepartmentToTrailer?: Maybe<MangoTrailerPayload>;
  removeProducingDepartmentFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllProducingDepartmentsFromTrailer?: Maybe<MangoTrailerPayload>;
  addRelatedLinkToTrailer?: Maybe<MangoTrailerPayload>;
  removeRelatedLinkFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllRelatedLinksFromTrailer?: Maybe<MangoTrailerPayload>;
  addSignLanguageEssenceToTrailer?: Maybe<MangoTrailerPayload>;
  removeSignLanguageEssenceFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllSignLanguageEssencesFromTrailer?: Maybe<MangoTrailerPayload>;
  addTagToTrailer?: Maybe<MangoTrailerPayload>;
  removeTagFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllTagsFromTrailer?: Maybe<MangoTrailerPayload>;
  addTeaserImageToTrailer?: Maybe<MangoTrailerPayload>;
  removeTeaserImageFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllTeaserImagesFromTrailer?: Maybe<MangoTrailerPayload>;
  addTrailerOfToTrailer?: Maybe<MangoTrailerPayload>;
  removeTrailerOfFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllTrailerOfFromTrailer?: Maybe<MangoTrailerPayload>;
  addTwitterAccountToTrailer?: Maybe<MangoTrailerPayload>;
  removeTwitterAccountFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllTwitterAccountsFromTrailer?: Maybe<MangoTrailerPayload>;
  addVideoFileToTrailer?: Maybe<MangoTrailerPayload>;
  removeVideoFileFromTrailer?: Maybe<MangoTrailerPayload>;
  removeAllVideoFilesFromTrailer?: Maybe<MangoTrailerPayload>;
  /** Update a TwitterAccount object. */
  updateTwitterAccount?: Maybe<MangoTwitterAccountPayload>;
  /** Update a User object. */
  updateUser?: Maybe<MangoUserPayload>;
  addExternalURLToUser?: Maybe<MangoUserPayload>;
  removeExternalURLFromUser?: Maybe<MangoUserPayload>;
  removeAllExternalURLSFromUser?: Maybe<MangoUserPayload>;
  addFacebookAccountToUser?: Maybe<MangoUserPayload>;
  removeFacebookAccountFromUser?: Maybe<MangoUserPayload>;
  removeAllFacebookAccountsFromUser?: Maybe<MangoUserPayload>;
  addTwitterAccountToUser?: Maybe<MangoUserPayload>;
  removeTwitterAccountFromUser?: Maybe<MangoUserPayload>;
  removeAllTwitterAccountsFromUser?: Maybe<MangoUserPayload>;
  /** Create a new VideoFile object. */
  createVideoFile?: Maybe<MangoVideoFilePayload>;
  /** Update a VideoFile object. */
  updateVideoFile?: Maybe<MangoVideoFilePayload>;
  addAccessibleInToVideoFile?: Maybe<MangoVideoFilePayload>;
  removeAccessibleInFromVideoFile?: Maybe<MangoVideoFilePayload>;
  removeAllAccessibleInFromVideoFile?: Maybe<MangoVideoFilePayload>;
  /** Update a WebPage object. */
  updateWebPage?: Maybe<MangoWebPagePayload>;
  addAudienceToWebPage?: Maybe<MangoWebPagePayload>;
  removeAudienceFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllAudiencesFromWebPage?: Maybe<MangoWebPagePayload>;
  addAuthorToWebPage?: Maybe<MangoWebPagePayload>;
  removeAuthorFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllAuthorsFromWebPage?: Maybe<MangoWebPagePayload>;
  addCategoryToWebPage?: Maybe<MangoWebPagePayload>;
  removeCategoryFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllCategoriesFromWebPage?: Maybe<MangoWebPagePayload>;
  addCreditToWebPage?: Maybe<MangoWebPagePayload>;
  removeCreditFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllCreditsFromWebPage?: Maybe<MangoWebPagePayload>;
  addEssenceToWebPage?: Maybe<MangoWebPagePayload>;
  removeEssenceFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllEssencesFromWebPage?: Maybe<MangoWebPagePayload>;
  addExecutiveProducerToWebPage?: Maybe<MangoWebPagePayload>;
  removeExecutiveProducerFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllExecutiveProducersFromWebPage?: Maybe<MangoWebPagePayload>;
  addExternalURLToWebPage?: Maybe<MangoWebPagePayload>;
  removeExternalURLFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllExternalURLSFromWebPage?: Maybe<MangoWebPagePayload>;
  addFacebookAccountToWebPage?: Maybe<MangoWebPagePayload>;
  removeFacebookAccountFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllFacebookAccountsFromWebPage?: Maybe<MangoWebPagePayload>;
  addFormatToWebPage?: Maybe<MangoWebPagePayload>;
  removeFormatFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllFormatsFromWebPage?: Maybe<MangoWebPagePayload>;
  addGenreToWebPage?: Maybe<MangoWebPagePayload>;
  removeGenreFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllGenresFromWebPage?: Maybe<MangoWebPagePayload>;
  addProducingDepartmentToWebPage?: Maybe<MangoWebPagePayload>;
  removeProducingDepartmentFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllProducingDepartmentsFromWebPage?: Maybe<MangoWebPagePayload>;
  addRelatedLinkToWebPage?: Maybe<MangoWebPagePayload>;
  removeRelatedLinkFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllRelatedLinksFromWebPage?: Maybe<MangoWebPagePayload>;
  addTagToWebPage?: Maybe<MangoWebPagePayload>;
  removeTagFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllTagsFromWebPage?: Maybe<MangoWebPagePayload>;
  addTeaserImageToWebPage?: Maybe<MangoWebPagePayload>;
  removeTeaserImageFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllTeaserImagesFromWebPage?: Maybe<MangoWebPagePayload>;
  addTwitterAccountToWebPage?: Maybe<MangoWebPagePayload>;
  removeTwitterAccountFromWebPage?: Maybe<MangoWebPagePayload>;
  removeAllTwitterAccountsFromWebPage?: Maybe<MangoWebPagePayload>;
  /** Update a Webhook object. */
  updateWebhook?: Maybe<MangoWebhookPayload>;
  addFilterToWebhook?: Maybe<MangoWebhookPayload>;
  removeFilterFromWebhook?: Maybe<MangoWebhookPayload>;
  removeAllFiltersFromWebhook?: Maybe<MangoWebhookPayload>;
  /** Update a WritableThing object. */
  updateWritableThing?: Maybe<MangoWritableThingPayload>;
  /** Delete a ContentInteraction object. */
  deleteContentInteraction?: Maybe<MangoDeletePayload>;
  /** Delete a DeletableThing object. */
  deleteDeletableThing?: Maybe<MangoDeletePayload>;
  /** Delete a Subscription object. */
  deleteSubscription?: Maybe<MangoDeletePayload>;
  like?: Maybe<MangoLikePayload>;
  dislike?: Maybe<MangoLikePayload>;
  unsetReaction?: Maybe<MangoLikePayload>;
  subscribe?: Maybe<MangoSubscriptionPayload>;
  unsubscribe?: Maybe<MangoUnsubscribePayload>;
  deleteMySubscriptions?: Maybe<MangoDeleteMySubscriptionsPayload>;
  /** Marks a subscription as just visited. */
  visitSubscription?: Maybe<MangoSubscriptionPayload>;
  upsertMyContentInteraction?: Maybe<MangoContentInteractionPayload>;
  deleteMyContentInteractions?: Maybe<MangoDeleteMyContentInteractionsPayload>;
  /** Bookmarks a clip */
  addToMyBookmarks?: Maybe<MangoEndUserPayload>;
  /** Removes a bookmark for a clip. */
  removeFromMyBookmarks?: Maybe<MangoEndUserPayload>;
  /** Removes all bookmarks of the current user. */
  removeAllMyBookmarks?: Maybe<MangoEndUserPayload>;
  deleteMyPersonalData?: Maybe<MangoDeleteMyPersonalDataPayload>;
};


export type MangoRootMutationCreateAudioFileArgs = {
  input: MangoAudioFileCreateInput;
};


export type MangoRootMutationUpdateAudioFileArgs = {
  input: MangoAudioFileUpdateInput;
};


export type MangoRootMutationAddAccessibleInToAudioFileArgs = {
  input: MangoAudioFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAccessibleInFromAudioFileArgs = {
  input: MangoAudioFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAllAccessibleInFromAudioFileArgs = {
  input: MangoAudioFileRemoveAllListInput;
};


export type MangoRootMutationCreateBannerContentArgs = {
  input: MangoBannerContentCreateInput;
};


export type MangoRootMutationUpsertBannerContentArgs = {
  input: MangoBannerContentCreateInput;
};


export type MangoRootMutationUpdateBannerContentArgs = {
  input: MangoBannerContentUpdateInput;
};


export type MangoRootMutationCreateBestOfArgs = {
  input: MangoBestOfCreateInput;
};


export type MangoRootMutationUpdateBestOfArgs = {
  input: MangoBestOfUpdateInput;
};


export type MangoRootMutationAddAudienceToBestOfArgs = {
  input: MangoBestOfAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromBestOfArgs = {
  input: MangoBestOfAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToBestOfArgs = {
  input: MangoBestOfAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromBestOfArgs = {
  input: MangoBestOfAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToBestOfArgs = {
  input: MangoBestOfAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromBestOfArgs = {
  input: MangoBestOfAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddBestOfOfToBestOfArgs = {
  input: MangoBestOfBestOfOfListInput;
};


export type MangoRootMutationRemoveBestOfOfFromBestOfArgs = {
  input: MangoBestOfBestOfOfListInput;
};


export type MangoRootMutationRemoveAllBestOfOfFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToBestOfArgs = {
  input: MangoBestOfCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromBestOfArgs = {
  input: MangoBestOfCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToBestOfArgs = {
  input: MangoBestOfCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromBestOfArgs = {
  input: MangoBestOfCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddCreditToBestOfArgs = {
  input: MangoBestOfCreditListInput;
};


export type MangoRootMutationRemoveCreditFromBestOfArgs = {
  input: MangoBestOfCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToBestOfArgs = {
  input: MangoBestOfEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromBestOfArgs = {
  input: MangoBestOfEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToBestOfArgs = {
  input: MangoBestOfExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromBestOfArgs = {
  input: MangoBestOfExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToBestOfArgs = {
  input: MangoBestOfExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromBestOfArgs = {
  input: MangoBestOfExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddExtraOfToBestOfArgs = {
  input: MangoBestOfExtraOfListInput;
};


export type MangoRootMutationRemoveExtraOfFromBestOfArgs = {
  input: MangoBestOfExtraOfListInput;
};


export type MangoRootMutationRemoveAllExtraOfFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToBestOfArgs = {
  input: MangoBestOfFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromBestOfArgs = {
  input: MangoBestOfFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddFormatToBestOfArgs = {
  input: MangoBestOfFormatListInput;
};


export type MangoRootMutationRemoveFormatFromBestOfArgs = {
  input: MangoBestOfFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddGenreToBestOfArgs = {
  input: MangoBestOfGenreListInput;
};


export type MangoRootMutationRemoveGenreFromBestOfArgs = {
  input: MangoBestOfGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToBestOfArgs = {
  input: MangoBestOfProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromBestOfArgs = {
  input: MangoBestOfProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToBestOfArgs = {
  input: MangoBestOfRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromBestOfArgs = {
  input: MangoBestOfRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToBestOfArgs = {
  input: MangoBestOfSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromBestOfArgs = {
  input: MangoBestOfSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddTagToBestOfArgs = {
  input: MangoBestOfTagListInput;
};


export type MangoRootMutationRemoveTagFromBestOfArgs = {
  input: MangoBestOfTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToBestOfArgs = {
  input: MangoBestOfTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromBestOfArgs = {
  input: MangoBestOfTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToBestOfArgs = {
  input: MangoBestOfTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromBestOfArgs = {
  input: MangoBestOfTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToBestOfArgs = {
  input: MangoBestOfVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromBestOfArgs = {
  input: MangoBestOfVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromBestOfArgs = {
  input: MangoBestOfRemoveAllListInput;
};


export type MangoRootMutationCreateBoardArgs = {
  input: MangoBoardCreateInput;
};


export type MangoRootMutationUpdateBoardArgs = {
  input: MangoBoardUpdateInput;
};


export type MangoRootMutationAddAudienceToBoardArgs = {
  input: MangoBoardAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromBoardArgs = {
  input: MangoBoardAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToBoardArgs = {
  input: MangoBoardAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromBoardArgs = {
  input: MangoBoardAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToBoardArgs = {
  input: MangoBoardCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromBoardArgs = {
  input: MangoBoardCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddCreditToBoardArgs = {
  input: MangoBoardCreditListInput;
};


export type MangoRootMutationRemoveCreditFromBoardArgs = {
  input: MangoBoardCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToBoardArgs = {
  input: MangoBoardEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromBoardArgs = {
  input: MangoBoardEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToBoardArgs = {
  input: MangoBoardExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromBoardArgs = {
  input: MangoBoardExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToBoardArgs = {
  input: MangoBoardExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromBoardArgs = {
  input: MangoBoardExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToBoardArgs = {
  input: MangoBoardFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromBoardArgs = {
  input: MangoBoardFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddFormatToBoardArgs = {
  input: MangoBoardFormatListInput;
};


export type MangoRootMutationRemoveFormatFromBoardArgs = {
  input: MangoBoardFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddGenreToBoardArgs = {
  input: MangoBoardGenreListInput;
};


export type MangoRootMutationRemoveGenreFromBoardArgs = {
  input: MangoBoardGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToBoardArgs = {
  input: MangoBoardProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromBoardArgs = {
  input: MangoBoardProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToBoardArgs = {
  input: MangoBoardRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromBoardArgs = {
  input: MangoBoardRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddTagToBoardArgs = {
  input: MangoBoardTagListInput;
};


export type MangoRootMutationRemoveTagFromBoardArgs = {
  input: MangoBoardTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToBoardArgs = {
  input: MangoBoardTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromBoardArgs = {
  input: MangoBoardTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToBoardArgs = {
  input: MangoBoardTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromBoardArgs = {
  input: MangoBoardTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromBoardArgs = {
  input: MangoBoardRemoveAllListInput;
};


export type MangoRootMutationUpdateBroadcastEventArgs = {
  input: MangoBroadcastEventUpdateInput;
};


export type MangoRootMutationAddBroadcastedOnToBroadcastEventArgs = {
  input: MangoBroadcastEventBroadcastedOnListInput;
};


export type MangoRootMutationRemoveBroadcastedOnFromBroadcastEventArgs = {
  input: MangoBroadcastEventBroadcastedOnListInput;
};


export type MangoRootMutationRemoveAllBroadcastedOnFromBroadcastEventArgs = {
  input: MangoBroadcastEventRemoveAllListInput;
};


export type MangoRootMutationCreateBroadcastServiceArgs = {
  input: MangoBroadcastServiceCreateInput;
};


export type MangoRootMutationUpsertBroadcastServiceArgs = {
  input: MangoBroadcastServiceCreateInput;
};


export type MangoRootMutationUpdateBroadcastServiceArgs = {
  input: MangoBroadcastServiceUpdateInput;
};


export type MangoRootMutationAddExternalUrlToBroadcastServiceArgs = {
  input: MangoBroadcastServiceExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromBroadcastServiceArgs = {
  input: MangoBroadcastServiceExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromBroadcastServiceArgs = {
  input: MangoBroadcastServiceRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToBroadcastServiceArgs = {
  input: MangoBroadcastServiceFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromBroadcastServiceArgs = {
  input: MangoBroadcastServiceFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromBroadcastServiceArgs = {
  input: MangoBroadcastServiceRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToBroadcastServiceArgs = {
  input: MangoBroadcastServiceTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromBroadcastServiceArgs = {
  input: MangoBroadcastServiceTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromBroadcastServiceArgs = {
  input: MangoBroadcastServiceRemoveAllListInput;
};


export type MangoRootMutationUpdateCaptionArgs = {
  input: MangoCaptionUpdateInput;
};


export type MangoRootMutationAddTimedTextFileToCaptionArgs = {
  input: MangoCaptionTimedTextFileListInput;
};


export type MangoRootMutationRemoveTimedTextFileFromCaptionArgs = {
  input: MangoCaptionTimedTextFileListInput;
};


export type MangoRootMutationRemoveAllTimedTextFilesFromCaptionArgs = {
  input: MangoCaptionRemoveAllListInput;
};


export type MangoRootMutationCreateClipArgs = {
  input: MangoClipCreateInput;
};


export type MangoRootMutationUpdateClipArgs = {
  input: MangoClipUpdateInput;
};


export type MangoRootMutationAddAudienceToClipArgs = {
  input: MangoClipAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromClipArgs = {
  input: MangoClipAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToClipArgs = {
  input: MangoClipAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromClipArgs = {
  input: MangoClipAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToClipArgs = {
  input: MangoClipAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromClipArgs = {
  input: MangoClipAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToClipArgs = {
  input: MangoClipCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromClipArgs = {
  input: MangoClipCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToClipArgs = {
  input: MangoClipCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromClipArgs = {
  input: MangoClipCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddCreditToClipArgs = {
  input: MangoClipCreditListInput;
};


export type MangoRootMutationRemoveCreditFromClipArgs = {
  input: MangoClipCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToClipArgs = {
  input: MangoClipEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromClipArgs = {
  input: MangoClipEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToClipArgs = {
  input: MangoClipExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromClipArgs = {
  input: MangoClipExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToClipArgs = {
  input: MangoClipExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromClipArgs = {
  input: MangoClipExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToClipArgs = {
  input: MangoClipFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromClipArgs = {
  input: MangoClipFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddFormatToClipArgs = {
  input: MangoClipFormatListInput;
};


export type MangoRootMutationRemoveFormatFromClipArgs = {
  input: MangoClipFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddGenreToClipArgs = {
  input: MangoClipGenreListInput;
};


export type MangoRootMutationRemoveGenreFromClipArgs = {
  input: MangoClipGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToClipArgs = {
  input: MangoClipProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromClipArgs = {
  input: MangoClipProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToClipArgs = {
  input: MangoClipRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromClipArgs = {
  input: MangoClipRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToClipArgs = {
  input: MangoClipSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromClipArgs = {
  input: MangoClipSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddTagToClipArgs = {
  input: MangoClipTagListInput;
};


export type MangoRootMutationRemoveTagFromClipArgs = {
  input: MangoClipTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToClipArgs = {
  input: MangoClipTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromClipArgs = {
  input: MangoClipTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToClipArgs = {
  input: MangoClipTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromClipArgs = {
  input: MangoClipTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToClipArgs = {
  input: MangoClipVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromClipArgs = {
  input: MangoClipVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromClipArgs = {
  input: MangoClipRemoveAllListInput;
};


export type MangoRootMutationCreateContentInteractionArgs = {
  input: MangoContentInteractionCreateInput;
};


export type MangoRootMutationUpsertContentInteractionArgs = {
  input: MangoContentInteractionCreateInput;
};


export type MangoRootMutationUpdateContentInteractionArgs = {
  input: MangoContentInteractionUpdateInput;
};


export type MangoRootMutationCreateElementContentArgs = {
  input: MangoElementContentCreateInput;
};


export type MangoRootMutationUpsertElementContentArgs = {
  input: MangoElementContentCreateInput;
};


export type MangoRootMutationUpdateElementContentArgs = {
  input: MangoElementContentUpdateInput;
};


export type MangoRootMutationCreateEndUserArgs = {
  input: MangoEndUserCreateInput;
};


export type MangoRootMutationUpdateEndUserArgs = {
  input: MangoEndUserUpdateInput;
};


export type MangoRootMutationAddBookmarkToEndUserArgs = {
  input: MangoEndUserBookmarkListInput;
};


export type MangoRootMutationRemoveBookmarkFromEndUserArgs = {
  input: MangoEndUserBookmarkListInput;
};


export type MangoRootMutationRemoveAllBookmarksFromEndUserArgs = {
  input: MangoEndUserRemoveAllListInput;
};


export type MangoRootMutationAddDeviceToEndUserArgs = {
  input: MangoEndUserDeviceListInput;
};


export type MangoRootMutationRemoveDeviceFromEndUserArgs = {
  input: MangoEndUserDeviceListInput;
};


export type MangoRootMutationRemoveAllDevicesFromEndUserArgs = {
  input: MangoEndUserRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToEndUserArgs = {
  input: MangoEndUserExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromEndUserArgs = {
  input: MangoEndUserExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromEndUserArgs = {
  input: MangoEndUserRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToEndUserArgs = {
  input: MangoEndUserFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromEndUserArgs = {
  input: MangoEndUserFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromEndUserArgs = {
  input: MangoEndUserRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToEndUserArgs = {
  input: MangoEndUserTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromEndUserArgs = {
  input: MangoEndUserTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromEndUserArgs = {
  input: MangoEndUserRemoveAllListInput;
};


export type MangoRootMutationUpdateExternalUrlArgs = {
  input: MangoExternalUrlUpdateInput;
};


export type MangoRootMutationCreateExtraArgs = {
  input: MangoExtraCreateInput;
};


export type MangoRootMutationUpdateExtraArgs = {
  input: MangoExtraUpdateInput;
};


export type MangoRootMutationAddAudienceToExtraArgs = {
  input: MangoExtraAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromExtraArgs = {
  input: MangoExtraAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToExtraArgs = {
  input: MangoExtraAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromExtraArgs = {
  input: MangoExtraAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToExtraArgs = {
  input: MangoExtraAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromExtraArgs = {
  input: MangoExtraAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToExtraArgs = {
  input: MangoExtraCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromExtraArgs = {
  input: MangoExtraCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToExtraArgs = {
  input: MangoExtraCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromExtraArgs = {
  input: MangoExtraCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddCreditToExtraArgs = {
  input: MangoExtraCreditListInput;
};


export type MangoRootMutationRemoveCreditFromExtraArgs = {
  input: MangoExtraCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToExtraArgs = {
  input: MangoExtraEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromExtraArgs = {
  input: MangoExtraEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToExtraArgs = {
  input: MangoExtraExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromExtraArgs = {
  input: MangoExtraExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToExtraArgs = {
  input: MangoExtraExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromExtraArgs = {
  input: MangoExtraExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddExtraOfToExtraArgs = {
  input: MangoExtraExtraOfListInput;
};


export type MangoRootMutationRemoveExtraOfFromExtraArgs = {
  input: MangoExtraExtraOfListInput;
};


export type MangoRootMutationRemoveAllExtraOfFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToExtraArgs = {
  input: MangoExtraFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromExtraArgs = {
  input: MangoExtraFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddFormatToExtraArgs = {
  input: MangoExtraFormatListInput;
};


export type MangoRootMutationRemoveFormatFromExtraArgs = {
  input: MangoExtraFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddGenreToExtraArgs = {
  input: MangoExtraGenreListInput;
};


export type MangoRootMutationRemoveGenreFromExtraArgs = {
  input: MangoExtraGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToExtraArgs = {
  input: MangoExtraProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromExtraArgs = {
  input: MangoExtraProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToExtraArgs = {
  input: MangoExtraRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromExtraArgs = {
  input: MangoExtraRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToExtraArgs = {
  input: MangoExtraSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromExtraArgs = {
  input: MangoExtraSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddTagToExtraArgs = {
  input: MangoExtraTagListInput;
};


export type MangoRootMutationRemoveTagFromExtraArgs = {
  input: MangoExtraTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToExtraArgs = {
  input: MangoExtraTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromExtraArgs = {
  input: MangoExtraTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToExtraArgs = {
  input: MangoExtraTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromExtraArgs = {
  input: MangoExtraTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToExtraArgs = {
  input: MangoExtraVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromExtraArgs = {
  input: MangoExtraVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromExtraArgs = {
  input: MangoExtraRemoveAllListInput;
};


export type MangoRootMutationUpdateFacebookAccountArgs = {
  input: MangoFacebookAccountUpdateInput;
};


export type MangoRootMutationUpdateFileArgs = {
  input: MangoFileUpdateInput;
};


export type MangoRootMutationAddAccessibleInToFileArgs = {
  input: MangoFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAccessibleInFromFileArgs = {
  input: MangoFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAllAccessibleInFromFileArgs = {
  input: MangoFileRemoveAllListInput;
};


export type MangoRootMutationCreateImageArgs = {
  input: MangoImageCreateInput;
};


export type MangoRootMutationUpdateImageArgs = {
  input: MangoImageUpdateInput;
};


export type MangoRootMutationAddAudienceToImageArgs = {
  input: MangoImageAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromImageArgs = {
  input: MangoImageAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToImageArgs = {
  input: MangoImageAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromImageArgs = {
  input: MangoImageAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToImageArgs = {
  input: MangoImageCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromImageArgs = {
  input: MangoImageCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddCreditToImageArgs = {
  input: MangoImageCreditListInput;
};


export type MangoRootMutationRemoveCreditFromImageArgs = {
  input: MangoImageCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToImageArgs = {
  input: MangoImageEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromImageArgs = {
  input: MangoImageEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToImageArgs = {
  input: MangoImageExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromImageArgs = {
  input: MangoImageExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToImageArgs = {
  input: MangoImageExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromImageArgs = {
  input: MangoImageExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToImageArgs = {
  input: MangoImageFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromImageArgs = {
  input: MangoImageFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddFormatToImageArgs = {
  input: MangoImageFormatListInput;
};


export type MangoRootMutationRemoveFormatFromImageArgs = {
  input: MangoImageFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddGenreToImageArgs = {
  input: MangoImageGenreListInput;
};


export type MangoRootMutationRemoveGenreFromImageArgs = {
  input: MangoImageGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddImageFileToImageArgs = {
  input: MangoImageImageFileListInput;
};


export type MangoRootMutationRemoveImageFileFromImageArgs = {
  input: MangoImageImageFileListInput;
};


export type MangoRootMutationRemoveAllImageFilesFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToImageArgs = {
  input: MangoImageProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromImageArgs = {
  input: MangoImageProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToImageArgs = {
  input: MangoImageRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromImageArgs = {
  input: MangoImageRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddTagToImageArgs = {
  input: MangoImageTagListInput;
};


export type MangoRootMutationRemoveTagFromImageArgs = {
  input: MangoImageTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToImageArgs = {
  input: MangoImageTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromImageArgs = {
  input: MangoImageTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToImageArgs = {
  input: MangoImageTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromImageArgs = {
  input: MangoImageTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromImageArgs = {
  input: MangoImageRemoveAllListInput;
};


export type MangoRootMutationCreateImageFileArgs = {
  input: MangoImageFileCreateInput;
};


export type MangoRootMutationUpdateImageFileArgs = {
  input: MangoImageFileUpdateInput;
};


export type MangoRootMutationAddAccessibleInToImageFileArgs = {
  input: MangoImageFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAccessibleInFromImageFileArgs = {
  input: MangoImageFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAllAccessibleInFromImageFileArgs = {
  input: MangoImageFileRemoveAllListInput;
};


export type MangoRootMutationUpdateImageFileCropArgs = {
  input: MangoImageFileCropUpdateInput;
};


export type MangoRootMutationUpdateImportLocatorArgs = {
  input: MangoImportLocatorUpdateInput;
};


export type MangoRootMutationCreateImportableThingArgs = {
  input: MangoImportableThingCreateInput;
};


export type MangoRootMutationUpdateImportableThingArgs = {
  input: MangoImportableThingUpdateInput;
};


export type MangoRootMutationCreateItemArgs = {
  input: MangoItemCreateInput;
};


export type MangoRootMutationUpdateItemArgs = {
  input: MangoItemUpdateInput;
};


export type MangoRootMutationAddAudienceToItemArgs = {
  input: MangoItemAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromItemArgs = {
  input: MangoItemAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToItemArgs = {
  input: MangoItemAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromItemArgs = {
  input: MangoItemAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToItemArgs = {
  input: MangoItemAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromItemArgs = {
  input: MangoItemAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToItemArgs = {
  input: MangoItemCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromItemArgs = {
  input: MangoItemCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToItemArgs = {
  input: MangoItemCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromItemArgs = {
  input: MangoItemCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddCreditToItemArgs = {
  input: MangoItemCreditListInput;
};


export type MangoRootMutationRemoveCreditFromItemArgs = {
  input: MangoItemCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToItemArgs = {
  input: MangoItemEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromItemArgs = {
  input: MangoItemEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToItemArgs = {
  input: MangoItemExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromItemArgs = {
  input: MangoItemExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToItemArgs = {
  input: MangoItemExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromItemArgs = {
  input: MangoItemExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToItemArgs = {
  input: MangoItemFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromItemArgs = {
  input: MangoItemFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddFormatToItemArgs = {
  input: MangoItemFormatListInput;
};


export type MangoRootMutationRemoveFormatFromItemArgs = {
  input: MangoItemFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddGenreToItemArgs = {
  input: MangoItemGenreListInput;
};


export type MangoRootMutationRemoveGenreFromItemArgs = {
  input: MangoItemGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddItemOfToItemArgs = {
  input: MangoItemItemOfListInput;
};


export type MangoRootMutationRemoveItemOfFromItemArgs = {
  input: MangoItemItemOfListInput;
};


export type MangoRootMutationRemoveAllItemOfFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToItemArgs = {
  input: MangoItemProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromItemArgs = {
  input: MangoItemProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToItemArgs = {
  input: MangoItemRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromItemArgs = {
  input: MangoItemRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToItemArgs = {
  input: MangoItemSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromItemArgs = {
  input: MangoItemSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddTagToItemArgs = {
  input: MangoItemTagListInput;
};


export type MangoRootMutationRemoveTagFromItemArgs = {
  input: MangoItemTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToItemArgs = {
  input: MangoItemTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromItemArgs = {
  input: MangoItemTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToItemArgs = {
  input: MangoItemTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromItemArgs = {
  input: MangoItemTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToItemArgs = {
  input: MangoItemVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromItemArgs = {
  input: MangoItemVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromItemArgs = {
  input: MangoItemRemoveAllListInput;
};


export type MangoRootMutationCreateLivestreamArgs = {
  input: MangoLivestreamCreateInput;
};


export type MangoRootMutationUpdateLivestreamArgs = {
  input: MangoLivestreamUpdateInput;
};


export type MangoRootMutationAddLabelToLivestreamArgs = {
  input: MangoLivestreamLabelListInput;
};


export type MangoRootMutationRemoveLabelFromLivestreamArgs = {
  input: MangoLivestreamLabelListInput;
};


export type MangoRootMutationRemoveAllLabelsFromLivestreamArgs = {
  input: MangoLivestreamRemoveAllListInput;
};


export type MangoRootMutationAddRegionToLivestreamArgs = {
  input: MangoLivestreamRegionListInput;
};


export type MangoRootMutationRemoveRegionFromLivestreamArgs = {
  input: MangoLivestreamRegionListInput;
};


export type MangoRootMutationRemoveAllRegionsFromLivestreamArgs = {
  input: MangoLivestreamRemoveAllListInput;
};


export type MangoRootMutationAddStreamingUrlToLivestreamArgs = {
  input: MangoLivestreamStreamingUrlListInput;
};


export type MangoRootMutationRemoveStreamingUrlFromLivestreamArgs = {
  input: MangoLivestreamStreamingUrlListInput;
};


export type MangoRootMutationRemoveAllStreamingUrlsFromLivestreamArgs = {
  input: MangoLivestreamRemoveAllListInput;
};


export type MangoRootMutationCreateLivestreamResourceArgs = {
  input: MangoLivestreamResourceCreateInput;
};


export type MangoRootMutationUpdateLivestreamResourceArgs = {
  input: MangoLivestreamResourceUpdateInput;
};


export type MangoRootMutationAddAccessibleInToLivestreamResourceArgs = {
  input: MangoLivestreamResourceAccessibleInListInput;
};


export type MangoRootMutationRemoveAccessibleInFromLivestreamResourceArgs = {
  input: MangoLivestreamResourceAccessibleInListInput;
};


export type MangoRootMutationRemoveAllAccessibleInFromLivestreamResourceArgs = {
  input: MangoLivestreamResourceRemoveAllListInput;
};


export type MangoRootMutationUpdateLocatorArgs = {
  input: MangoLocatorUpdateInput;
};


export type MangoRootMutationCreateMakingOfArgs = {
  input: MangoMakingOfCreateInput;
};


export type MangoRootMutationUpdateMakingOfArgs = {
  input: MangoMakingOfUpdateInput;
};


export type MangoRootMutationAddAudienceToMakingOfArgs = {
  input: MangoMakingOfAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromMakingOfArgs = {
  input: MangoMakingOfAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToMakingOfArgs = {
  input: MangoMakingOfAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromMakingOfArgs = {
  input: MangoMakingOfAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToMakingOfArgs = {
  input: MangoMakingOfAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromMakingOfArgs = {
  input: MangoMakingOfAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToMakingOfArgs = {
  input: MangoMakingOfCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromMakingOfArgs = {
  input: MangoMakingOfCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToMakingOfArgs = {
  input: MangoMakingOfCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromMakingOfArgs = {
  input: MangoMakingOfCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddCreditToMakingOfArgs = {
  input: MangoMakingOfCreditListInput;
};


export type MangoRootMutationRemoveCreditFromMakingOfArgs = {
  input: MangoMakingOfCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToMakingOfArgs = {
  input: MangoMakingOfEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromMakingOfArgs = {
  input: MangoMakingOfEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToMakingOfArgs = {
  input: MangoMakingOfExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromMakingOfArgs = {
  input: MangoMakingOfExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToMakingOfArgs = {
  input: MangoMakingOfExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromMakingOfArgs = {
  input: MangoMakingOfExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddExtraOfToMakingOfArgs = {
  input: MangoMakingOfExtraOfListInput;
};


export type MangoRootMutationRemoveExtraOfFromMakingOfArgs = {
  input: MangoMakingOfExtraOfListInput;
};


export type MangoRootMutationRemoveAllExtraOfFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToMakingOfArgs = {
  input: MangoMakingOfFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromMakingOfArgs = {
  input: MangoMakingOfFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddFormatToMakingOfArgs = {
  input: MangoMakingOfFormatListInput;
};


export type MangoRootMutationRemoveFormatFromMakingOfArgs = {
  input: MangoMakingOfFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddGenreToMakingOfArgs = {
  input: MangoMakingOfGenreListInput;
};


export type MangoRootMutationRemoveGenreFromMakingOfArgs = {
  input: MangoMakingOfGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddMakingOfOfToMakingOfArgs = {
  input: MangoMakingOfMakingOfOfListInput;
};


export type MangoRootMutationRemoveMakingOfOfFromMakingOfArgs = {
  input: MangoMakingOfMakingOfOfListInput;
};


export type MangoRootMutationRemoveAllMakingOfOfFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToMakingOfArgs = {
  input: MangoMakingOfProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromMakingOfArgs = {
  input: MangoMakingOfProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToMakingOfArgs = {
  input: MangoMakingOfRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromMakingOfArgs = {
  input: MangoMakingOfRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToMakingOfArgs = {
  input: MangoMakingOfSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromMakingOfArgs = {
  input: MangoMakingOfSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddTagToMakingOfArgs = {
  input: MangoMakingOfTagListInput;
};


export type MangoRootMutationRemoveTagFromMakingOfArgs = {
  input: MangoMakingOfTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToMakingOfArgs = {
  input: MangoMakingOfTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromMakingOfArgs = {
  input: MangoMakingOfTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToMakingOfArgs = {
  input: MangoMakingOfTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromMakingOfArgs = {
  input: MangoMakingOfTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToMakingOfArgs = {
  input: MangoMakingOfVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromMakingOfArgs = {
  input: MangoMakingOfVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromMakingOfArgs = {
  input: MangoMakingOfRemoveAllListInput;
};


export type MangoRootMutationUpdatePersonArgs = {
  input: MangoPersonUpdateInput;
};


export type MangoRootMutationAddExternalUrlToPersonArgs = {
  input: MangoPersonExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromPersonArgs = {
  input: MangoPersonExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromPersonArgs = {
  input: MangoPersonRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToPersonArgs = {
  input: MangoPersonFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromPersonArgs = {
  input: MangoPersonFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromPersonArgs = {
  input: MangoPersonRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToPersonArgs = {
  input: MangoPersonTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromPersonArgs = {
  input: MangoPersonTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromPersonArgs = {
  input: MangoPersonRemoveAllListInput;
};


export type MangoRootMutationCreatePlaylistArgs = {
  input: MangoPlaylistCreateInput;
};


export type MangoRootMutationUpdatePlaylistArgs = {
  input: MangoPlaylistUpdateInput;
};


export type MangoRootMutationAddAudienceToPlaylistArgs = {
  input: MangoPlaylistAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromPlaylistArgs = {
  input: MangoPlaylistAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToPlaylistArgs = {
  input: MangoPlaylistAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromPlaylistArgs = {
  input: MangoPlaylistAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToPlaylistArgs = {
  input: MangoPlaylistCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromPlaylistArgs = {
  input: MangoPlaylistCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddCreditToPlaylistArgs = {
  input: MangoPlaylistCreditListInput;
};


export type MangoRootMutationRemoveCreditFromPlaylistArgs = {
  input: MangoPlaylistCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToPlaylistArgs = {
  input: MangoPlaylistEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromPlaylistArgs = {
  input: MangoPlaylistEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToPlaylistArgs = {
  input: MangoPlaylistExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromPlaylistArgs = {
  input: MangoPlaylistExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToPlaylistArgs = {
  input: MangoPlaylistExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromPlaylistArgs = {
  input: MangoPlaylistExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToPlaylistArgs = {
  input: MangoPlaylistFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromPlaylistArgs = {
  input: MangoPlaylistFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddFormatToPlaylistArgs = {
  input: MangoPlaylistFormatListInput;
};


export type MangoRootMutationRemoveFormatFromPlaylistArgs = {
  input: MangoPlaylistFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddGenreToPlaylistArgs = {
  input: MangoPlaylistGenreListInput;
};


export type MangoRootMutationRemoveGenreFromPlaylistArgs = {
  input: MangoPlaylistGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToPlaylistArgs = {
  input: MangoPlaylistProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromPlaylistArgs = {
  input: MangoPlaylistProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToPlaylistArgs = {
  input: MangoPlaylistRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromPlaylistArgs = {
  input: MangoPlaylistRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddTagToPlaylistArgs = {
  input: MangoPlaylistTagListInput;
};


export type MangoRootMutationRemoveTagFromPlaylistArgs = {
  input: MangoPlaylistTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToPlaylistArgs = {
  input: MangoPlaylistTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromPlaylistArgs = {
  input: MangoPlaylistTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToPlaylistArgs = {
  input: MangoPlaylistTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromPlaylistArgs = {
  input: MangoPlaylistTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromPlaylistArgs = {
  input: MangoPlaylistRemoveAllListInput;
};


export type MangoRootMutationCreateProgrammeArgs = {
  input: MangoProgrammeCreateInput;
};


export type MangoRootMutationUpdateProgrammeArgs = {
  input: MangoProgrammeUpdateInput;
};


export type MangoRootMutationAddAudienceToProgrammeArgs = {
  input: MangoProgrammeAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromProgrammeArgs = {
  input: MangoProgrammeAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToProgrammeArgs = {
  input: MangoProgrammeAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromProgrammeArgs = {
  input: MangoProgrammeAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToProgrammeArgs = {
  input: MangoProgrammeAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromProgrammeArgs = {
  input: MangoProgrammeAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToProgrammeArgs = {
  input: MangoProgrammeCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromProgrammeArgs = {
  input: MangoProgrammeCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToProgrammeArgs = {
  input: MangoProgrammeCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromProgrammeArgs = {
  input: MangoProgrammeCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddCreditToProgrammeArgs = {
  input: MangoProgrammeCreditListInput;
};


export type MangoRootMutationRemoveCreditFromProgrammeArgs = {
  input: MangoProgrammeCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToProgrammeArgs = {
  input: MangoProgrammeEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromProgrammeArgs = {
  input: MangoProgrammeEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToProgrammeArgs = {
  input: MangoProgrammeExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromProgrammeArgs = {
  input: MangoProgrammeExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToProgrammeArgs = {
  input: MangoProgrammeExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromProgrammeArgs = {
  input: MangoProgrammeExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToProgrammeArgs = {
  input: MangoProgrammeFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromProgrammeArgs = {
  input: MangoProgrammeFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddFormatToProgrammeArgs = {
  input: MangoProgrammeFormatListInput;
};


export type MangoRootMutationRemoveFormatFromProgrammeArgs = {
  input: MangoProgrammeFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddGenreToProgrammeArgs = {
  input: MangoProgrammeGenreListInput;
};


export type MangoRootMutationRemoveGenreFromProgrammeArgs = {
  input: MangoProgrammeGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToProgrammeArgs = {
  input: MangoProgrammeProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromProgrammeArgs = {
  input: MangoProgrammeProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToProgrammeArgs = {
  input: MangoProgrammeRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromProgrammeArgs = {
  input: MangoProgrammeRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToProgrammeArgs = {
  input: MangoProgrammeSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromProgrammeArgs = {
  input: MangoProgrammeSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddTagToProgrammeArgs = {
  input: MangoProgrammeTagListInput;
};


export type MangoRootMutationRemoveTagFromProgrammeArgs = {
  input: MangoProgrammeTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToProgrammeArgs = {
  input: MangoProgrammeTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromProgrammeArgs = {
  input: MangoProgrammeTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToProgrammeArgs = {
  input: MangoProgrammeTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromProgrammeArgs = {
  input: MangoProgrammeTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToProgrammeArgs = {
  input: MangoProgrammeVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromProgrammeArgs = {
  input: MangoProgrammeVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromProgrammeArgs = {
  input: MangoProgrammeRemoveAllListInput;
};


export type MangoRootMutationUpdatePublicationEventArgs = {
  input: MangoPublicationEventUpdateInput;
};


export type MangoRootMutationCreateSeasonArgs = {
  input: MangoSeasonCreateInput;
};


export type MangoRootMutationUpdateSeasonArgs = {
  input: MangoSeasonUpdateInput;
};


export type MangoRootMutationAddAudienceToSeasonArgs = {
  input: MangoSeasonAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromSeasonArgs = {
  input: MangoSeasonAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToSeasonArgs = {
  input: MangoSeasonAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromSeasonArgs = {
  input: MangoSeasonAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToSeasonArgs = {
  input: MangoSeasonCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromSeasonArgs = {
  input: MangoSeasonCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddCreditToSeasonArgs = {
  input: MangoSeasonCreditListInput;
};


export type MangoRootMutationRemoveCreditFromSeasonArgs = {
  input: MangoSeasonCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToSeasonArgs = {
  input: MangoSeasonEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromSeasonArgs = {
  input: MangoSeasonEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToSeasonArgs = {
  input: MangoSeasonExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromSeasonArgs = {
  input: MangoSeasonExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToSeasonArgs = {
  input: MangoSeasonExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromSeasonArgs = {
  input: MangoSeasonExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToSeasonArgs = {
  input: MangoSeasonFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromSeasonArgs = {
  input: MangoSeasonFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddFormatToSeasonArgs = {
  input: MangoSeasonFormatListInput;
};


export type MangoRootMutationRemoveFormatFromSeasonArgs = {
  input: MangoSeasonFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddGenreToSeasonArgs = {
  input: MangoSeasonGenreListInput;
};


export type MangoRootMutationRemoveGenreFromSeasonArgs = {
  input: MangoSeasonGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToSeasonArgs = {
  input: MangoSeasonProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromSeasonArgs = {
  input: MangoSeasonProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToSeasonArgs = {
  input: MangoSeasonRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromSeasonArgs = {
  input: MangoSeasonRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddTagToSeasonArgs = {
  input: MangoSeasonTagListInput;
};


export type MangoRootMutationRemoveTagFromSeasonArgs = {
  input: MangoSeasonTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToSeasonArgs = {
  input: MangoSeasonTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromSeasonArgs = {
  input: MangoSeasonTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToSeasonArgs = {
  input: MangoSeasonTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromSeasonArgs = {
  input: MangoSeasonTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromSeasonArgs = {
  input: MangoSeasonRemoveAllListInput;
};


export type MangoRootMutationUpdateSectionArgs = {
  input: MangoSectionUpdateInput;
};


export type MangoRootMutationCreateSectionTemplateArgs = {
  input: MangoSectionTemplateCreateInput;
};


export type MangoRootMutationUpsertSectionTemplateArgs = {
  input: MangoSectionTemplateCreateInput;
};


export type MangoRootMutationUpdateSectionTemplateArgs = {
  input: MangoSectionTemplateUpdateInput;
};


export type MangoRootMutationCreateSeriesArgs = {
  input: MangoSeriesCreateInput;
};


export type MangoRootMutationUpdateSeriesArgs = {
  input: MangoSeriesUpdateInput;
};


export type MangoRootMutationAddAudienceToSeriesArgs = {
  input: MangoSeriesAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromSeriesArgs = {
  input: MangoSeriesAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToSeriesArgs = {
  input: MangoSeriesAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromSeriesArgs = {
  input: MangoSeriesAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddBrandingImageToSeriesArgs = {
  input: MangoSeriesBrandingImageListInput;
};


export type MangoRootMutationRemoveBrandingImageFromSeriesArgs = {
  input: MangoSeriesBrandingImageListInput;
};


export type MangoRootMutationRemoveAllBrandingImagesFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToSeriesArgs = {
  input: MangoSeriesCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromSeriesArgs = {
  input: MangoSeriesCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddCreditToSeriesArgs = {
  input: MangoSeriesCreditListInput;
};


export type MangoRootMutationRemoveCreditFromSeriesArgs = {
  input: MangoSeriesCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToSeriesArgs = {
  input: MangoSeriesEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromSeriesArgs = {
  input: MangoSeriesEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToSeriesArgs = {
  input: MangoSeriesExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromSeriesArgs = {
  input: MangoSeriesExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToSeriesArgs = {
  input: MangoSeriesExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromSeriesArgs = {
  input: MangoSeriesExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToSeriesArgs = {
  input: MangoSeriesFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromSeriesArgs = {
  input: MangoSeriesFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddFormatToSeriesArgs = {
  input: MangoSeriesFormatListInput;
};


export type MangoRootMutationRemoveFormatFromSeriesArgs = {
  input: MangoSeriesFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddGenreToSeriesArgs = {
  input: MangoSeriesGenreListInput;
};


export type MangoRootMutationRemoveGenreFromSeriesArgs = {
  input: MangoSeriesGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddHomePageToSeriesArgs = {
  input: MangoSeriesHomePageListInput;
};


export type MangoRootMutationRemoveHomePageFromSeriesArgs = {
  input: MangoSeriesHomePageListInput;
};


export type MangoRootMutationRemoveAllHomePagesFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToSeriesArgs = {
  input: MangoSeriesProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromSeriesArgs = {
  input: MangoSeriesProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToSeriesArgs = {
  input: MangoSeriesRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromSeriesArgs = {
  input: MangoSeriesRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddTagToSeriesArgs = {
  input: MangoSeriesTagListInput;
};


export type MangoRootMutationRemoveTagFromSeriesArgs = {
  input: MangoSeriesTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToSeriesArgs = {
  input: MangoSeriesTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromSeriesArgs = {
  input: MangoSeriesTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToSeriesArgs = {
  input: MangoSeriesTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromSeriesArgs = {
  input: MangoSeriesTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromSeriesArgs = {
  input: MangoSeriesRemoveAllListInput;
};


export type MangoRootMutationUpdateSocialMediaAccountArgs = {
  input: MangoSocialMediaAccountUpdateInput;
};


export type MangoRootMutationCreateSubscriptionArgs = {
  input: MangoSubscriptionCreateInput;
};


export type MangoRootMutationUpsertSubscriptionArgs = {
  input: MangoSubscriptionCreateInput;
};


export type MangoRootMutationUpdateSubscriptionArgs = {
  input: MangoSubscriptionUpdateInput;
};


export type MangoRootMutationUpdateSubtitleArgs = {
  input: MangoSubtitleUpdateInput;
};


export type MangoRootMutationAddTimedTextFileToSubtitleArgs = {
  input: MangoSubtitleTimedTextFileListInput;
};


export type MangoRootMutationRemoveTimedTextFileFromSubtitleArgs = {
  input: MangoSubtitleTimedTextFileListInput;
};


export type MangoRootMutationRemoveAllTimedTextFilesFromSubtitleArgs = {
  input: MangoSubtitleRemoveAllListInput;
};


export type MangoRootMutationUpdateTeaserContentArgs = {
  input: MangoTeaserContentUpdateInput;
};


export type MangoRootMutationCreateTimedTextFileArgs = {
  input: MangoTimedTextFileCreateInput;
};


export type MangoRootMutationUpdateTimedTextFileArgs = {
  input: MangoTimedTextFileUpdateInput;
};


export type MangoRootMutationAddAccessibleInToTimedTextFileArgs = {
  input: MangoTimedTextFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAccessibleInFromTimedTextFileArgs = {
  input: MangoTimedTextFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAllAccessibleInFromTimedTextFileArgs = {
  input: MangoTimedTextFileRemoveAllListInput;
};


export type MangoRootMutationUpdateTrackingInfoArgs = {
  input: MangoTrackingInfoUpdateInput;
};


export type MangoRootMutationCreateTrailerArgs = {
  input: MangoTrailerCreateInput;
};


export type MangoRootMutationUpdateTrailerArgs = {
  input: MangoTrailerUpdateInput;
};


export type MangoRootMutationAddAudienceToTrailerArgs = {
  input: MangoTrailerAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromTrailerArgs = {
  input: MangoTrailerAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddAudioFileToTrailerArgs = {
  input: MangoTrailerAudioFileListInput;
};


export type MangoRootMutationRemoveAudioFileFromTrailerArgs = {
  input: MangoTrailerAudioFileListInput;
};


export type MangoRootMutationRemoveAllAudioFilesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToTrailerArgs = {
  input: MangoTrailerAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromTrailerArgs = {
  input: MangoTrailerAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddCaptionFileToTrailerArgs = {
  input: MangoTrailerCaptionFileListInput;
};


export type MangoRootMutationRemoveCaptionFileFromTrailerArgs = {
  input: MangoTrailerCaptionFileListInput;
};


export type MangoRootMutationRemoveAllCaptionFilesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToTrailerArgs = {
  input: MangoTrailerCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromTrailerArgs = {
  input: MangoTrailerCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddCreditToTrailerArgs = {
  input: MangoTrailerCreditListInput;
};


export type MangoRootMutationRemoveCreditFromTrailerArgs = {
  input: MangoTrailerCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToTrailerArgs = {
  input: MangoTrailerEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromTrailerArgs = {
  input: MangoTrailerEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToTrailerArgs = {
  input: MangoTrailerExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromTrailerArgs = {
  input: MangoTrailerExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToTrailerArgs = {
  input: MangoTrailerExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromTrailerArgs = {
  input: MangoTrailerExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddExtraOfToTrailerArgs = {
  input: MangoTrailerExtraOfListInput;
};


export type MangoRootMutationRemoveExtraOfFromTrailerArgs = {
  input: MangoTrailerExtraOfListInput;
};


export type MangoRootMutationRemoveAllExtraOfFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToTrailerArgs = {
  input: MangoTrailerFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromTrailerArgs = {
  input: MangoTrailerFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddFormatToTrailerArgs = {
  input: MangoTrailerFormatListInput;
};


export type MangoRootMutationRemoveFormatFromTrailerArgs = {
  input: MangoTrailerFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddGenreToTrailerArgs = {
  input: MangoTrailerGenreListInput;
};


export type MangoRootMutationRemoveGenreFromTrailerArgs = {
  input: MangoTrailerGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToTrailerArgs = {
  input: MangoTrailerProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromTrailerArgs = {
  input: MangoTrailerProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToTrailerArgs = {
  input: MangoTrailerRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromTrailerArgs = {
  input: MangoTrailerRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddSignLanguageEssenceToTrailerArgs = {
  input: MangoTrailerSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveSignLanguageEssenceFromTrailerArgs = {
  input: MangoTrailerSignLanguageEssenceListInput;
};


export type MangoRootMutationRemoveAllSignLanguageEssencesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddTagToTrailerArgs = {
  input: MangoTrailerTagListInput;
};


export type MangoRootMutationRemoveTagFromTrailerArgs = {
  input: MangoTrailerTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToTrailerArgs = {
  input: MangoTrailerTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromTrailerArgs = {
  input: MangoTrailerTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddTrailerOfToTrailerArgs = {
  input: MangoTrailerTrailerOfListInput;
};


export type MangoRootMutationRemoveTrailerOfFromTrailerArgs = {
  input: MangoTrailerTrailerOfListInput;
};


export type MangoRootMutationRemoveAllTrailerOfFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToTrailerArgs = {
  input: MangoTrailerTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromTrailerArgs = {
  input: MangoTrailerTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationAddVideoFileToTrailerArgs = {
  input: MangoTrailerVideoFileListInput;
};


export type MangoRootMutationRemoveVideoFileFromTrailerArgs = {
  input: MangoTrailerVideoFileListInput;
};


export type MangoRootMutationRemoveAllVideoFilesFromTrailerArgs = {
  input: MangoTrailerRemoveAllListInput;
};


export type MangoRootMutationUpdateTwitterAccountArgs = {
  input: MangoTwitterAccountUpdateInput;
};


export type MangoRootMutationUpdateUserArgs = {
  input: MangoUserUpdateInput;
};


export type MangoRootMutationAddExternalUrlToUserArgs = {
  input: MangoUserExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromUserArgs = {
  input: MangoUserExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromUserArgs = {
  input: MangoUserRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToUserArgs = {
  input: MangoUserFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromUserArgs = {
  input: MangoUserFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromUserArgs = {
  input: MangoUserRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToUserArgs = {
  input: MangoUserTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromUserArgs = {
  input: MangoUserTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromUserArgs = {
  input: MangoUserRemoveAllListInput;
};


export type MangoRootMutationCreateVideoFileArgs = {
  input: MangoVideoFileCreateInput;
};


export type MangoRootMutationUpdateVideoFileArgs = {
  input: MangoVideoFileUpdateInput;
};


export type MangoRootMutationAddAccessibleInToVideoFileArgs = {
  input: MangoVideoFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAccessibleInFromVideoFileArgs = {
  input: MangoVideoFileAccessibleInListInput;
};


export type MangoRootMutationRemoveAllAccessibleInFromVideoFileArgs = {
  input: MangoVideoFileRemoveAllListInput;
};


export type MangoRootMutationUpdateWebPageArgs = {
  input: MangoWebPageUpdateInput;
};


export type MangoRootMutationAddAudienceToWebPageArgs = {
  input: MangoWebPageAudienceListInput;
};


export type MangoRootMutationRemoveAudienceFromWebPageArgs = {
  input: MangoWebPageAudienceListInput;
};


export type MangoRootMutationRemoveAllAudiencesFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddAuthorToWebPageArgs = {
  input: MangoWebPageAuthorListInput;
};


export type MangoRootMutationRemoveAuthorFromWebPageArgs = {
  input: MangoWebPageAuthorListInput;
};


export type MangoRootMutationRemoveAllAuthorsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddCategoryToWebPageArgs = {
  input: MangoWebPageCategoryListInput;
};


export type MangoRootMutationRemoveCategoryFromWebPageArgs = {
  input: MangoWebPageCategoryListInput;
};


export type MangoRootMutationRemoveAllCategoriesFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddCreditToWebPageArgs = {
  input: MangoWebPageCreditListInput;
};


export type MangoRootMutationRemoveCreditFromWebPageArgs = {
  input: MangoWebPageCreditListInput;
};


export type MangoRootMutationRemoveAllCreditsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddEssenceToWebPageArgs = {
  input: MangoWebPageEssenceListInput;
};


export type MangoRootMutationRemoveEssenceFromWebPageArgs = {
  input: MangoWebPageEssenceListInput;
};


export type MangoRootMutationRemoveAllEssencesFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddExecutiveProducerToWebPageArgs = {
  input: MangoWebPageExecutiveProducerListInput;
};


export type MangoRootMutationRemoveExecutiveProducerFromWebPageArgs = {
  input: MangoWebPageExecutiveProducerListInput;
};


export type MangoRootMutationRemoveAllExecutiveProducersFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddExternalUrlToWebPageArgs = {
  input: MangoWebPageExternalUrlListInput;
};


export type MangoRootMutationRemoveExternalUrlFromWebPageArgs = {
  input: MangoWebPageExternalUrlListInput;
};


export type MangoRootMutationRemoveAllExternalUrlsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddFacebookAccountToWebPageArgs = {
  input: MangoWebPageFacebookAccountListInput;
};


export type MangoRootMutationRemoveFacebookAccountFromWebPageArgs = {
  input: MangoWebPageFacebookAccountListInput;
};


export type MangoRootMutationRemoveAllFacebookAccountsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddFormatToWebPageArgs = {
  input: MangoWebPageFormatListInput;
};


export type MangoRootMutationRemoveFormatFromWebPageArgs = {
  input: MangoWebPageFormatListInput;
};


export type MangoRootMutationRemoveAllFormatsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddGenreToWebPageArgs = {
  input: MangoWebPageGenreListInput;
};


export type MangoRootMutationRemoveGenreFromWebPageArgs = {
  input: MangoWebPageGenreListInput;
};


export type MangoRootMutationRemoveAllGenresFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddProducingDepartmentToWebPageArgs = {
  input: MangoWebPageProducingDepartmentListInput;
};


export type MangoRootMutationRemoveProducingDepartmentFromWebPageArgs = {
  input: MangoWebPageProducingDepartmentListInput;
};


export type MangoRootMutationRemoveAllProducingDepartmentsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddRelatedLinkToWebPageArgs = {
  input: MangoWebPageRelatedLinkListInput;
};


export type MangoRootMutationRemoveRelatedLinkFromWebPageArgs = {
  input: MangoWebPageRelatedLinkListInput;
};


export type MangoRootMutationRemoveAllRelatedLinksFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddTagToWebPageArgs = {
  input: MangoWebPageTagListInput;
};


export type MangoRootMutationRemoveTagFromWebPageArgs = {
  input: MangoWebPageTagListInput;
};


export type MangoRootMutationRemoveAllTagsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddTeaserImageToWebPageArgs = {
  input: MangoWebPageTeaserImageListInput;
};


export type MangoRootMutationRemoveTeaserImageFromWebPageArgs = {
  input: MangoWebPageTeaserImageListInput;
};


export type MangoRootMutationRemoveAllTeaserImagesFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationAddTwitterAccountToWebPageArgs = {
  input: MangoWebPageTwitterAccountListInput;
};


export type MangoRootMutationRemoveTwitterAccountFromWebPageArgs = {
  input: MangoWebPageTwitterAccountListInput;
};


export type MangoRootMutationRemoveAllTwitterAccountsFromWebPageArgs = {
  input: MangoWebPageRemoveAllListInput;
};


export type MangoRootMutationUpdateWebhookArgs = {
  input: MangoWebhookUpdateInput;
};


export type MangoRootMutationAddFilterToWebhookArgs = {
  input: MangoWebhookFilterListInput;
};


export type MangoRootMutationRemoveFilterFromWebhookArgs = {
  input: MangoWebhookFilterListInput;
};


export type MangoRootMutationRemoveAllFiltersFromWebhookArgs = {
  input: MangoWebhookRemoveAllListInput;
};


export type MangoRootMutationUpdateWritableThingArgs = {
  input: MangoWritableThingUpdateInput;
};


export type MangoRootMutationDeleteContentInteractionArgs = {
  input: MangoDeleteInput;
};


export type MangoRootMutationDeleteDeletableThingArgs = {
  input: MangoDeleteInput;
};


export type MangoRootMutationDeleteSubscriptionArgs = {
  input: MangoDeleteInput;
};


export type MangoRootMutationLikeArgs = {
  input: MangoLikeInput;
};


export type MangoRootMutationDislikeArgs = {
  input: MangoLikeInput;
};


export type MangoRootMutationUnsetReactionArgs = {
  input: MangoLikeInput;
};


export type MangoRootMutationSubscribeArgs = {
  input: MangoSubscribeInput;
};


export type MangoRootMutationUnsubscribeArgs = {
  input: MangoUnsubscribeInput;
};


export type MangoRootMutationDeleteMySubscriptionsArgs = {
  input: MangoDeleteMySubscriptionsInput;
};


export type MangoRootMutationVisitSubscriptionArgs = {
  input: MangoVisitSubscriptionInput;
};


export type MangoRootMutationUpsertMyContentInteractionArgs = {
  input: MangoMyContentInteractionCreateInput;
};


export type MangoRootMutationDeleteMyContentInteractionsArgs = {
  input: MangoDeleteMyContentInteractionInput;
};


export type MangoRootMutationAddToMyBookmarksArgs = {
  input?: Maybe<MangoAddToMyBookmarksInput>;
};


export type MangoRootMutationRemoveFromMyBookmarksArgs = {
  input?: Maybe<MangoRemoveFromMyBookmarksInput>;
};


export type MangoRootMutationRemoveAllMyBookmarksArgs = {
  input?: Maybe<MangoRemoveAllMyBookmarksInput>;
};


export type MangoRootMutationDeleteMyPersonalDataArgs = {
  input: MangoDeleteMyPersonalDataInput;
};

export type MangoRootQuery = {
   __typename?: 'MangoRootQuery';
  node?: Maybe<MangoNode>;
  nodes?: Maybe<Array<Maybe<MangoNode>>>;
  viewer?: Maybe<MangoViewer>;
};


export type MangoRootQueryNodeArgs = {
  id: Scalars['ID'];
};


export type MangoRootQueryNodesArgs = {
  ids: Array<Maybe<Scalars['ID']>>;
};

/**  (de: Staffel, en: season) */
export type MangoSeason = MangoNode & MangoSeasonInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoGroupingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoSubjectInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSeason';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** Associates a season with a series. (de: Staffel von, en: season of) */
  seasonOf?: Maybe<MangoSeriesInterface>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoSeasonAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  season: Scalars['ID'];
};

/** This is a generated connection for Season */
export type MangoSeasonConnection = {
   __typename?: 'MangoSeasonConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSeasonInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSeasonEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Season */
export type MangoSeasonCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Season */
  type?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a season with a series. (de: Staffel von, en: season of) */
  seasonOf: Scalars['ID'];
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoSeasonCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  season: Scalars['ID'];
};

/** This is a generated edge for Season */
export type MangoSeasonEdge = {
   __typename?: 'MangoSeasonEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSeasonInterface>;
};

export type MangoSeasonEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property seasonOf */
  seasonOf?: Maybe<MangoSeriesRelationFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property slug */
  slug?: Maybe<MangoStringFilter>;
  /** Filter by values of property snippet */
  snippet?: Maybe<MangoStringFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of Season */
  term?: Maybe<Scalars['String']>;
};

export type MangoSeasonFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  season: Scalars['ID'];
};

/**  (de: Staffel, en: season) */
export type MangoSeasonInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** Associates a season with a series. (de: Staffel von, en: season of) */
  seasonOf?: Maybe<MangoSeriesInterface>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/**  (de: Staffel, en: season) */
export type MangoSeasonInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** The payload returned from mutations of Season. */
export type MangoSeasonPayload = {
   __typename?: 'MangoSeasonPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSeason?: Maybe<MangoSeason>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoSeasonProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoSeasonRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  season: Scalars['ID'];
};

export enum MangoSeasonSortOrder {
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  SlugAsc = 'SLUG_ASC',
  SlugDesc = 'SLUG_DESC',
  SnippetAsc = 'SNIPPET_ASC',
  SnippetDesc = 'SNIPPET_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoSeasonTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  season: Scalars['ID'];
};

export type MangoSeasonTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  season: Scalars['ID'];
};

/** Input parameter for the update mutation of Season */
export type MangoSeasonUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a season with a series. (de: Staffel von, en: season of) */
  seasonOf?: Maybe<Scalars['ID']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

/** A horizontal section of content spanning the full board width. (de: Abschnitt, en: Section) */
export type MangoSection = MangoNode & MangoSectionInterface & MangoDeletableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSection';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Additional content for this section. (de: Weitere Inhalte zu diesem Thema, en: Additional content) */
  additionalContent?: Maybe<MangoBoardInterface>;
  /** Lists all boards containing this section. (de: Seite, en: board) */
  boards?: Maybe<MangoBoardConnection>;
  /** Links a section to all items of content its elements (in the template) should be filled with. (de: Inhalt, en: content) */
  contents?: Maybe<MangoTeaserContentConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The query that the backend will run to determine the content items of the section. () */
  query?: Maybe<Scalars['String']>;
  /** The section template that should be used to layout this section. () */
  template?: Maybe<MangoSectionTemplateInterface>;
  /**
   * If present, renders a title on top of the section, to introduce what kind of
   * content will be seen below (e.g. category, theme, curator intent...) ()
   */
  title?: Maybe<Scalars['String']>;
};


/** A horizontal section of content spanning the full board width. (de: Abschnitt, en: Section) */
export type MangoSectionBoardsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBoardFilter>;
  orderBy?: Maybe<MangoBoardSortOrder>;
};


/** A horizontal section of content spanning the full board width. (de: Abschnitt, en: Section) */
export type MangoSectionContentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTeaserContentFilter>;
  orderBy?: Maybe<MangoTeaserContentSortOrder>;
};

/** This is a generated connection for Section */
export type MangoSectionConnection = {
   __typename?: 'MangoSectionConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSectionInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSectionEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoSectionConnectionFilter = {
  /** Filter by values of property additionalContent */
  additionalContent?: Maybe<MangoBoardRelationFilter>;
  /** Filter by values of property contents */
  contents?: Maybe<MangoTeaserContentConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property query */
  query?: Maybe<MangoStringFilter>;
  /** Filter by values of property template */
  template?: Maybe<MangoSectionTemplateRelationFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** Input parameter for the create mutation of Section */
export type MangoSectionCreateInput = {
  /** The type of the created object. Defaults to Section */
  type?: Maybe<Scalars['String']>;
  /** Additional content for this section. (de: Weitere Inhalte zu diesem Thema, en: Additional content) */
  additionalContent?: Maybe<Scalars['ID']>;
  /** Links a section to all items of content its elements (in the template) should be filled with. (de: Inhalt, en: content) */
  contents?: Maybe<Array<Maybe<MangoTeaserContentCreateInput>>>;
  /** The query that the backend will run to determine the content items of the section. () */
  query?: Maybe<Scalars['String']>;
  /** The section template that should be used to layout this section. () */
  template?: Maybe<Scalars['ID']>;
  /**
   * If present, renders a title on top of the section, to introduce what kind of
   * content will be seen below (e.g. category, theme, curator intent...) ()
   */
  title?: Maybe<Scalars['String']>;
};

/** This is a generated edge for Section */
export type MangoSectionEdge = {
   __typename?: 'MangoSectionEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSectionInterface>;
};

export type MangoSectionFilter = {
  /** Filter by values of property additionalContent */
  additionalContent?: Maybe<MangoBoardRelationFilter>;
  /** Filter by values of property contents */
  contents?: Maybe<MangoTeaserContentConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property query */
  query?: Maybe<MangoStringFilter>;
  /** Filter by values of property template */
  template?: Maybe<MangoSectionTemplateRelationFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
};

/** A horizontal section of content spanning the full board width. (de: Abschnitt, en: Section) */
export type MangoSectionInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Additional content for this section. (de: Weitere Inhalte zu diesem Thema, en: Additional content) */
  additionalContent?: Maybe<MangoBoardInterface>;
  /** Lists all boards containing this section. (de: Seite, en: board) */
  boards?: Maybe<MangoBoardConnection>;
  /** Links a section to all items of content its elements (in the template) should be filled with. (de: Inhalt, en: content) */
  contents?: Maybe<MangoTeaserContentConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The query that the backend will run to determine the content items of the section. () */
  query?: Maybe<Scalars['String']>;
  /** The section template that should be used to layout this section. () */
  template?: Maybe<MangoSectionTemplateInterface>;
  /**
   * If present, renders a title on top of the section, to introduce what kind of
   * content will be seen below (e.g. category, theme, curator intent...) ()
   */
  title?: Maybe<Scalars['String']>;
};


/** A horizontal section of content spanning the full board width. (de: Abschnitt, en: Section) */
export type MangoSectionInterfaceBoardsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBoardFilter>;
  orderBy?: Maybe<MangoBoardSortOrder>;
};


/** A horizontal section of content spanning the full board width. (de: Abschnitt, en: Section) */
export type MangoSectionInterfaceContentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTeaserContentFilter>;
  orderBy?: Maybe<MangoTeaserContentSortOrder>;
};

/** The payload returned from mutations of Section. */
export type MangoSectionPayload = {
   __typename?: 'MangoSectionPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSection?: Maybe<MangoSection>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoSectionSortOrder {
  ContentsCreatedatAsc = 'CONTENTS_CREATEDAT_ASC',
  ContentsCreatedatDesc = 'CONTENTS_CREATEDAT_DESC',
  ContentsCustomkickerAsc = 'CONTENTS_CUSTOMKICKER_ASC',
  ContentsCustomkickerDesc = 'CONTENTS_CUSTOMKICKER_DESC',
  ContentsCustomshortdescriptionAsc = 'CONTENTS_CUSTOMSHORTDESCRIPTION_ASC',
  ContentsCustomshortdescriptionDesc = 'CONTENTS_CUSTOMSHORTDESCRIPTION_DESC',
  ContentsCustomtitleAsc = 'CONTENTS_CUSTOMTITLE_ASC',
  ContentsCustomtitleDesc = 'CONTENTS_CUSTOMTITLE_DESC',
  ContentsModifiedatAsc = 'CONTENTS_MODIFIEDAT_ASC',
  ContentsModifiedatDesc = 'CONTENTS_MODIFIEDAT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  QueryAsc = 'QUERY_ASC',
  QueryDesc = 'QUERY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC'
}

/**
 * A template, abstractly describing the layout of elements in a section,
 * independent of the content they may be filled with. (de: Abschnittsschablone,
 * en: Section Template)
 */
export type MangoSectionTemplate = MangoNode & MangoSectionTemplateInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSectionTemplate';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** human-readable name of the layout template. () */
  name?: Maybe<Scalars['String']>;
};

/** This is a generated connection for SectionTemplate */
export type MangoSectionTemplateConnection = {
   __typename?: 'MangoSectionTemplateConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSectionTemplateInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSectionTemplateEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of SectionTemplate */
export type MangoSectionTemplateCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to SectionTemplate */
  type?: Maybe<Scalars['String']>;
  /** human-readable name of the layout template. () */
  name?: Maybe<Scalars['String']>;
};

/** This is a generated edge for SectionTemplate */
export type MangoSectionTemplateEdge = {
   __typename?: 'MangoSectionTemplateEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSectionTemplateInterface>;
};

export type MangoSectionTemplateFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property name */
  name?: Maybe<MangoStringFilter>;
};

/**
 * A template, abstractly describing the layout of elements in a section,
 * independent of the content they may be filled with. (de: Abschnittsschablone,
 * en: Section Template)
 */
export type MangoSectionTemplateInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** human-readable name of the layout template. () */
  name?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of SectionTemplate. */
export type MangoSectionTemplatePayload = {
   __typename?: 'MangoSectionTemplatePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSectionTemplate?: Maybe<MangoSectionTemplate>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoSectionTemplateRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoSectionTemplateSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** Input parameter for the update mutation of SectionTemplate */
export type MangoSectionTemplateUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** human-readable name of the layout template. () */
  name?: Maybe<Scalars['String']>;
};

/** Input parameter for the update mutation of Section */
export type MangoSectionUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Additional content for this section. (de: Weitere Inhalte zu diesem Thema, en: Additional content) */
  additionalContent?: Maybe<Scalars['ID']>;
  /** Links a section to all items of content its elements (in the template) should be filled with. (de: Inhalt, en: content) */
  contents?: Maybe<Array<Maybe<MangoTeaserContentCreateInput>>>;
  /** The query that the backend will run to determine the content items of the section. () */
  query?: Maybe<Scalars['String']>;
  /** The section template that should be used to layout this section. () */
  template?: Maybe<Scalars['ID']>;
  /**
   * If present, renders a title on top of the section, to introduce what kind of
   * content will be seen below (e.g. category, theme, curator intent...) ()
   */
  title?: Maybe<Scalars['String']>;
};

/**  (de: Sendereihe, en: series) */
export type MangoSeries = MangoNode & MangoSeriesInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoGroupingInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSeries';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /**
   * Provides the branding images of a series (e.g. the background banner for the
   * series) (de: Branding Bild, en: branding image)
   */
  brandingImages?: Maybe<MangoImageConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a Series with its programmes. (de: Episodes, en: episodes) */
  episodes?: Maybe<MangoProgrammeConnection>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /** Associates a Series with its external homepage. (de: Externe Homepage, en: external homepage) */
  homePages?: Maybe<MangoExternalUrlConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** Informal description about the schedule of the series. (de: Sendezeiten, en: schedule info) */
  scheduleInfo?: Maybe<Scalars['String']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Is the Series subscribed by current User? */
  subscribed?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesBrandingImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesEpisodesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesHomePagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoSeriesAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesBrandingImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  brandingImage: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  series: Scalars['ID'];
};

/** This is a generated connection for Series */
export type MangoSeriesConnection = {
   __typename?: 'MangoSeriesConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSeriesInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSeriesEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Series */
export type MangoSeriesCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Series */
  type?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Provides the branding images of a series (e.g. the background banner for the
   * series) (de: Branding Bild, en: branding image)
   */
  brandingImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Series with its external homepage. (de: Externe Homepage, en: external homepage) */
  homePages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Informal description about the schedule of the series. (de: Sendezeiten, en: schedule info) */
  scheduleInfo?: Maybe<Scalars['String']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoSeriesCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  series: Scalars['ID'];
};

/** This is a generated edge for Series */
export type MangoSeriesEdge = {
   __typename?: 'MangoSeriesEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSeriesInterface>;
};

export type MangoSeriesEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesFilter = {
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property brandingImages */
  brandingImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property homePages */
  homePages?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property scheduleInfo */
  scheduleInfo?: Maybe<MangoStringFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property subscribed */
  subscribed?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Perform a fulltext search on all text properties of Series */
  term?: Maybe<Scalars['String']>;
};

export type MangoSeriesFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  series: Scalars['ID'];
};

/** A group of series in the series index. */
export type MangoSeriesGroup = {
   __typename?: 'MangoSeriesGroup';
  /** The title of the group. */
  title: Scalars['String'];
  /** The series in the group. */
  nodes: Array<Maybe<MangoSeriesInterface>>;
};

export type MangoSeriesHomePageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  homePage: Scalars['ID'];
  series: Scalars['ID'];
};

/** Index of series. */
export type MangoSeriesIndex = {
   __typename?: 'MangoSeriesIndex';
  /** The series grouped by title */
  groups: Array<Maybe<MangoSeriesGroup>>;
};

/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /**
   * Provides the branding images of a series (e.g. the background banner for the
   * series) (de: Branding Bild, en: branding image)
   */
  brandingImages?: Maybe<MangoImageConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a Series with its programmes. (de: Episodes, en: episodes) */
  episodes?: Maybe<MangoProgrammeConnection>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /** Associates a Series with its external homepage. (de: Externe Homepage, en: external homepage) */
  homePages?: Maybe<MangoExternalUrlConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** Informal description about the schedule of the series. (de: Sendezeiten, en: schedule info) */
  scheduleInfo?: Maybe<Scalars['String']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Is the Series subscribed by current User? */
  subscribed?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceBrandingImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceEpisodesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceHomePagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/**  (de: Sendereihe, en: series) */
export type MangoSeriesInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** The payload returned from mutations of Series. */
export type MangoSeriesPayload = {
   __typename?: 'MangoSeriesPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSeries?: Maybe<MangoSeries>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoSeriesProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoSeriesRemoteRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoRemoteIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoSeriesRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  series: Scalars['ID'];
};

export enum MangoSeriesSortOrder {
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  ScheduleinfoAsc = 'SCHEDULEINFO_ASC',
  ScheduleinfoDesc = 'SCHEDULEINFO_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoSeriesTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  series: Scalars['ID'];
};

export type MangoSeriesTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  series: Scalars['ID'];
};

/** Input parameter for the update mutation of Series */
export type MangoSeriesUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Provides the branding images of a series (e.g. the background banner for the
   * series) (de: Branding Bild, en: branding image)
   */
  brandingImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Series with its external homepage. (de: Externe Homepage, en: external homepage) */
  homePages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Informal description about the schedule of the series. (de: Sendezeiten, en: schedule info) */
  scheduleInfo?: Maybe<Scalars['String']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

/** Any kind of thing which has content that is publicly available only for a limited time. (not documented) */
export type MangoShortlyAvailableThing = MangoNode & MangoShortlyAvailableThingInterface & {
   __typename?: 'MangoShortlyAvailableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Any kind of thing which has content that is publicly available only for a limited time. (not documented) */
export type MangoShortlyAvailableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Entry of the sibling list of a Item */
export type MangoSiblingItemEntry = {
   __typename?: 'MangoSiblingItemEntry';
  /** true if the entry represents the Item on which the information was requested, false otherwise */
  current: Scalars['Boolean'];
  /** the sibling */
  node?: Maybe<MangoItemInterface>;
};

/** Entry of the sibling list of a Programme */
export type MangoSiblingProgrammeEntry = {
   __typename?: 'MangoSiblingProgrammeEntry';
  /** true if the entry represents the Programme on which the information was requested, false otherwise */
  current: Scalars['Boolean'];
  /** the sibling */
  node?: Maybe<MangoProgrammeInterface>;
};

/** A reference to a social media account. (de: Social Media Account, en: social media account) */
export type MangoSocialMediaAccount = MangoNode & MangoSocialMediaAccountInterface & MangoExternalUrlInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSocialMediaAccount';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** A reference to a social media account. (de: Social Media Account, en: social media account) */
export type MangoSocialMediaAccountInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of SocialMediaAccount. */
export type MangoSocialMediaAccountPayload = {
   __typename?: 'MangoSocialMediaAccountPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSocialMediaAccount?: Maybe<MangoSocialMediaAccount>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** Input parameter for the update mutation of SocialMediaAccount */
export type MangoSocialMediaAccountUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/**  (not documented) */
export type MangoStatus = MangoNode & MangoStatusInterface & {
   __typename?: 'MangoStatus';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/**  (not documented) */
export type MangoStatusInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

export type MangoStatusRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export type MangoStringFilter = {
  /** A filter that matches if the value of the property is equal to the specified value */
  eq?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property not equal to the specified value */
  ne?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property is one of the values in the specified list */
  in?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A filter that matches if the value of the property is greater than the specified value */
  gt?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property is greater than or equal to the specified value */
  gte?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property is less than the specified value */
  lt?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property is less than or equal to the specified value */
  lte?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property starts with the specified string value */
  startsWith?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property ends with the specified string value */
  endsWith?: Maybe<Scalars['String']>;
  /** A filter that matches if the value of the property matches the specified regular expression */
  matches?: Maybe<Scalars['String']>;
};

/** A subject that a CreativeWork can be about. (de: Thema, en: subject) */
export type MangoSubject = MangoNode & MangoSubjectInterface & MangoCategorizationInterface & {
   __typename?: 'MangoSubject';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** A subject that a CreativeWork can be about. (de: Thema, en: subject) */
export type MangoSubjectWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Subject */
export type MangoSubjectConnection = {
   __typename?: 'MangoSubjectConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSubjectInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSubjectEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoSubjectConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Subject */
export type MangoSubjectEdge = {
   __typename?: 'MangoSubjectEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSubjectInterface>;
};

export type MangoSubjectFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** A subject that a CreativeWork can be about. (de: Thema, en: subject) */
export type MangoSubjectInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** A subject that a CreativeWork can be about. (de: Thema, en: subject) */
export type MangoSubjectInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoSubjectSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

export type MangoSubscribeInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  subscribable: Scalars['ID'];
  lastVisitedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** Describes a single subscription by an user. (de: Abonnement, en: Subscription) */
export type MangoSubscription = MangoNode & MangoSubscriptionInterface & MangoDeletableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSubscription';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** When the user visited the subscribed series for the last time. (de: zuletzt gesehen, en: last visited at) */
  lastVisitedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The entity a user has subscribed to. (de: Abonnierbares, en: subscribable) */
  subscribable?: Maybe<MangoSeriesInterface>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user?: Maybe<MangoEndUserInterface>;
};

/** This is a generated connection for Subscription */
export type MangoSubscriptionConnection = {
   __typename?: 'MangoSubscriptionConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSubscriptionInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSubscriptionEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Subscription */
export type MangoSubscriptionCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Subscription */
  type?: Maybe<Scalars['String']>;
  /** When the user visited the subscribed series for the last time. (de: zuletzt gesehen, en: last visited at) */
  lastVisitedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The entity a user has subscribed to. (de: Abonnierbares, en: subscribable) */
  subscribable: Scalars['ID'];
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user: Scalars['ID'];
};

/** This is a generated edge for Subscription */
export type MangoSubscriptionEdge = {
   __typename?: 'MangoSubscriptionEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSubscriptionInterface>;
};

export type MangoSubscriptionFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property lastVisitedAt */
  lastVisitedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property subscribable */
  subscribable?: Maybe<MangoSeriesRemoteRelationFilter>;
  /** Filter by values of property user */
  user?: Maybe<MangoEndUserRelationFilter>;
};

/** Describes a single subscription by an user. (de: Abonnement, en: Subscription) */
export type MangoSubscriptionInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** When the user visited the subscribed series for the last time. (de: zuletzt gesehen, en: last visited at) */
  lastVisitedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The entity a user has subscribed to. (de: Abonnierbares, en: subscribable) */
  subscribable?: Maybe<MangoSeriesInterface>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user?: Maybe<MangoEndUserInterface>;
};

/** The payload returned from mutations of Subscription. */
export type MangoSubscriptionPayload = {
   __typename?: 'MangoSubscriptionPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSubscription?: Maybe<MangoSubscription>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoSubscriptionSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LastvisitedatAsc = 'LASTVISITEDAT_ASC',
  LastvisitedatDesc = 'LASTVISITEDAT_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of Subscription */
export type MangoSubscriptionUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** When the user visited the subscribed series for the last time. (de: zuletzt gesehen, en: last visited at) */
  lastVisitedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The entity a user has subscribed to. (de: Abonnierbares, en: subscribable) */
  subscribable?: Maybe<Scalars['ID']>;
  /** Associates Subscriptions and ContentInteractions with a user. (de: user, en: user) */
  user?: Maybe<Scalars['ID']>;
};

/**  (de: Untertitel, en: subtitle) */
export type MangoSubtitle = MangoNode & MangoSubtitleInterface & MangoWritableThingInterface & {
   __typename?: 'MangoSubtitle';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<MangoTimedTextFileConnection>;
};


/**  (de: Untertitel, en: subtitle) */
export type MangoSubtitleTimedTextFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};

/** This is a generated connection for Subtitle */
export type MangoSubtitleConnection = {
   __typename?: 'MangoSubtitleConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoSubtitleInterface>>>;
  edges?: Maybe<Array<Maybe<MangoSubtitleEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoSubtitleConnectionFilter = {
  /** Filter by values of property closed */
  closed?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property embedded */
  embedded?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property language */
  language?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property timedTextFiles */
  timedTextFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** Input parameter for the create mutation of Subtitle */
export type MangoSubtitleCreateInput = {
  /** The type of the created object. Defaults to Subtitle */
  type?: Maybe<Scalars['String']>;
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/** This is a generated edge for Subtitle */
export type MangoSubtitleEdge = {
   __typename?: 'MangoSubtitleEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoSubtitleInterface>;
};

export type MangoSubtitleFilter = {
  /** Filter by values of property closed */
  closed?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property embedded */
  embedded?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property language */
  language?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property timedTextFiles */
  timedTextFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
};

/**  (de: Untertitel, en: subtitle) */
export type MangoSubtitleInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<MangoTimedTextFileConnection>;
};


/**  (de: Untertitel, en: subtitle) */
export type MangoSubtitleInterfaceTimedTextFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};

/** The payload returned from mutations of Subtitle. */
export type MangoSubtitlePayload = {
   __typename?: 'MangoSubtitlePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedSubtitle?: Maybe<MangoSubtitle>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoSubtitleRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  subtitle: Scalars['ID'];
};

export enum MangoSubtitleSortOrder {
  ClosedAsc = 'CLOSED_ASC',
  ClosedDesc = 'CLOSED_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  EmbeddedAsc = 'EMBEDDED_ASC',
  EmbeddedDesc = 'EMBEDDED_DESC',
  LanguageAsc = 'LANGUAGE_ASC',
  LanguageDesc = 'LANGUAGE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

export type MangoSubtitleTimedTextFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  timedTextFile: Scalars['ID'];
  subtitle: Scalars['ID'];
};

/** Input parameter for the update mutation of Subtitle */
export type MangoSubtitleUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /**
   * Specifies if subtitles are closed (can be turned on and off by the viewer) or
   * open (burned-in) (de: abschaltbar, en: closed)
   */
  closed?: Maybe<Scalars['Boolean']>;
  /** Specifies if the subtitles are embedded in the video stream. (de: eingebettet, en: embedded) */
  embedded?: Maybe<Scalars['Boolean']>;
  /** The language of the subtitles as ISO 639-1 language code (de: Sprache, en: language) */
  language?: Maybe<Scalars['String']>;
  /**  (de: Untertitel Dateien, en: Timed text file) */
  timedTextFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/**  (not documented) */
export type MangoSystem = MangoNode & MangoSystemInterface & {
   __typename?: 'MangoSystem';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
};

/**  (not documented) */
export type MangoSystemInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
};

export type MangoSystemRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

/** Any kind of shorthand content descriptor. Usually from a controlled vocabulary. (de: Schlagwort, en: tag) */
export type MangoTag = MangoNode & MangoTagInterface & MangoCategorizationInterface & {
   __typename?: 'MangoTag';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of shorthand content descriptor. Usually from a controlled vocabulary. (de: Schlagwort, en: tag) */
export type MangoTagWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** This is a generated connection for Tag */
export type MangoTagConnection = {
   __typename?: 'MangoTagConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoTagInterface>>>;
  edges?: Maybe<Array<Maybe<MangoTagEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoTagConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for Tag */
export type MangoTagEdge = {
   __typename?: 'MangoTagEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoTagInterface>;
};

export type MangoTagFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Any kind of shorthand content descriptor. Usually from a controlled vocabulary. (de: Schlagwort, en: tag) */
export type MangoTagInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** Any kind of shorthand content descriptor. Usually from a controlled vocabulary. (de: Schlagwort, en: tag) */
export type MangoTagInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export enum MangoTagSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/**
 * References the clip a teaser represents and allows overriding title, kicker,
 * shortDescription and teaser(Image) for the purpose of one particular placement
 * of the work in an icon. (de: Teaserinhalt, en: Teaser Content)
 */
export type MangoTeaserContent = MangoNode & MangoTeaserContentInterface & MangoElementContentInterface & MangoWritableThingInterface & {
   __typename?: 'MangoTeaserContent';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Override for the kicker field of the represented clip. () */
  customKicker?: Maybe<Scalars['String']>;
  /** Override for the shortDescription field of the represented clip. () */
  customShortDescription?: Maybe<Scalars['String']>;
  /** Override for the teaser field of the represented clip. () */
  customTeaser?: Maybe<MangoCreativeWorkInterface>;
  /** Override for the teaserImage field of the represented clip. () */
  customTeaserImage?: Maybe<MangoImageInterface>;
  /** Override for the title field of the represented clip. () */
  customTitle?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The creative work that is represented by the icon. () */
  represents?: Maybe<MangoCreativeWorkInterface>;
};

/** This is a generated connection for TeaserContent */
export type MangoTeaserContentConnection = {
   __typename?: 'MangoTeaserContentConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoTeaserContentInterface>>>;
  edges?: Maybe<Array<Maybe<MangoTeaserContentEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoTeaserContentConnectionFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property customKicker */
  customKicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property customShortDescription */
  customShortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property customTeaser */
  customTeaser?: Maybe<MangoCreativeWorkRelationFilter>;
  /** Filter by values of property customTeaserImage */
  customTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property customTitle */
  customTitle?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property represents */
  represents?: Maybe<MangoCreativeWorkRemoteRelationFilter>;
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
};

/** Input parameter for the create mutation of TeaserContent */
export type MangoTeaserContentCreateInput = {
  /** The type of the created object. Defaults to TeaserContent */
  type?: Maybe<Scalars['String']>;
  /** Override for the kicker field of the represented clip. () */
  customKicker?: Maybe<Scalars['String']>;
  /** Override for the shortDescription field of the represented clip. () */
  customShortDescription?: Maybe<Scalars['String']>;
  /** Override for the teaser field of the represented clip. () */
  customTeaser?: Maybe<Scalars['ID']>;
  /** Override for the teaserImage field of the represented clip. () */
  customTeaserImage?: Maybe<Scalars['ID']>;
  /** Override for the title field of the represented clip. () */
  customTitle?: Maybe<Scalars['String']>;
  /** The creative work that is represented by the icon. () */
  represents: Scalars['ID'];
};

/** This is a generated edge for TeaserContent */
export type MangoTeaserContentEdge = {
   __typename?: 'MangoTeaserContentEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoTeaserContentInterface>;
};

export type MangoTeaserContentFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property customKicker */
  customKicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property customShortDescription */
  customShortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property customTeaser */
  customTeaser?: Maybe<MangoCreativeWorkRelationFilter>;
  /** Filter by values of property customTeaserImage */
  customTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property customTitle */
  customTitle?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property represents */
  represents?: Maybe<MangoCreativeWorkRemoteRelationFilter>;
};

/**
 * References the clip a teaser represents and allows overriding title, kicker,
 * shortDescription and teaser(Image) for the purpose of one particular placement
 * of the work in an icon. (de: Teaserinhalt, en: Teaser Content)
 */
export type MangoTeaserContentInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Override for the kicker field of the represented clip. () */
  customKicker?: Maybe<Scalars['String']>;
  /** Override for the shortDescription field of the represented clip. () */
  customShortDescription?: Maybe<Scalars['String']>;
  /** Override for the teaser field of the represented clip. () */
  customTeaser?: Maybe<MangoCreativeWorkInterface>;
  /** Override for the teaserImage field of the represented clip. () */
  customTeaserImage?: Maybe<MangoImageInterface>;
  /** Override for the title field of the represented clip. () */
  customTitle?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The creative work that is represented by the icon. () */
  represents?: Maybe<MangoCreativeWorkInterface>;
};

/** The payload returned from mutations of TeaserContent. */
export type MangoTeaserContentPayload = {
   __typename?: 'MangoTeaserContentPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedTeaserContent?: Maybe<MangoTeaserContent>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoTeaserContentSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  CustomkickerAsc = 'CUSTOMKICKER_ASC',
  CustomkickerDesc = 'CUSTOMKICKER_DESC',
  CustomshortdescriptionAsc = 'CUSTOMSHORTDESCRIPTION_ASC',
  CustomshortdescriptionDesc = 'CUSTOMSHORTDESCRIPTION_DESC',
  CustomtitleAsc = 'CUSTOMTITLE_ASC',
  CustomtitleDesc = 'CUSTOMTITLE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of TeaserContent */
export type MangoTeaserContentUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Override for the kicker field of the represented clip. () */
  customKicker?: Maybe<Scalars['String']>;
  /** Override for the shortDescription field of the represented clip. () */
  customShortDescription?: Maybe<Scalars['String']>;
  /** Override for the teaser field of the represented clip. () */
  customTeaser?: Maybe<Scalars['ID']>;
  /** Override for the teaserImage field of the represented clip. () */
  customTeaserImage?: Maybe<Scalars['ID']>;
  /** Override for the title field of the represented clip. () */
  customTitle?: Maybe<Scalars['String']>;
  /** The creative work that is represented by the icon. () */
  represents?: Maybe<Scalars['ID']>;
};

/** A Thing with a canonical URL. (de: Ding mit canonicalUrl, en: Thing with canonicalUrl) */
export type MangoThingWithCanonicalUrl = MangoNode & MangoThingWithCanonicalUrlInterface & {
   __typename?: 'MangoThingWithCanonicalUrl';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** A Thing with a canonical URL. (de: Ding mit canonicalUrl, en: Thing with canonicalUrl) */
export type MangoThingWithCanonicalUrlInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/**  (en: Thing with a relevance period) */
export type MangoThingWithRelevancePeriod = MangoNode & MangoThingWithRelevancePeriodInterface & {
   __typename?: 'MangoThingWithRelevancePeriod';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
};

/**  (en: Thing with a relevance period) */
export type MangoThingWithRelevancePeriodInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
};

/** File representing timed text data for example for captions and subtitles. (de: Untertiteldatei, en: Timed text file) */
export type MangoTimedTextFile = MangoNode & MangoTimedTextFileInterface & MangoFileInterface & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoTimedTextFile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};


/** File representing timed text data for example for captions and subtitles. (de: Untertiteldatei, en: Timed text file) */
export type MangoTimedTextFileAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** File representing timed text data for example for captions and subtitles. (de: Untertiteldatei, en: Timed text file) */
export type MangoTimedTextFileImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

export type MangoTimedTextFileAccessibleInListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessibleIn: Scalars['ID'];
  timedTextFile: Scalars['ID'];
};

/** This is a generated connection for TimedTextFile */
export type MangoTimedTextFileConnection = {
   __typename?: 'MangoTimedTextFileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoTimedTextFileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoTimedTextFileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoTimedTextFileConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of TimedTextFile */
export type MangoTimedTextFileCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to TimedTextFile */
  type?: Maybe<Scalars['String']>;
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation: Scalars['String'];
};

/** This is a generated edge for TimedTextFile */
export type MangoTimedTextFileEdge = {
   __typename?: 'MangoTimedTextFileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoTimedTextFileInterface>;
};

export type MangoTimedTextFileFilter = {
  /** Filter by values of property accessibleIn */
  accessibleIn?: Maybe<MangoGeoZoneConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property fileSize */
  fileSize?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property mimetype */
  mimetype?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** File representing timed text data for example for captions and subtitles. (de: Untertiteldatei, en: Timed text file) */
export type MangoTimedTextFileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};


/** File representing timed text data for example for captions and subtitles. (de: Untertiteldatei, en: Timed text file) */
export type MangoTimedTextFileInterfaceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** File representing timed text data for example for captions and subtitles. (de: Untertiteldatei, en: Timed text file) */
export type MangoTimedTextFileInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};

/** The payload returned from mutations of TimedTextFile. */
export type MangoTimedTextFilePayload = {
   __typename?: 'MangoTimedTextFilePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedTimedTextFile?: Maybe<MangoTimedTextFile>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoTimedTextFileRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  timedTextFile: Scalars['ID'];
};

export enum MangoTimedTextFileSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  FilesizeAsc = 'FILESIZE_ASC',
  FilesizeDesc = 'FILESIZE_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of TimedTextFile */
export type MangoTimedTextFileUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
};

/** Any kind of thing which has tracking infos. (not documented) */
export type MangoTrackableThing = MangoNode & MangoTrackableThingInterface & {
   __typename?: 'MangoTrackableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
};


/** Any kind of thing which has tracking infos. (not documented) */
export type MangoTrackableThingTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};

/** Any kind of thing which has tracking infos. (not documented) */
export type MangoTrackableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
};


/** Any kind of thing which has tracking infos. (not documented) */
export type MangoTrackableThingInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};

/** A container for tracking data. (not documented) */
export type MangoTrackingInfo = MangoNode & MangoTrackingInfoInterface & MangoWritableThingInterface & {
   __typename?: 'MangoTrackingInfo';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Tracking params formated as a single urlescaped querystring. */
  params?: Maybe<Scalars['String']>;
  /**
   * Tracking URL in the requested format
   * @deprecated The url field was only needed for the now obsolete tracking provider Comscore.
   */
  url?: Maybe<Scalars['String']>;
};

/** Describes the context in which the TrackingInfo data should be calculated. */
export type MangoTrackingInfoContext = {
  /**
   * Deprecated!! Indicates, that the current TrackableThing is consumed in the
   * given livestream. Deprecation reason: The livestream context is detected
   * automatically on the BroadcastEventInterface.
   */
  livestream?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of TrackingInfo */
export type MangoTrackingInfoCreateInput = {
  /** The type of the created object. Defaults to TrackingInfo */
  type?: Maybe<Scalars['String']>;
  /** Tracking params formated as a single urlescaped querystring. () */
  params?: Maybe<Scalars['String']>;
};

/** Defines a subset of tracking info params and a format for the tracking url. */
export enum MangoTrackingInfoFormat {
  Comscore = 'COMSCORE',
  Nielsen = 'NIELSEN',
  Ati = 'ATI'
}

/** A container for tracking data. (not documented) */
export type MangoTrackingInfoInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Tracking params formated as a single urlescaped querystring. */
  params?: Maybe<Scalars['String']>;
  /**
   * Tracking URL in the requested format
   * @deprecated The url field was only needed for the now obsolete tracking provider Comscore.
   */
  url?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of TrackingInfo. */
export type MangoTrackingInfoPayload = {
   __typename?: 'MangoTrackingInfoPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedTrackingInfo?: Maybe<MangoTrackingInfo>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoTrackingInfoRelationFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
};

/** Input parameter for the update mutation of TrackingInfo */
export type MangoTrackingInfoUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Tracking params formated as a single urlescaped querystring. () */
  params?: Maybe<Scalars['String']>;
};

/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailer = MangoNode & MangoTrailerInterface & MangoAgeRestrictedThingInterface & MangoCategorizationInterface & MangoClipInterface & MangoCreativeWorkInterface & MangoEmbeddableThingInterface & MangoExtraInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPublishableThingInterface & MangoShortlyAvailableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoThingWithRelevancePeriodInterface & MangoTrackableThingInterface & MangoVersionedThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoTrailer';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Specifies which CreativeWork a trailer advertises. (de: Trailer von, en: trailer of) */
  trailerOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerPartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerPublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerTrailerOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

export type MangoTrailerAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerAudioFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audioFile: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerCaptionFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  captionFile: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  trailer: Scalars['ID'];
};

/** This is a generated connection for Trailer */
export type MangoTrailerConnection = {
   __typename?: 'MangoTrailerConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoTrailerInterface>>>;
  edges?: Maybe<Array<Maybe<MangoTrailerEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** Input parameter for the create mutation of Trailer */
export type MangoTrailerCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to Trailer */
  type?: Maybe<Scalars['String']>;
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly: Scalars['Boolean'];
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status: Scalars['ID'];
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title: Scalars['String'];
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Specifies which CreativeWork a trailer advertises. (de: Trailer von, en: trailer of) */
  trailerOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoTrailerCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  trailer: Scalars['ID'];
};

/** This is a generated edge for Trailer */
export type MangoTrailerEdge = {
   __typename?: 'MangoTrailerEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoTrailerInterface>;
};

export type MangoTrailerEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerExtraOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  extraOf: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerFilter = {
  /** Filter by values of property ageRestriction */
  ageRestriction?: Maybe<MangoIntFilter>;
  /** Filter by values of property audiences */
  audiences?: Maybe<MangoAudienceConnectionFilter>;
  /** Filter by values of property audioFiles */
  audioFiles?: Maybe<MangoAudioFileConnectionFilter>;
  /** Filter by values of property audioOnly */
  audioOnly?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property authors */
  authors?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property availabilityCategory */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryRelationFilter>;
  /** Filter by values of property availableUntil */
  availableUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property bookmarked */
  bookmarked?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property broadcasts */
  broadcasts?: Maybe<MangoBroadcastEventConnectionFilter>;
  /** Filter by values of property captionFiles */
  captionFiles?: Maybe<MangoTimedTextFileConnectionFilter>;
  /** Filter by values of property categorizations */
  categorizations?: Maybe<MangoCategorizationConnectionFilter>;
  /** Filter by values of property categories */
  categories?: Maybe<MangoCategoryConnectionFilter>;
  /** Filter by values of property copyright */
  copyright?: Maybe<MangoStringFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property credits */
  credits?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property defaultTeaserImage */
  defaultTeaserImage?: Maybe<MangoImageRelationFilter>;
  /** Filter by values of property description */
  description?: Maybe<MangoStringFilter>;
  /** Filter by values of property downloadable */
  downloadable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property embeddable */
  embeddable?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property essences */
  essences?: Maybe<MangoFileConnectionFilter>;
  /** Filter by values of property executiveProducers */
  executiveProducers?: Maybe<MangoAgentConnectionFilter>;
  /** Filter by values of property externalURLS */
  externalURLS?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property extraOf */
  extraOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property facebookAccounts */
  facebookAccounts?: Maybe<MangoFacebookAccountConnectionFilter>;
  /** Filter by values of property formats */
  formats?: Maybe<MangoFormatConnectionFilter>;
  /** Filter by values of property genres */
  genres?: Maybe<MangoGenreConnectionFilter>;
  /** Filter by values of property hasOfflineUseRights */
  hasOfflineUseRights?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property kicker */
  kicker?: Maybe<MangoStringFilter>;
  /** Filter by values of property linksTo */
  linksTo?: Maybe<MangoLinkableThingRelationFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property newerVersion */
  newerVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property noIndex */
  noIndex?: Maybe<MangoBooleanFilter>;
  /** Filter by values of property olderVersion */
  olderVersion?: Maybe<MangoVersionedThingRelationFilter>;
  /** Filter by values of property partOf */
  partOf?: Maybe<MangoGroupingConnectionFilter>;
  /** Filter by values of property producingDepartments */
  producingDepartments?: Maybe<MangoDepartmentConnectionFilter>;
  /** Filter by values of property publications */
  publications?: Maybe<MangoPublicationEventConnectionFilter>;
  /** Filter by values of property relatedLinks */
  relatedLinks?: Maybe<MangoExternalUrlConnectionFilter>;
  /** Filter by values of property relevantUntil */
  relevantUntil?: Maybe<MangoDateFilter>;
  /** Filter by values of property shortDescription */
  shortDescription?: Maybe<MangoStringFilter>;
  /** Filter by values of property signLanguageEssences */
  signLanguageEssences?: Maybe<MangoVideoFileConnectionFilter>;
  /** Filter by values of property status */
  status?: Maybe<MangoStatusRelationFilter>;
  /** Filter by values of property subjects */
  subjects?: Maybe<MangoSubjectConnectionFilter>;
  /** Filter by values of property tags */
  tags?: Maybe<MangoTagConnectionFilter>;
  /** Filter by values of property teasers */
  teasers?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property teaserImages */
  teaserImages?: Maybe<MangoImageConnectionFilter>;
  /** Filter by values of property title */
  title?: Maybe<MangoStringFilter>;
  /** Filter by values of property trackingInfos */
  trackingInfos?: Maybe<MangoTrackingInfoRelationFilter>;
  /** Filter by values of property trailerOf */
  trailerOf?: Maybe<MangoCreativeWorkConnectionFilter>;
  /** Filter by values of property twitterAccounts */
  twitterAccounts?: Maybe<MangoTwitterAccountConnectionFilter>;
  /** Filter by values of property versionFrom */
  versionFrom?: Maybe<MangoDateFilter>;
  /** Filter by values of property videoFiles */
  videoFiles?: Maybe<MangoVideoFileConnectionFilter>;
  /** Perform a fulltext search on all text properties of Trailer */
  term?: Maybe<Scalars['String']>;
};

export type MangoTrailerFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  trailer: Scalars['ID'];
};

/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<MangoAudioFileConnection>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Is the Clip bookmarked by current User? */
  bookmarked?: Maybe<Scalars['Boolean']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<MangoBroadcastEventConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   * @deprecated Deprecated
   */
  captionFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /** An opaque entity identifier that can be passed to the Chromecast receiver to play this node. (en: Chromecast entity) */
  chromecastEntity?: Maybe<Scalars['String']>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** HTML embed code. */
  embedCode?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Shortcut for the newest broadcast event, that isn't a rerun. (de: Neueste Erst-Ausstrahlung, en: newest screening) */
  initialScreening?: Maybe<MangoBroadcastEventInterface>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<MangoVideoFileConnection>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  /** Specifies which CreativeWork a trailer advertises. (de: Trailer von, en: trailer of) */
  trailerOf?: Maybe<MangoCreativeWorkConnection>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<MangoVideoFileConnection>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
  reactions?: Maybe<MangoClipReactions>;
  /** Get all Recommendations for the current Clip. */
  recommendations?: Maybe<MangoRecSysResultConnection>;
  myInteractions?: Maybe<MangoContentInteractionInterface>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceBroadcastsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastEventFilter>;
  orderBy?: Maybe<MangoBroadcastEventSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceCaptionFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceEmbedCodeArgs = {
  consumer?: Maybe<Scalars['String']>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceExtraOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceSignLanguageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceTrailerOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** A clip that advertises another CreativeWork. (de: Trailer, en: trailer) */
export type MangoTrailerInterfaceRecommendationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoClipRecommendationAlgorithm>;
};

/** The payload returned from mutations of Trailer. */
export type MangoTrailerPayload = {
   __typename?: 'MangoTrailerPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedTrailer?: Maybe<MangoTrailer>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoTrailerProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  trailer: Scalars['ID'];
};

export type MangoTrailerSignLanguageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  signLanguageEssence: Scalars['ID'];
  trailer: Scalars['ID'];
};

export enum MangoTrailerSortOrder {
  AgerestrictionAsc = 'AGERESTRICTION_ASC',
  AgerestrictionDesc = 'AGERESTRICTION_DESC',
  AudioonlyAsc = 'AUDIOONLY_ASC',
  AudioonlyDesc = 'AUDIOONLY_DESC',
  AvailableuntilAsc = 'AVAILABLEUNTIL_ASC',
  AvailableuntilDesc = 'AVAILABLEUNTIL_DESC',
  BroadcastsCreatedatAsc = 'BROADCASTS_CREATEDAT_ASC',
  BroadcastsCreatedatDesc = 'BROADCASTS_CREATEDAT_DESC',
  BroadcastsEndAsc = 'BROADCASTS_END_ASC',
  BroadcastsEndDesc = 'BROADCASTS_END_DESC',
  BroadcastsImportedfromCreatedatAsc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_ASC',
  BroadcastsImportedfromCreatedatDesc = 'BROADCASTS_IMPORTEDFROM_CREATEDAT_DESC',
  BroadcastsImportedfromIdentifierAsc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_ASC',
  BroadcastsImportedfromIdentifierDesc = 'BROADCASTS_IMPORTEDFROM_IDENTIFIER_DESC',
  BroadcastsImportedfromModifiedatAsc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_ASC',
  BroadcastsImportedfromModifiedatDesc = 'BROADCASTS_IMPORTEDFROM_MODIFIEDAT_DESC',
  BroadcastsIsrerunAsc = 'BROADCASTS_ISRERUN_ASC',
  BroadcastsIsrerunDesc = 'BROADCASTS_ISRERUN_DESC',
  BroadcastsModifiedatAsc = 'BROADCASTS_MODIFIEDAT_ASC',
  BroadcastsModifiedatDesc = 'BROADCASTS_MODIFIEDAT_DESC',
  BroadcastsStartAsc = 'BROADCASTS_START_ASC',
  BroadcastsStartDesc = 'BROADCASTS_START_DESC',
  BroadcastsTrackinginfosCreatedatAsc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_ASC',
  BroadcastsTrackinginfosCreatedatDesc = 'BROADCASTS_TRACKINGINFOS_CREATEDAT_DESC',
  BroadcastsTrackinginfosModifiedatAsc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_ASC',
  BroadcastsTrackinginfosModifiedatDesc = 'BROADCASTS_TRACKINGINFOS_MODIFIEDAT_DESC',
  CopyrightAsc = 'COPYRIGHT_ASC',
  CopyrightDesc = 'COPYRIGHT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DownloadableAsc = 'DOWNLOADABLE_ASC',
  DownloadableDesc = 'DOWNLOADABLE_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  EmbeddableAsc = 'EMBEDDABLE_ASC',
  EmbeddableDesc = 'EMBEDDABLE_DESC',
  HasofflineuserightsAsc = 'HASOFFLINEUSERIGHTS_ASC',
  HasofflineuserightsDesc = 'HASOFFLINEUSERIGHTS_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningCreatedatAsc = 'INITIALSCREENING_CREATEDAT_ASC',
  InitialscreeningCreatedatDesc = 'INITIALSCREENING_CREATEDAT_DESC',
  InitialscreeningEndAsc = 'INITIALSCREENING_END_ASC',
  InitialscreeningEndDesc = 'INITIALSCREENING_END_DESC',
  InitialscreeningImportedfromCreatedatAsc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_ASC',
  InitialscreeningImportedfromCreatedatDesc = 'INITIALSCREENING_IMPORTEDFROM_CREATEDAT_DESC',
  InitialscreeningImportedfromIdentifierAsc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_ASC',
  InitialscreeningImportedfromIdentifierDesc = 'INITIALSCREENING_IMPORTEDFROM_IDENTIFIER_DESC',
  InitialscreeningImportedfromModifiedatAsc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_ASC',
  InitialscreeningImportedfromModifiedatDesc = 'INITIALSCREENING_IMPORTEDFROM_MODIFIEDAT_DESC',
  InitialscreeningIsrerunAsc = 'INITIALSCREENING_ISRERUN_ASC',
  InitialscreeningIsrerunDesc = 'INITIALSCREENING_ISRERUN_DESC',
  InitialscreeningModifiedatAsc = 'INITIALSCREENING_MODIFIEDAT_ASC',
  InitialscreeningModifiedatDesc = 'INITIALSCREENING_MODIFIEDAT_DESC',
  InitialscreeningStartAsc = 'INITIALSCREENING_START_ASC',
  InitialscreeningStartDesc = 'INITIALSCREENING_START_DESC',
  InitialscreeningTrackinginfosCreatedatAsc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_ASC',
  InitialscreeningTrackinginfosCreatedatDesc = 'INITIALSCREENING_TRACKINGINFOS_CREATEDAT_DESC',
  InitialscreeningTrackinginfosModifiedatAsc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_ASC',
  InitialscreeningTrackinginfosModifiedatDesc = 'INITIALSCREENING_TRACKINGINFOS_MODIFIEDAT_DESC',
  KickerAsc = 'KICKER_ASC',
  KickerDesc = 'KICKER_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  NoindexAsc = 'NOINDEX_ASC',
  NoindexDesc = 'NOINDEX_DESC',
  PublicationsCreatedatAsc = 'PUBLICATIONS_CREATEDAT_ASC',
  PublicationsCreatedatDesc = 'PUBLICATIONS_CREATEDAT_DESC',
  PublicationsModifiedatAsc = 'PUBLICATIONS_MODIFIEDAT_ASC',
  PublicationsModifiedatDesc = 'PUBLICATIONS_MODIFIEDAT_DESC',
  RelevantuntilAsc = 'RELEVANTUNTIL_ASC',
  RelevantuntilDesc = 'RELEVANTUNTIL_DESC',
  ShortdescriptionAsc = 'SHORTDESCRIPTION_ASC',
  ShortdescriptionDesc = 'SHORTDESCRIPTION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  TrackinginfosCreatedatAsc = 'TRACKINGINFOS_CREATEDAT_ASC',
  TrackinginfosCreatedatDesc = 'TRACKINGINFOS_CREATEDAT_DESC',
  TrackinginfosModifiedatAsc = 'TRACKINGINFOS_MODIFIEDAT_ASC',
  TrackinginfosModifiedatDesc = 'TRACKINGINFOS_MODIFIEDAT_DESC',
  VersionfromAsc = 'VERSIONFROM_ASC',
  VersionfromDesc = 'VERSIONFROM_DESC'
}

export type MangoTrailerTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerTrailerOfListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  trailerOf: Scalars['ID'];
  trailer: Scalars['ID'];
};

export type MangoTrailerTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  trailer: Scalars['ID'];
};

/** Input parameter for the update mutation of Trailer */
export type MangoTrailerUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Specifies the age restriction of a resource. (de: Alterseinschränkung, en: age restriction) */
  ageRestriction?: Maybe<Scalars['Int']>;
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: Audio File) */
  audioFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies if something is or deals with audio-only content. (de: nur Audio, en: audio only) */
  audioOnly?: Maybe<Scalars['Boolean']>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Specifies the availability category for a shortly available Thing. (de: Verweildauer Kategorie, en: Availablity Category) */
  availabilityCategory?: Maybe<Scalars['ID']>;
  /**
   * Specifies until when a resource or its content is publicly available - its
   * metadata can still be publicly available afterwards. (de: verfügbar bis, en:
   * available until)
   */
  availableUntil?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a clip was or will be broadcasted. (de: Ausstrahlung, en: broadcast) */
  broadcasts?: Maybe<Array<Maybe<MangoBroadcastEventCreateInput>>>;
  /**
   * Assigns timed text information that are used as closed captions. Closed
   * captions provide a transcription and possibly a translation of audio.
   * (Deprecated - use av:caption instead) ()
   */
  captionFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Informs whether the Clip maybe downloaded. (de: downloadbar, en: downloadable ) */
  downloadable?: Maybe<Scalars['Boolean']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /** Informs whether the Clip maybe embedded in external pages. (de: einbettbar, en: embeddable ) */
  embeddable?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Zusammenfassung von, en: extra of) */
  extraOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * The clip may be temporary downloaded and used offline until its availableUntil
   * date. (de: temporär downloadbar, en: temporary downloadable)
   */
  hasOfflineUseRights?: Maybe<Scalars['Boolean']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: relevant until ) */
  relevantUntil?: Maybe<Scalars['MangoDateTime']>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /**
   * Associates a clip with a consumable file that contains the sign language
   * version of the original clip. (de: Gebärdensprache Dateien, en: sign language essence )
   */
  signLanguageEssences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Tracking data. () */
  trackingInfos?: Maybe<MangoTrackingInfoCreateInput>;
  /** Specifies which CreativeWork a trailer advertises. (de: Trailer von, en: trailer of) */
  trailerOf?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: Video File) */
  videoFiles?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

export type MangoTrailerVideoFileListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
  trailer: Scalars['ID'];
};

/** A reference to a Twitter account. (de: Twitter Account, en: Twitter account) */
export type MangoTwitterAccount = MangoNode & MangoTwitterAccountInterface & MangoExternalUrlInterface & MangoSocialMediaAccountInterface & MangoWritableThingInterface & {
   __typename?: 'MangoTwitterAccount';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** This is a generated connection for TwitterAccount */
export type MangoTwitterAccountConnection = {
   __typename?: 'MangoTwitterAccountConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoTwitterAccountInterface>>>;
  edges?: Maybe<Array<Maybe<MangoTwitterAccountEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoTwitterAccountConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for TwitterAccount */
export type MangoTwitterAccountEdge = {
   __typename?: 'MangoTwitterAccountEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoTwitterAccountInterface>;
};

export type MangoTwitterAccountFilter = {
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property label */
  label?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property url */
  url?: Maybe<MangoStringFilter>;
  /** Filter by values of property userName */
  userName?: Maybe<MangoStringFilter>;
};

/** A reference to a Twitter account. (de: Twitter Account, en: Twitter account) */
export type MangoTwitterAccountInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of TwitterAccount. */
export type MangoTwitterAccountPayload = {
   __typename?: 'MangoTwitterAccountPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedTwitterAccount?: Maybe<MangoTwitterAccount>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export enum MangoTwitterAccountSortOrder {
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  LabelAsc = 'LABEL_ASC',
  LabelDesc = 'LABEL_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC'
}

/** Input parameter for the update mutation of TwitterAccount */
export type MangoTwitterAccountUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** A descriptive label for the domain it is used on. (en: label) */
  label?: Maybe<Scalars['String']>;
  /**  (en: url) */
  url?: Maybe<Scalars['String']>;
  /** The username of a social media account. (de: User Name, en: username) */
  userName?: Maybe<Scalars['String']>;
};

export type MangoUnsubscribeInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  subscribable: Scalars['ID'];
};

export type MangoUnsubscribePayload = {
   __typename?: 'MangoUnsubscribePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUser = MangoNode & MangoUserInterface & MangoAgentInterface & MangoImportableThingInterface & MangoLinkableThingInterface & MangoPersonInterface & MangoWritableThingInterface & {
   __typename?: 'MangoUser';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

export type MangoUserExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  user: Scalars['ID'];
};

export type MangoUserFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  user: Scalars['ID'];
};

/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**  (de: ist referenziert von, en: is linked by) */
  linkedBy?: Maybe<MangoLinkableThingConnection>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<MangoLinkableThingInterface>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserInterfaceLinkedByArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLinkableThingFilter>;
  orderBy?: Maybe<MangoLinkableThingSortOrder>;
};


/** Any kind user of a software or service. (de: Benutzer, en: user) */
export type MangoUserInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};

/** The payload returned from mutations of User. */
export type MangoUserPayload = {
   __typename?: 'MangoUserPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedUser?: Maybe<MangoUser>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoUserRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  user: Scalars['ID'];
};

export type MangoUserTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  user: Scalars['ID'];
};

/** Input parameter for the update mutation of User */
export type MangoUserUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**  (de: zeigt auf, en: links to) */
  linksTo?: Maybe<Scalars['ID']>;
  /** The canonical name of an agent. (de: Name, en: name) */
  name?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
};

/**  (not documented) */
export type MangoVersionedThing = MangoNode & MangoVersionedThingInterface & {
   __typename?: 'MangoVersionedThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
};

/**  (not documented) */
export type MangoVersionedThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Associates a VersionableThing with its newer version. (de: neuere Version, en: newer version) */
  newerVersion?: Maybe<MangoVersionedThingInterface>;
  /** Associates a VersionableThing with its newer version. (de: ältere Version, en: older version) */
  olderVersion?: Maybe<MangoVersionedThingInterface>;
};

export type MangoVersionedThingRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFile = MangoNode & MangoVideoFileInterface & MangoFileInterface & MangoImportableThingInterface & MangoWritableThingInterface & {
   __typename?: 'MangoVideoFile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<MangoCaptionConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<MangoSubtitleConnection>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<MangoVideoProfileInterface>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileCaptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCaptionFilter>;
  orderBy?: Maybe<MangoCaptionSortOrder>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileSubtitlesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubtitleFilter>;
  orderBy?: Maybe<MangoSubtitleSortOrder>;
};

export type MangoVideoFileAccessibleInListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  accessibleIn: Scalars['ID'];
  videoFile: Scalars['ID'];
};

/** This is a generated connection for VideoFile */
export type MangoVideoFileConnection = {
   __typename?: 'MangoVideoFileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoVideoFileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoVideoFileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

export type MangoVideoFileConnectionFilter = {
  /** A filter that matches empty connections. */
  empty?: Maybe<MangoBooleanFilter>;
  /** A filter that matches if the specified ID is part of the connection. */
  contains?: Maybe<Scalars['ID']>;
};

/** Input parameter for the create mutation of VideoFile */
export type MangoVideoFileCreateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The type of the created object. Defaults to VideoFile */
  type?: Maybe<Scalars['String']>;
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<Scalars['ID']>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<Array<Maybe<MangoCaptionCreateInput>>>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom: Array<Maybe<MangoImportLocatorCreateInput>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation: Scalars['String'];
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<Array<Maybe<MangoSubtitleCreateInput>>>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<Scalars['ID']>;
};

/** This is a generated edge for VideoFile */
export type MangoVideoFileEdge = {
   __typename?: 'MangoVideoFileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoVideoFileInterface>;
};

export type MangoVideoFileFilter = {
  /** Filter by values of property accessibleIn */
  accessibleIn?: Maybe<MangoGeoZoneConnectionFilter>;
  /** Filter by values of property audioProfile */
  audioProfile?: Maybe<MangoAudioProfileRelationFilter>;
  /** Filter by values of property captions */
  captions?: Maybe<MangoCaptionConnectionFilter>;
  /** Filter by values of property createdAt */
  createdAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property duration */
  duration?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property fileSize */
  fileSize?: Maybe<MangoBigIntFilter>;
  /** Filter by values of property importedFrom */
  importedFrom?: Maybe<MangoImportLocatorConnectionFilter>;
  /** Filter by values of property mimetype */
  mimetype?: Maybe<MangoStringFilter>;
  /** Filter by values of property modifiedAt */
  modifiedAt?: Maybe<MangoDateFilter>;
  /** Filter by values of property subtitles */
  subtitles?: Maybe<MangoSubtitleConnectionFilter>;
  /** Filter by values of property videoProfile */
  videoProfile?: Maybe<MangoVideoProfileRelationFilter>;
};

/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<MangoGeoZoneConnection>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<MangoCaptionConnection>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<MangoSubtitleConnection>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<MangoVideoProfileInterface>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileInterfaceAccessibleInArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGeoZoneFilter>;
  orderBy?: Maybe<MangoGeoZoneSortOrder>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileInterfaceCaptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCaptionFilter>;
  orderBy?: Maybe<MangoCaptionSortOrder>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** The video file representing a video clip. (de: Videodatei, en: video file) */
export type MangoVideoFileInterfaceSubtitlesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubtitleFilter>;
  orderBy?: Maybe<MangoSubtitleSortOrder>;
};

/** The payload returned from mutations of VideoFile. */
export type MangoVideoFilePayload = {
   __typename?: 'MangoVideoFilePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedVideoFile?: Maybe<MangoVideoFile>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoVideoFileRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  videoFile: Scalars['ID'];
};

export enum MangoVideoFileSortOrder {
  CaptionsClosedAsc = 'CAPTIONS_CLOSED_ASC',
  CaptionsClosedDesc = 'CAPTIONS_CLOSED_DESC',
  CaptionsCreatedatAsc = 'CAPTIONS_CREATEDAT_ASC',
  CaptionsCreatedatDesc = 'CAPTIONS_CREATEDAT_DESC',
  CaptionsEmbeddedAsc = 'CAPTIONS_EMBEDDED_ASC',
  CaptionsEmbeddedDesc = 'CAPTIONS_EMBEDDED_DESC',
  CaptionsLanguageAsc = 'CAPTIONS_LANGUAGE_ASC',
  CaptionsLanguageDesc = 'CAPTIONS_LANGUAGE_DESC',
  CaptionsModifiedatAsc = 'CAPTIONS_MODIFIEDAT_ASC',
  CaptionsModifiedatDesc = 'CAPTIONS_MODIFIEDAT_DESC',
  CreatedatAsc = 'CREATEDAT_ASC',
  CreatedatDesc = 'CREATEDAT_DESC',
  DurationAsc = 'DURATION_ASC',
  DurationDesc = 'DURATION_DESC',
  FilesizeAsc = 'FILESIZE_ASC',
  FilesizeDesc = 'FILESIZE_DESC',
  ImportedfromCreatedatAsc = 'IMPORTEDFROM_CREATEDAT_ASC',
  ImportedfromCreatedatDesc = 'IMPORTEDFROM_CREATEDAT_DESC',
  ImportedfromIdentifierAsc = 'IMPORTEDFROM_IDENTIFIER_ASC',
  ImportedfromIdentifierDesc = 'IMPORTEDFROM_IDENTIFIER_DESC',
  ImportedfromModifiedatAsc = 'IMPORTEDFROM_MODIFIEDAT_ASC',
  ImportedfromModifiedatDesc = 'IMPORTEDFROM_MODIFIEDAT_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  ModifiedatAsc = 'MODIFIEDAT_ASC',
  ModifiedatDesc = 'MODIFIEDAT_DESC',
  SubtitlesClosedAsc = 'SUBTITLES_CLOSED_ASC',
  SubtitlesClosedDesc = 'SUBTITLES_CLOSED_DESC',
  SubtitlesCreatedatAsc = 'SUBTITLES_CREATEDAT_ASC',
  SubtitlesCreatedatDesc = 'SUBTITLES_CREATEDAT_DESC',
  SubtitlesEmbeddedAsc = 'SUBTITLES_EMBEDDED_ASC',
  SubtitlesEmbeddedDesc = 'SUBTITLES_EMBEDDED_DESC',
  SubtitlesLanguageAsc = 'SUBTITLES_LANGUAGE_ASC',
  SubtitlesLanguageDesc = 'SUBTITLES_LANGUAGE_DESC',
  SubtitlesModifiedatAsc = 'SUBTITLES_MODIFIEDAT_ASC',
  SubtitlesModifiedatDesc = 'SUBTITLES_MODIFIEDAT_DESC'
}

/** Input parameter for the update mutation of VideoFile */
export type MangoVideoFileUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Marks a file as accessible only in a specific geo zone. (de: zugänglich in, en: accessible in) */
  accessibleIn?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Marks an audio or video essence as adhering to an audio profile. (de: Audio Profil, en: audio profile) */
  audioProfile?: Maybe<Scalars['ID']>;
  /** Assigned captions (de: Untertitel für Hörgeschädigte, en: Captions) */
  captions?: Maybe<Array<Maybe<MangoCaptionCreateInput>>>;
  /** Duration of an audio/video content in seconds. (de: Dauer, en: duration) */
  duration?: Maybe<Scalars['MangoBigInt']>;
  /**  (de: Dateigröße in Byte, en: file size in byte) */
  fileSize?: Maybe<Scalars['MangoBigInt']>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /** Describes from where a file can be retreived for internal use. (de: interner Ablageort, en: internal location) */
  internalLocation?: Maybe<Scalars['String']>;
  /**  (en: mimetype) */
  mimetype?: Maybe<Scalars['String']>;
  /** Describes from where a file can be retreived for public use. (de: öffentlicher Ablageort, en: public location) */
  publicLocation?: Maybe<Scalars['String']>;
  /** Assigned subtitle information (de: Untertitel, en: Subtitle) */
  subtitles?: Maybe<Array<Maybe<MangoSubtitleCreateInput>>>;
  /** Marks an video essence as adhering to a video profile. (de: Video Profil, en: video profile) */
  videoProfile?: Maybe<Scalars['ID']>;
};

/** Describes a video format. (de: Videoprofil, en: video profile) */
export type MangoVideoProfile = MangoNode & MangoVideoProfileInterface & MangoProfileInterface & {
   __typename?: 'MangoVideoProfile';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Bitrate in kbit/s. (de: Bitrate, en: bitrate) */
  bitrate?: Maybe<Scalars['Int']>;
  /**  (de: Encoding, en: encoding) */
  encoding?: Maybe<Scalars['String']>;
  /**  (de: Höhe, en: height) */
  height?: Maybe<Scalars['Int']>;
  /**  (de: Breite, en: width) */
  width?: Maybe<Scalars['Int']>;
};

/** This is a generated connection for VideoProfile */
export type MangoVideoProfileConnection = {
   __typename?: 'MangoVideoProfileConnection';
  count?: Maybe<Scalars['Int']>;
  nodes?: Maybe<Array<Maybe<MangoVideoProfileInterface>>>;
  edges?: Maybe<Array<Maybe<MangoVideoProfileEdge>>>;
  pageInfo?: Maybe<MangoPageInfo>;
};

/** This is a generated edge for VideoProfile */
export type MangoVideoProfileEdge = {
   __typename?: 'MangoVideoProfileEdge';
  cursor: Scalars['String'];
  node?: Maybe<MangoVideoProfileInterface>;
};

export type MangoVideoProfileFilter = {
  /** Filter by values of property bitrate */
  bitrate?: Maybe<MangoIntFilter>;
  /** Filter by values of property encoding */
  encoding?: Maybe<MangoStringFilter>;
  /** Filter by values of property height */
  height?: Maybe<MangoIntFilter>;
  /** Filter by values of property width */
  width?: Maybe<MangoIntFilter>;
};

/** Describes a video format. (de: Videoprofil, en: video profile) */
export type MangoVideoProfileInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Bitrate in kbit/s. (de: Bitrate, en: bitrate) */
  bitrate?: Maybe<Scalars['Int']>;
  /**  (de: Encoding, en: encoding) */
  encoding?: Maybe<Scalars['String']>;
  /**  (de: Höhe, en: height) */
  height?: Maybe<Scalars['Int']>;
  /**  (de: Breite, en: width) */
  width?: Maybe<Scalars['Int']>;
};

export type MangoVideoProfileRelationFilter = {
  /** A filter that matches when the relation points to the object with the specified ID. */
  id?: Maybe<MangoIdFilter>;
  /** A filter that matches when the relation exists. */
  exists?: Maybe<MangoBooleanFilter>;
};

export enum MangoVideoProfileSortOrder {
  BitrateAsc = 'BITRATE_ASC',
  BitrateDesc = 'BITRATE_DESC',
  EncodingAsc = 'ENCODING_ASC',
  EncodingDesc = 'ENCODING_DESC',
  HeightAsc = 'HEIGHT_ASC',
  HeightDesc = 'HEIGHT_DESC',
  WidthAsc = 'WIDTH_ASC',
  WidthDesc = 'WIDTH_DESC'
}

export type MangoViewer = MangoNode & {
   __typename?: 'MangoViewer';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Find all AudioFiles. */
  allAudioFiles?: Maybe<MangoAudioFileConnection>;
  /** Find a AudioFile by id. */
  audioFile?: Maybe<MangoAudioFileInterface>;
  /** Find all AudioProfiles. */
  allAudioProfiles?: Maybe<MangoAudioProfileConnection>;
  /** Find a AudioProfile by id. */
  audioProfile?: Maybe<MangoAudioProfileInterface>;
  /** Find all AvailabilityCategories. */
  allAvailabilityCategories?: Maybe<MangoAvailabilityCategoryConnection>;
  /** Find a AvailabilityCategory by id. */
  availabilityCategory?: Maybe<MangoAvailabilityCategoryInterface>;
  /** Find all BannerContents. */
  allBannerContents?: Maybe<MangoBannerContentConnection>;
  /** Find a BannerContent by id. */
  bannerContent?: Maybe<MangoBannerContentInterface>;
  /** Find all BestOf. */
  allBestOf?: Maybe<MangoBestOfConnection>;
  /** Find a BestOf by id. */
  bestOf?: Maybe<MangoBestOfInterface>;
  /** Find all Boards. */
  allBoards?: Maybe<MangoBoardConnection>;
  /** Find a Board by id. */
  board?: Maybe<MangoBoardInterface>;
  /** Find a BroadcastEvent by id. */
  broadcastEvent?: Maybe<MangoBroadcastEventInterface>;
  /** Find all BroadcastRegions. */
  allBroadcastRegions?: Maybe<MangoBroadcastRegionConnection>;
  /** Find a BroadcastRegion by id. */
  broadcastRegion?: Maybe<MangoBroadcastRegionInterface>;
  /** Find all BroadcastServices. */
  allBroadcastServices?: Maybe<MangoBroadcastServiceConnection>;
  /** Find a BroadcastService by id. */
  broadcastService?: Maybe<MangoBroadcastServiceInterface>;
  /** Find a Caption by id. */
  caption?: Maybe<MangoCaptionInterface>;
  /** Find all Categories. */
  allCategories?: Maybe<MangoCategoryConnection>;
  /** Find a Category by id. */
  category?: Maybe<MangoCategoryInterface>;
  /** Find all Clips. */
  allClips?: Maybe<MangoClipConnection>;
  /** Find a Clip by id. */
  clip?: Maybe<MangoClipInterface>;
  /** Find all ContentInteractions. */
  allContentInteractions?: Maybe<MangoContentInteractionConnection>;
  /** Find a ContentInteraction by id. */
  contentInteraction?: Maybe<MangoContentInteractionInterface>;
  /** Find all ElementContents. */
  allElementContents?: Maybe<MangoElementContentConnection>;
  /** Find a ElementContent by id. */
  elementContent?: Maybe<MangoElementContentInterface>;
  /** Find all EmbeddableThings. */
  allEmbeddableThings?: Maybe<MangoEmbeddableThingConnection>;
  /** Find a EmbeddableThing by id. */
  embeddableThing?: Maybe<MangoEmbeddableThingInterface>;
  /** Find all EndUsers. */
  allEndUsers?: Maybe<MangoEndUserConnection>;
  /** Find a EndUser by id. */
  endUser?: Maybe<MangoEndUserInterface>;
  /** Find all Extras. */
  allExtras?: Maybe<MangoExtraConnection>;
  /** Find a Extra by id. */
  extra?: Maybe<MangoExtraInterface>;
  /** Find all Genres. */
  allGenres?: Maybe<MangoGenreConnection>;
  /** Find a Genre by id. */
  genre?: Maybe<MangoGenreInterface>;
  /** Find all Images. */
  allImages?: Maybe<MangoImageConnection>;
  /** Find a Image by id. */
  image?: Maybe<MangoImageInterface>;
  /** Find all ImageFiles. */
  allImageFiles?: Maybe<MangoImageFileConnection>;
  /** Find a ImageFile by id. */
  imageFile?: Maybe<MangoImageFileInterface>;
  /** Find a ImageFileCrop by id. */
  imageFileCrop?: Maybe<MangoImageFileCropInterface>;
  /** Find all ImportableThings. */
  allImportableThings?: Maybe<MangoImportableThingConnection>;
  /** Find a ImportableThing by id. */
  importableThing?: Maybe<MangoImportableThingInterface>;
  /** Find all Items. */
  allItems?: Maybe<MangoItemConnection>;
  /** Find a Item by id. */
  item?: Maybe<MangoItemInterface>;
  /** Find all Livestreams. */
  allLivestreams?: Maybe<MangoLivestreamConnection>;
  /** Find a Livestream by id. */
  livestream?: Maybe<MangoLivestreamInterface>;
  /** Find all LivestreamResources. */
  allLivestreamResources?: Maybe<MangoLivestreamResourceConnection>;
  /** Find a LivestreamResource by id. */
  livestreamResource?: Maybe<MangoLivestreamResourceInterface>;
  /** Find all MakingOf. */
  allMakingOf?: Maybe<MangoMakingOfConnection>;
  /** Find a MakingOf by id. */
  makingOf?: Maybe<MangoMakingOfInterface>;
  /** Find all Playlists. */
  allPlaylists?: Maybe<MangoPlaylistConnection>;
  /** Find a Playlist by id. */
  playlist?: Maybe<MangoPlaylistInterface>;
  /** Find all Profiles. */
  allProfiles?: Maybe<MangoProfileConnection>;
  /** Find a Profile by id. */
  profile?: Maybe<MangoProfileInterface>;
  /** Find all Programmes. */
  allProgrammes?: Maybe<MangoProgrammeConnection>;
  /** Find a Programme by id. */
  programme?: Maybe<MangoProgrammeInterface>;
  /** Find all ReactionTypes. */
  allReactionTypes?: Maybe<MangoReactionTypeConnection>;
  /** Find a ReactionType by id. */
  reactionType?: Maybe<MangoReactionTypeInterface>;
  /** Find all Seasons. */
  allSeasons?: Maybe<MangoSeasonConnection>;
  /** Find a Season by id. */
  season?: Maybe<MangoSeasonInterface>;
  /** Find a Section by id. */
  section?: Maybe<MangoSectionInterface>;
  /** Find all SectionTemplates. */
  allSectionTemplates?: Maybe<MangoSectionTemplateConnection>;
  /** Find a SectionTemplate by id. */
  sectionTemplate?: Maybe<MangoSectionTemplateInterface>;
  /** Find all Series. */
  allSeries?: Maybe<MangoSeriesConnection>;
  /** Find a Series by id. */
  series?: Maybe<MangoSeriesInterface>;
  /** Find all Subscriptions. */
  allSubscriptions?: Maybe<MangoSubscriptionConnection>;
  /** Find a Subscription by id. */
  subscription?: Maybe<MangoSubscriptionInterface>;
  /** Find a Subtitle by id. */
  subtitle?: Maybe<MangoSubtitleInterface>;
  /** Find all Tags. */
  allTags?: Maybe<MangoTagConnection>;
  /** Find a Tag by id. */
  tag?: Maybe<MangoTagInterface>;
  /** Find a TeaserContent by id. */
  teaserContent?: Maybe<MangoTeaserContentInterface>;
  /** Find all TimedTextFiles. */
  allTimedTextFiles?: Maybe<MangoTimedTextFileConnection>;
  /** Find a TimedTextFile by id. */
  timedTextFile?: Maybe<MangoTimedTextFileInterface>;
  /** Find all Trailers. */
  allTrailers?: Maybe<MangoTrailerConnection>;
  /** Find a Trailer by id. */
  trailer?: Maybe<MangoTrailerInterface>;
  /** Find all VideoFiles. */
  allVideoFiles?: Maybe<MangoVideoFileConnection>;
  /** Find a VideoFile by id. */
  videoFile?: Maybe<MangoVideoFileInterface>;
  /** Find all VideoProfiles. */
  allVideoProfiles?: Maybe<MangoVideoProfileConnection>;
  /** Find a VideoProfile by id. */
  videoProfile?: Maybe<MangoVideoProfileInterface>;
  features?: Maybe<MangoFeatureMap>;
  /** Get all Recommendations for current User. */
  recommendationsForMe?: Maybe<MangoRecSysResultConnection>;
  /** Index of series. The index is always filtered to only include series that have playable episodes. */
  seriesIndex: MangoSeriesIndex;
  findInSophora?: Maybe<MangoImportableThingInterface>;
  /** Tracking data. */
  trackingInfos?: Maybe<MangoTrackingInfoInterface>;
  me?: Maybe<MangoEndUserInterface>;
};


export type MangoViewerAllAudioFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioFileFilter>;
  orderBy?: Maybe<MangoAudioFileSortOrder>;
};


export type MangoViewerAudioFileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllAudioProfilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudioProfileFilter>;
  orderBy?: Maybe<MangoAudioProfileSortOrder>;
};


export type MangoViewerAudioProfileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllAvailabilityCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAvailabilityCategoryFilter>;
  orderBy?: Maybe<MangoAvailabilityCategorySortOrder>;
};


export type MangoViewerAvailabilityCategoryArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllBannerContentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBannerContentFilter>;
  orderBy?: Maybe<MangoBannerContentSortOrder>;
};


export type MangoViewerBannerContentArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllBestOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBestOfFilter>;
  orderBy?: Maybe<MangoBestOfSortOrder>;
};


export type MangoViewerBestOfArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllBoardsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBoardFilter>;
  orderBy?: Maybe<MangoBoardSortOrder>;
};


export type MangoViewerBoardArgs = {
  id: Scalars['ID'];
};


export type MangoViewerBroadcastEventArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllBroadcastRegionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastRegionFilter>;
  orderBy?: Maybe<MangoBroadcastRegionSortOrder>;
};


export type MangoViewerBroadcastRegionArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllBroadcastServicesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastServiceFilter>;
  orderBy?: Maybe<MangoBroadcastServiceSortOrder>;
};


export type MangoViewerBroadcastServiceArgs = {
  id: Scalars['ID'];
};


export type MangoViewerCaptionArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


export type MangoViewerCategoryArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllClipsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoClipFilter>;
  orderBy?: Maybe<MangoClipSortOrder>;
};


export type MangoViewerClipArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllContentInteractionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoContentInteractionFilter>;
  orderBy?: Maybe<MangoContentInteractionSortOrder>;
};


export type MangoViewerContentInteractionArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllElementContentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoElementContentFilter>;
  orderBy?: Maybe<MangoElementContentSortOrder>;
};


export type MangoViewerElementContentArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllEmbeddableThingsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoEmbeddableThingFilter>;
  orderBy?: Maybe<MangoEmbeddableThingSortOrder>;
};


export type MangoViewerEmbeddableThingArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllEndUsersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoEndUserFilter>;
  orderBy?: Maybe<MangoEndUserSortOrder>;
};


export type MangoViewerEndUserArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllExtrasArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExtraFilter>;
  orderBy?: Maybe<MangoExtraSortOrder>;
};


export type MangoViewerExtraArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


export type MangoViewerGenreArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


export type MangoViewerImageArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllImageFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFileFilter>;
  orderBy?: Maybe<MangoImageFileSortOrder>;
};


export type MangoViewerImageFileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerImageFileCropArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllImportableThingsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportableThingFilter>;
  orderBy?: Maybe<MangoImportableThingSortOrder>;
};


export type MangoViewerImportableThingArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllItemsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoItemFilter>;
  orderBy?: Maybe<MangoItemSortOrder>;
};


export type MangoViewerItemArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllLivestreamsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamFilter>;
  orderBy?: Maybe<MangoLivestreamSortOrder>;
};


export type MangoViewerLivestreamArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllLivestreamResourcesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamResourceFilter>;
  orderBy?: Maybe<MangoLivestreamResourceSortOrder>;
};


export type MangoViewerLivestreamResourceArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllMakingOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoMakingOfFilter>;
  orderBy?: Maybe<MangoMakingOfSortOrder>;
};


export type MangoViewerMakingOfArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllPlaylistsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPlaylistFilter>;
  orderBy?: Maybe<MangoPlaylistSortOrder>;
};


export type MangoViewerPlaylistArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllProfilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProfileFilter>;
  orderBy?: Maybe<MangoProfileSortOrder>;
};


export type MangoViewerProfileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllProgrammesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoProgrammeFilter>;
  orderBy?: Maybe<MangoProgrammeSortOrder>;
};


export type MangoViewerProgrammeArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllReactionTypesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoReactionTypeFilter>;
  orderBy?: Maybe<MangoReactionTypeSortOrder>;
};


export type MangoViewerReactionTypeArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllSeasonsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSeasonFilter>;
  orderBy?: Maybe<MangoSeasonSortOrder>;
};


export type MangoViewerSeasonArgs = {
  id: Scalars['ID'];
};


export type MangoViewerSectionArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllSectionTemplatesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSectionTemplateFilter>;
  orderBy?: Maybe<MangoSectionTemplateSortOrder>;
};


export type MangoViewerSectionTemplateArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllSeriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSeriesFilter>;
  orderBy?: Maybe<MangoSeriesSortOrder>;
};


export type MangoViewerSeriesArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllSubscriptionsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubscriptionFilter>;
  orderBy?: Maybe<MangoSubscriptionSortOrder>;
};


export type MangoViewerSubscriptionArgs = {
  id: Scalars['ID'];
};


export type MangoViewerSubtitleArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


export type MangoViewerTagArgs = {
  id: Scalars['ID'];
};


export type MangoViewerTeaserContentArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllTimedTextFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTimedTextFileFilter>;
  orderBy?: Maybe<MangoTimedTextFileSortOrder>;
};


export type MangoViewerTimedTextFileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllTrailersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTrailerFilter>;
  orderBy?: Maybe<MangoTrailerSortOrder>;
};


export type MangoViewerTrailerArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllVideoFilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoFileFilter>;
  orderBy?: Maybe<MangoVideoFileSortOrder>;
};


export type MangoViewerVideoFileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerAllVideoProfilesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoVideoProfileFilter>;
  orderBy?: Maybe<MangoVideoProfileSortOrder>;
};


export type MangoViewerVideoProfileArgs = {
  id: Scalars['ID'];
};


export type MangoViewerRecommendationsForMeArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoRecSysResultFilter>;
  algorithm?: Maybe<MangoPersonalRecommendationAlgorithm>;
};


export type MangoViewerSeriesIndexArgs = {
  filter?: Maybe<MangoSeriesFilter>;
};


export type MangoViewerFindInSophoraArgs = {
  id: Scalars['String'];
};


export type MangoViewerTrackingInfosArgs = {
  format?: Maybe<MangoTrackingInfoFormat>;
  clientParams?: Maybe<Scalars['String']>;
  context?: Maybe<MangoTrackingInfoContext>;
};

export type MangoVisitSubscriptionInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the visited subscription. */
  id: Scalars['ID'];
};

/**  (not documented) */
export type MangoWebhook = MangoNode & MangoWebhookInterface & MangoWritableThingInterface & {
   __typename?: 'MangoWebhook';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * A list of class IRIs for which updates are sent. This includes all sub-classes
   * of the specified classes. If empty all updates are sent. ()
   */
  filters?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  () */
  lastSuccessfulUpdate?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The URL of the webhook that is notified of changes () */
  updateUrl?: Maybe<Scalars['String']>;
};

export type MangoWebhookFilterListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  filter: Scalars['String'];
  webhook: Scalars['ID'];
};

/**  (not documented) */
export type MangoWebhookInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * A list of class IRIs for which updates are sent. This includes all sub-classes
   * of the specified classes. If empty all updates are sent. ()
   */
  filters?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  () */
  lastSuccessfulUpdate?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /** The URL of the webhook that is notified of changes () */
  updateUrl?: Maybe<Scalars['String']>;
};

/** The payload returned from mutations of Webhook. */
export type MangoWebhookPayload = {
   __typename?: 'MangoWebhookPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedWebhook?: Maybe<MangoWebhook>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoWebhookRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  webhook: Scalars['ID'];
};

/** Input parameter for the update mutation of Webhook */
export type MangoWebhookUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /**
   * A list of class IRIs for which updates are sent. This includes all sub-classes
   * of the specified classes. If empty all updates are sent. ()
   */
  filters?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  () */
  lastSuccessfulUpdate?: Maybe<Scalars['MangoDateTime']>;
  /** The URL of the webhook that is notified of changes () */
  updateUrl?: Maybe<Scalars['String']>;
};

/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPage = MangoNode & MangoWebPageInterface & MangoCategorizationInterface & MangoCreativeWorkInterface & MangoImportableThingInterface & MangoPublishableThingInterface & MangoSubjectInterface & MangoThingWithCanonicalUrlInterface & MangoWritableThingInterface & {
   __typename?: 'MangoWebPage';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPagePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPagePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

export type MangoWebPageAudienceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  audience: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageAuthorListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  author: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageCategoryListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  category: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageCreditListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  credit: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageEssenceListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  essence: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageExecutiveProducerListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  executiveProducer: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageExternalUrlListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  externalURL: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageFacebookAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  facebookAccount: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageFormatListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  format: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageGenreListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  genre: Scalars['ID'];
  webPage: Scalars['ID'];
};

/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<MangoAudienceConnection>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<MangoAgentConnection>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /** Associates a creative work with any number of categories. (de: Kategorisierung, en: categorization) */
  categorizations?: Maybe<MangoCategorizationConnection>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<MangoCategoryConnection>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<MangoAgentConnection>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<MangoImageInterface>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<MangoFileConnection>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<MangoAgentConnection>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<MangoExternalUrlConnection>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<MangoFacebookAccountConnection>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<MangoFormatConnection>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<MangoGenreConnection>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<MangoImportLocatorConnection>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * Gibt an ob es sich um einen Kinder Inhalt handelt. Kinder Inhalte sind mit
   * zusätzlichen Beschränkungen versehen. Zum Beispiel werden Empfehlungen auf
   * andere Kinder Inhalte eingeschränkt. (de: Kinder Inhalt, en: Kids content)
   */
  kidsContent?: Maybe<Scalars['Boolean']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /** Associates a creative work with any number of groupings. (de: Teil von, en: part of) */
  partOf?: Maybe<MangoGroupingConnection>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<MangoDepartmentConnection>;
  /**
   * Associates a creative work with an instance of it being published (in any form
   * and medium). (de: Veröffentlichung, en: publication)
   */
  publications?: Maybe<MangoPublicationEventConnection>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<MangoExternalUrlConnection>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<MangoStatusInterface>;
  /** Specifies that a CreativeWork is about a subject. (de: Thema, en: subject) */
  subjects?: Maybe<MangoSubjectConnection>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<MangoTagConnection>;
  /** Associates a creative work with another creative work that can be used to advertise the domain. (de: Teaser, en: teaser) */
  teasers?: Maybe<MangoCreativeWorkConnection>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<MangoImageConnection>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<MangoTwitterAccountConnection>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
  /** Retrives all creative works assoziated with this categorization. () */
  works?: Maybe<MangoCreativeWorkConnection>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceAudiencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAudienceFilter>;
  orderBy?: Maybe<MangoAudienceSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceAuthorsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceCategorizationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategorizationFilter>;
  orderBy?: Maybe<MangoCategorizationSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCategoryFilter>;
  orderBy?: Maybe<MangoCategorySortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceCreditsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceEssencesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFileFilter>;
  orderBy?: Maybe<MangoFileSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceExecutiveProducersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoAgentFilter>;
  orderBy?: Maybe<MangoAgentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceExternalUrlsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceFacebookAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFacebookAccountFilter>;
  orderBy?: Maybe<MangoFacebookAccountSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceFormatsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoFormatFilter>;
  orderBy?: Maybe<MangoFormatSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceGenresArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGenreFilter>;
  orderBy?: Maybe<MangoGenreSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceImportedFromArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImportLocatorFilter>;
  orderBy?: Maybe<MangoImportLocatorSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfacePartOfArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoGroupingFilter>;
  orderBy?: Maybe<MangoGroupingSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceProducingDepartmentsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoDepartmentFilter>;
  orderBy?: Maybe<MangoDepartmentSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfacePublicationsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoPublicationEventFilter>;
  orderBy?: Maybe<MangoPublicationEventSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceRelatedLinksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoExternalUrlFilter>;
  orderBy?: Maybe<MangoExternalUrlSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceSubjectsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoSubjectFilter>;
  orderBy?: Maybe<MangoSubjectSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceTagsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTagFilter>;
  orderBy?: Maybe<MangoTagSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceTeasersArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceTeaserImagesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoImageFilter>;
  orderBy?: Maybe<MangoImageSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceTwitterAccountsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoTwitterAccountFilter>;
  orderBy?: Maybe<MangoTwitterAccountSortOrder>;
};


/** An (external) webpage (de: Webseite, en: webpage) */
export type MangoWebPageInterfaceWorksArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoCreativeWorkFilter>;
  orderBy?: Maybe<MangoCreativeWorkSortOrder>;
};

/** The payload returned from mutations of WebPage. */
export type MangoWebPagePayload = {
   __typename?: 'MangoWebPagePayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedWebPage?: Maybe<MangoWebPage>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

export type MangoWebPageProducingDepartmentListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  producingDepartment: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageRelatedLinkListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  relatedLink: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageRemoveAllListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  webPage: Scalars['ID'];
};

export type MangoWebPageTagListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  tag: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageTeaserImageListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  teaserImage: Scalars['ID'];
  webPage: Scalars['ID'];
};

export type MangoWebPageTwitterAccountListInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  twitterAccount: Scalars['ID'];
  webPage: Scalars['ID'];
};

/** Input parameter for the update mutation of WebPage */
export type MangoWebPageUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
  /** Associates a creative work with any number of target audiences (de: Zielgruppe, en: audience) */
  audiences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (de: Autor, en: author) */
  authors?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: canonical URL) */
  canonicalUrl?: Maybe<Scalars['String']>;
  /**  (de: Kategory, en: category) */
  categories?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**  (en: copyright) */
  copyright?: Maybe<Scalars['String']>;
  /** Relates a creative work to a person or organization who is credited in it. (de: beteiligt, en: credit) */
  credits?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * An image that can be used to advertise a creative work. It is the recommended
   * image out of the set of all the teaser images the creative work is associated
   * with. (de: Default Teaserbild, en: default teaser image)
   */
  defaultTeaserImage?: Maybe<Scalars['ID']>;
  /** Any kind of text description of a creative work. (de: Beschreibung, en: description) */
  description?: Maybe<Scalars['String']>;
  /** Associates a creative work with a consumable file. (de: Essenz, en: essence) */
  essences?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Relates a creative work to its executive producer - the person or organization
   * responsible for the overall production. (de: Produzent, en: executive producer )
   */
  executiveProducers?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with any number of external URLs. (de: externe URL, en: external URL) */
  externalURLS?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work or an agent with Facebook accounts. (de: Facebook Account, en: Facebook account) */
  facebookAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of formats. (de: Präsentationsform, en: format) */
  formats?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a creative work with any number of genres. (de: Genre, en: genre) */
  genres?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * Specifies from which resources in other systems this ImportableThing was
   * imported from. (de: importiert aus, en: imported from)
   */
  importedFrom?: Maybe<Array<Maybe<MangoImportLocatorCreateInput>>>;
  /**
   * A short auxiliary title, usually shown above the main title, adding
   * introductory or contextual information. (de: Dachzeile, en: kicker)
   */
  kicker?: Maybe<Scalars['String']>;
  /**
   * If set to true the published content is excluded from automated indexing (e.g.
   * by the Google bot) (de: Von Index ausschließen, en: No index)
   */
  noIndex?: Maybe<Scalars['Boolean']>;
  /**
   * Associates a creative work with the department that is responsible for the
   * production of it. (de: Ressort, en: producing department)
   */
  producingDepartments?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Associates a Creative Work with related web pages. (de: Weiterführende Links, en: related links) */
  relatedLinks?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** A short description of a creative work suitable for teasers. (de: Kurzbeschreibung, en: short description) */
  shortDescription?: Maybe<Scalars['String']>;
  /** Unique, human readable URL component. It is usally the end part of the URL. (de: Sprechender Teil der URL, en: Slug) */
  slug?: Maybe<Scalars['String']>;
  /**
   * A textual description of the creative work used as preview snippet in search
   * engines or on sharing platforms. (de: preview snippet, en: Vorschautext)
   */
  snippet?: Maybe<Scalars['String']>;
  /** Associates a PublishableThing with a lifecycle status ("draft"/"published"/"archived"). (de: Status, en: status) */
  status?: Maybe<Scalars['ID']>;
  /** Associates a creative work with any number of tags. (de: Tag, en: tag) */
  tags?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** An image that can be used to advertise a creative work. (de: Teaserbild, en: teaser image) */
  teaserImages?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The main title of a creative work. (de: Titel, en: title) */
  title?: Maybe<Scalars['String']>;
  /** Associates a creative work or an agent with Twitter accounts. (de: Twitter Account, en: Twitter account) */
  twitterAccounts?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /**
   * A manually settable date that can be rendered along the creative work as
   * something like "version as of May 2016". (de: Stand vom, en: version from)
   */
  versionFrom?: Maybe<Scalars['MangoDateTime']>;
};

/**  (not documented) */
export type MangoWritableThing = MangoNode & MangoWritableThingInterface & {
   __typename?: 'MangoWritableThing';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/**  (not documented) */
export type MangoWritableThingInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
  /** Specifies when a record was created in the database. (de: Erstellt am, en: created at) */
  createdAt?: Maybe<Scalars['MangoDateTime']>;
  /** Specifies when a record was last modified. (de: Geändert am, en: modified at) */
  modifiedAt?: Maybe<Scalars['MangoDateTime']>;
};

/** The payload returned from mutations of WritableThing. */
export type MangoWritableThingPayload = {
   __typename?: 'MangoWritableThingPayload';
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The mutated object. */
  changedWritableThing?: Maybe<MangoWritableThing>;
  /** The viewer. */
  viewer?: Maybe<MangoViewer>;
};

/** Input parameter for the update mutation of WritableThing */
export type MangoWritableThingUpdateInput = {
  /**
   * The client mutation ID used by clients like Relay to track the mutation. If
   * given, returned in the response payload of the mutation.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the updated object. */
  id: Scalars['ID'];
};

export enum MetaCacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE'
}


export type MetaMeta = {
   __typename?: 'MetaMeta';
  /** the site name of the requested URL, e.g. `BR24` or `tagesschau.de` */
  source: Scalars['String'];
  /** the requested page's URL */
  url: Scalars['String'];
  /** the page's `twitter:title`, `og:title` or `<title>` */
  title: Scalars['String'];
  /** the page's `article:published_time`, `og:article:published_time`, `date`  or `DC.Date` */
  date?: Maybe<Scalars['MetaDateTime']>;
  /** The page's `twitter:description`, `og:description` or `description` */
  description?: Maybe<Scalars['String']>;
  /** The page's `og:image` URL, rehosted on the BR imageserver */
  thumbnail?: Maybe<Scalars['String']>;
  /** The page's `og:image` original URL */
  originalThumbnail?: Maybe<Scalars['String']>;
  /** Did this request come from the heavymeta redis cache? */
  fromCache: Scalars['Boolean'];
};

export type MetaQuery = {
   __typename?: 'MetaQuery';
  /** Query metadata from URL */
  meta?: Maybe<MetaMeta>;
  /** Healthcheck query */
  healthcheck?: Maybe<Scalars['Boolean']>;
};


export type MetaQueryMetaArgs = {
  url: Scalars['String'];
  thumbnailWidth?: Maybe<Scalars['Int']>;
  forceFresh?: Maybe<Scalars['Boolean']>;
};

export type MusicElement = AudioElement & {
   __typename?: 'MusicElement';
  guid?: Maybe<Scalars['GUID']>;
  class: AudioElementClass;
  start: Scalars['MangoDateTime'];
  duration?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  performer?: Maybe<Scalars['String']>;
  composer?: Maybe<Scalars['String']>;
  album?: Maybe<Scalars['String']>;
  musicId?: Maybe<Scalars['Int']>;
  raw?: Maybe<Scalars['JSON']>;
};

export type Mutation = {
   __typename?: 'Mutation';
  /** Mutation of mango */
  mango?: Maybe<MangoRootMutation>;
};

export type NewsElement = AudioElement & {
   __typename?: 'NewsElement';
  guid?: Maybe<Scalars['GUID']>;
  class: AudioElementClass;
  start: Scalars['MangoDateTime'];
  duration?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
};

export type Node = NodeType | SophoraDocument | MangoCreativeWork | MangoProgramme | MangoBroadcastService | MetaMeta;

export type NodeInterface = {
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
};

export type NodeType = NodeInterface & MangoNode & {
   __typename?: 'NodeType';
  id: Scalars['ID'];
  baseIdPrefix: Scalars['String'];
};

export type Query = {
   __typename?: 'Query';
  /** Query of mango */
  mango?: Maybe<MangoRootQuery>;
  /** Query of meta */
  meta?: Maybe<MetaQuery>;
  /** Query of sophora */
  sophora?: Maybe<SophoraQuery>;
  _extIntrospection?: Maybe<_ExtendedIntrospection>;
  audioBroadcastService?: Maybe<AudioBroadcastService>;
  audioBroadcastServices?: Maybe<AudioBroadcastServiceConnection>;
  audioLivestreams?: Maybe<MangoLivestreamConnection>;
  node?: Maybe<Node>;
};


export type QueryAudioBroadcastServiceArgs = {
  id: AudioBroadcastServiceId;
};


export type QueryAudioBroadcastServicesArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoBroadcastServiceFilter>;
  orderBy?: Maybe<MangoBroadcastServiceSortOrder>;
};


export type QueryAudioLivestreamsArgs = {
  after?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MangoLivestreamFilter>;
  orderBy?: Maybe<MangoLivestreamSortOrder>;
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
};

export enum SepProduct {
  BrRadio = 'BR_Radio',
  SophoraBrde = 'Sophora_BRDE'
}


export type SophoraDocument = SophoraDocumentInterface & {
   __typename?: 'SophoraDocument';
  primaryType: Scalars['String'];
  uuid: Scalars['SophoraUUID'];
  sophoraId: Scalars['String'];
  path?: Maybe<Scalars['String']>;
  externalId?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  /** Titel des Dokuments, Sophora intern auch `headline` */
  title: Scalars['String'];
  /** Dachzeile */
  topline?: Maybe<Scalars['String']>;
  teaserText?: Maybe<Scalars['String']>;
  publicationDate?: Maybe<Scalars['SophoraDatetime']>;
  updatedAt?: Maybe<Scalars['SophoraDatetime']>;
  status?: Maybe<SophoraDocumentState>;
  raw?: Maybe<Scalars['SophoraJSON']>;
  brandingStrings?: Maybe<Scalars['SophoraJSON']>;
  broadcastTechnicalData?: Maybe<Scalars['SophoraJSON']>;
};


export type SophoraDocumentRawArgs = {
  filter?: Maybe<Scalars['String']>;
  removePrefix?: Maybe<Scalars['Boolean']>;
  key?: Maybe<Scalars['String']>;
};

export type SophoraDocumentConnection = {
   __typename?: 'SophoraDocumentConnection';
  totalCount: Scalars['Int'];
  nodes?: Maybe<Array<SophoraDocumentInterface>>;
  /** @deprecated raw response from used search endpoint, only for internal use */
  _raw?: Maybe<Scalars['SophoraJSON']>;
  /** @deprecated sub folders in this paths, where you probably also want to look  */
  _structure?: Maybe<Scalars['SophoraJSON']>;
  /** @deprecated query generated from filters, only for internal use */
  _query?: Maybe<Scalars['String']>;
};

export type SophoraDocumentInterface = {
  primaryType: Scalars['String'];
  uuid: Scalars['SophoraUUID'];
  sophoraId: Scalars['String'];
  path?: Maybe<Scalars['String']>;
  externalId?: Maybe<Scalars['String']>;
  /** Titel des Dokuments, Sophora intern auch `headline` */
  title: Scalars['String'];
  raw?: Maybe<Scalars['SophoraJSON']>;
};


export type SophoraDocumentInterfaceRawArgs = {
  filter?: Maybe<Scalars['String']>;
  removePrefix?: Maybe<Scalars['Boolean']>;
  key?: Maybe<Scalars['String']>;
};

export enum SophoraDocumentState {
  Draft = 'draft',
  Published = 'published',
  Offline = 'offline'
}

export type SophoraDocumentSummary = SophoraDocumentInterface & {
   __typename?: 'SophoraDocumentSummary';
  primaryType: Scalars['String'];
  uuid: Scalars['SophoraUUID'];
  sophoraId: Scalars['String'];
  path?: Maybe<Scalars['String']>;
  externalId?: Maybe<Scalars['String']>;
  /** Titel des Dokuments, Sophora intern auch `headline` */
  title: Scalars['String'];
  status?: Maybe<SophoraDocumentState>;
  fullDocument?: Maybe<SophoraDocument>;
  raw?: Maybe<Scalars['SophoraJSON']>;
};


export type SophoraDocumentSummaryFullDocumentArgs = {
  mode?: Maybe<SophoraDocumentVariant>;
};


export type SophoraDocumentSummaryRawArgs = {
  filter?: Maybe<Scalars['String']>;
  removePrefix?: Maybe<Scalars['Boolean']>;
  key?: Maybe<Scalars['String']>;
};

export enum SophoraDocumentType {
  IndexPage = 'indexPage',
  BrandingDocument = 'brandingDocument',
  BroadcastChannel = 'broadcastChannel',
  Broadcast = 'broadcast',
  StaticAudio = 'staticAudio',
  Audio = 'audio',
  AvProfile = 'avProfile',
  BroadcastScheduleSlot = 'broadcastScheduleSlot',
  BroadcastSeries = 'broadcastSeries',
  BroadcastTeaser = 'broadcastTeaser',
  TeaserInheritance = 'teaserInheritance',
  TeaserSet = 'teaserSet',
  CustomTeaserFilter = 'customTeaserFilter',
  HierarchyDocument = 'hierarchyDocument',
  HierarchySettingsDocument = 'hierarchySettingsDocument',
  Link = 'link'
}

export enum SophoraDocumentVariant {
  Extended = 'extended',
  Summary = 'summary',
  Editing = 'editing',
  Simple = 'simple'
}

export enum SophoraDocumentVariantReduced {
  Extended = 'extended',
  Editing = 'editing',
  Simple = 'simple'
}


export type SophoraQuery = {
   __typename?: 'SophoraQuery';
  document?: Maybe<SophoraDocument>;
  documentById?: Maybe<SophoraDocument>;
  documentByExternalId?: Maybe<SophoraDocument>;
  search?: Maybe<SophoraDocumentConnection>;
  searchSolr?: Maybe<SophoraDocumentConnection>;
  nodeType?: Maybe<Scalars['SophoraJSON']>;
};


export type SophoraQueryDocumentArgs = {
  uuid: Scalars['SophoraUUID'];
  mode?: Maybe<SophoraDocumentVariant>;
  depth?: Maybe<Scalars['Int']>;
};


export type SophoraQueryDocumentByIdArgs = {
  sophoraId: Scalars['String'];
  mode?: Maybe<SophoraDocumentVariantReduced>;
  depth?: Maybe<Scalars['Int']>;
};


export type SophoraQueryDocumentByExternalIdArgs = {
  externalId: Scalars['String'];
  mode?: Maybe<SophoraDocumentVariant>;
  depth?: Maybe<Scalars['Int']>;
};


export type SophoraQuerySearchArgs = {
  q?: Maybe<Scalars['String']>;
  filter?: Maybe<Array<Maybe<Scalars['String']>>>;
  path?: Maybe<Scalars['String']>;
  type?: Maybe<SophoraDocumentType>;
  status?: Maybe<SophoraDocumentState>;
  first?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
};


export type SophoraQuerySearchSolrArgs = {
  q?: Maybe<Scalars['String']>;
  filter?: Maybe<Array<Maybe<Scalars['String']>>>;
  path?: Maybe<Scalars['String']>;
  type?: Maybe<SophoraDocumentType>;
  status?: Maybe<SophoraDocumentState>;
  first?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
};


export type SophoraQueryNodeTypeArgs = {
  name: Scalars['String'];
};


export type StationQueryQueryVariables = {
  id: Scalars['ID'];
};


export type StationQueryQuery = (
  { __typename?: 'Query' }
  & { node?: Maybe<{ __typename?: 'NodeType' } | { __typename?: 'SophoraDocument' } | { __typename?: 'MangoCreativeWork' } | { __typename?: 'MangoProgramme' } | (
    { __typename?: 'MangoBroadcastService' }
    & StationFragment
  ) | { __typename?: 'MetaMeta' }> }
);

export type StationListQueryQueryVariables = {};


export type StationListQueryQuery = (
  { __typename?: 'Query' }
  & { audioBroadcastServices?: Maybe<(
    { __typename?: 'AudioBroadcastServiceConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MangoBroadcastService' }
      & Pick<MangoBroadcastService, 'id'>
      & StationFragment
    )>>> }
  )> }
);

export type StationDetailsQueryQueryVariables = {
  id?: Scalars['ID'];
};


export type StationDetailsQueryQuery = (
  { __typename?: 'Query' }
  & { stationDetails?: Maybe<{ __typename?: 'NodeType' } | { __typename?: 'SophoraDocument' } | { __typename?: 'MangoCreativeWork' } | { __typename?: 'MangoProgramme' } | (
    { __typename?: 'MangoBroadcastService' }
    & StationFragment
    & StationExtraMetaDataFragment
  ) | { __typename?: 'MetaMeta' }> }
);

export type StationFragment = (
  { __typename?: 'MangoBroadcastService' }
  & Pick<MangoBroadcastService, 'id' | 'name' | 'brandingColor' | 'colors' | 'logoUrl'>
  & { logoSquareUrl: MangoBroadcastService['logoUrl'] }
  & { items?: Maybe<Array<Maybe<(
    { __typename?: 'NewsElement' }
    & Element_NewsElement_Fragment
  ) | (
    { __typename?: 'MusicElement' }
    & Element_MusicElement_Fragment
  ) | (
    { __typename?: 'AudioElementDefaultType' }
    & Element_AudioElementDefaultType_Fragment
  )>>>, livestreams?: Maybe<Array<Maybe<(
    { __typename?: 'SophoraDocumentSummary' }
    & StreamFragment
  )>>>, currentEpg?: Maybe<Array<Maybe<(
    { __typename?: 'MangoEPGEntry' }
    & BroadcastFragment
  )>>> }
);

type Element_NewsElement_Fragment = (
  { __typename?: 'NewsElement' }
  & Pick<NewsElement, 'author' | 'start' | 'duration' | 'title'>
);

type Element_MusicElement_Fragment = (
  { __typename?: 'MusicElement' }
  & Pick<MusicElement, 'performer' | 'composer' | 'start' | 'duration' | 'title'>
);

type Element_AudioElementDefaultType_Fragment = (
  { __typename?: 'AudioElementDefaultType' }
  & Pick<AudioElementDefaultType, 'start' | 'duration' | 'title'>
);

export type ElementFragment = Element_NewsElement_Fragment | Element_MusicElement_Fragment | Element_AudioElementDefaultType_Fragment;

export type StreamFragment = (
  { __typename?: 'SophoraDocumentSummary' }
  & Pick<SophoraDocumentSummary, 'title'>
  & { url: SophoraDocumentSummary['raw'] }
);

export type BroadcastFragment = (
  { __typename?: 'MangoEPGEntry' }
  & { broadcastEvent?: Maybe<(
    { __typename?: 'MangoBroadcastEvent' }
    & Pick<MangoBroadcastEvent, 'start' | 'end'>
    & { items?: Maybe<Array<Maybe<(
      { __typename?: 'NewsElement' }
      & Element_NewsElement_Fragment
    ) | (
      { __typename?: 'MusicElement' }
      & Element_MusicElement_Fragment
    ) | (
      { __typename?: 'AudioElementDefaultType' }
      & Element_AudioElementDefaultType_Fragment
    )>>>, publicationOf?: Maybe<(
      { __typename?: 'MangoCreativeWork' }
      & Pick<MangoCreativeWork, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoProgramme' }
      & Pick<MangoProgramme, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoBestOf' }
      & Pick<MangoBestOf, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoBoard' }
      & Pick<MangoBoard, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoClip' }
      & Pick<MangoClip, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoExtra' }
      & Pick<MangoExtra, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoImage' }
      & Pick<MangoImage, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoItem' }
      & Pick<MangoItem, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoMakingOf' }
      & Pick<MangoMakingOf, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoPlaylist' }
      & Pick<MangoPlaylist, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoSeason' }
      & Pick<MangoSeason, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoSeries' }
      & Pick<MangoSeries, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoTrailer' }
      & Pick<MangoTrailer, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoWebPage' }
      & Pick<MangoWebPage, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    ) | (
      { __typename?: 'MangoGrouping' }
      & Pick<MangoGrouping, 'kicker' | 'title' | 'description'>
      & { image?: Maybe<(
        { __typename?: 'MangoImage' }
        & Pick<MangoImage, 'url'>
      )> }
    )> }
  )> }
);

export type StationExtraMetaDataFragment = (
  { __typename?: 'MangoBroadcastService' }
  & { fallbackTeaserImage?: Maybe<(
    { __typename?: 'MangoImage' }
    & Pick<MangoImage, 'url'>
  )>, todayEpg?: Maybe<Array<Maybe<(
    { __typename?: 'MangoEPGEntry' }
    & BroadcastFragment
  )>>> }
);
